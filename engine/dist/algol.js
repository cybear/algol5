module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 192);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("var freeGlobal = __webpack_require__(47);\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_root.js\n// module id = 0\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_root.js?");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isArray.js\n// module id = 1\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/isArray.js?");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isObject.js\n// module id = 2\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/isObject.js?");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsNative = __webpack_require__(99),\n    getValue = __webpack_require__(135);\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getNative.js\n// module id = 3\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_getNative.js?");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("var root = __webpack_require__(0);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_Symbol.js\n// module id = 4\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_Symbol.js?");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(4),\n    getRawTag = __webpack_require__(134),\n    objectToString = __webpack_require__(163);\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseGetTag.js\n// module id = 5\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseGetTag.js?");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isObjectLike.js\n// module id = 6\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/isObjectLike.js?");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeKeys = __webpack_require__(40),\n    baseKeys = __webpack_require__(102),\n    isArrayLike = __webpack_require__(32);\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/keys.js\n// module id = 7\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/keys.js?");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assignValue = __webpack_require__(42),\n    baseAssignValue = __webpack_require__(23);\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_copyObject.js\n// module id = 8\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_copyObject.js?");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isSymbol = __webpack_require__(16);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_toKey.js\n// module id = 9\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_toKey.js?");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("var listCacheClear = __webpack_require__(149),\n    listCacheDelete = __webpack_require__(150),\n    listCacheGet = __webpack_require__(151),\n    listCacheHas = __webpack_require__(152),\n    listCacheSet = __webpack_require__(153);\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_ListCache.js\n// module id = 10\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_ListCache.js?");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

eval("var eq = __webpack_require__(15);\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_assocIndexOf.js\n// module id = 11\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_assocIndexOf.js?");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isArray = __webpack_require__(1),\n    isKey = __webpack_require__(29),\n    stringToPath = __webpack_require__(175),\n    toString = __webpack_require__(188);\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_castPath.js\n// module id = 12\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_castPath.js?");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isKeyable = __webpack_require__(147);\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getMapData.js\n// module id = 13\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_getMapData.js?");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(3);\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_nativeCreate.js\n// module id = 14\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_nativeCreate.js?");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

eval("/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/eq.js\n// module id = 15\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/eq.js?");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(5),\n    isObjectLike = __webpack_require__(6);\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isSymbol.js\n// module id = 16\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/isSymbol.js?");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar GAMES = __webpack_require__(197);\nvar META = __webpack_require__(198);\nexports.games = GAMES;\nexports.meta = META;\n// TODO - import? \nvar colnametonumber = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVXYZ\".split(\"\").reduce(function (mem, char, n) {\n    mem[char] = n + 1;\n    return mem;\n}, {});\nvar colnumbertoname = Object.keys(colnametonumber).reduce(function (mem, key) {\n    var val = colnametonumber[key];\n    mem[val] = key;\n    return mem;\n}, {});\nexports.coords2pos = function (coords) { return colnumbertoname[coords.x] + coords.y; };\nexports.pos2coords = function (pos) { return ({\n    x: colnametonumber[pos[0]],\n    y: parseInt(pos.substr(1))\n}); };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./gamesproxy.js\n// module id = 17\n// module chunks = 0\n\n//# sourceURL=webpack:///./gamesproxy.js?");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(3),\n    root = __webpack_require__(0);\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_Map.js\n// module id = 18\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_Map.js?");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

eval("var mapCacheClear = __webpack_require__(154),\n    mapCacheDelete = __webpack_require__(155),\n    mapCacheGet = __webpack_require__(156),\n    mapCacheHas = __webpack_require__(157),\n    mapCacheSet = __webpack_require__(158);\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_MapCache.js\n// module id = 19\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_MapCache.js?");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

eval("var ListCache = __webpack_require__(10),\n    stackClear = __webpack_require__(170),\n    stackDelete = __webpack_require__(171),\n    stackGet = __webpack_require__(172),\n    stackHas = __webpack_require__(173),\n    stackSet = __webpack_require__(174);\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_Stack.js\n// module id = 20\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_Stack.js?");

/***/ }),
/* 21 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_arrayMap.js\n// module id = 21\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_arrayMap.js?");

/***/ }),
/* 22 */
/***/ (function(module, exports) {

eval("/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_arrayPush.js\n// module id = 22\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_arrayPush.js?");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

eval("var defineProperty = __webpack_require__(45);\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseAssignValue.js\n// module id = 23\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseAssignValue.js?");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

eval("var castPath = __webpack_require__(12),\n    toKey = __webpack_require__(9);\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseGet.js\n// module id = 24\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseGet.js?");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Uint8Array = __webpack_require__(39);\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_cloneArrayBuffer.js\n// module id = 25\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_cloneArrayBuffer.js?");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

eval("var overArg = __webpack_require__(55);\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getPrototype.js\n// module id = 26\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_getPrototype.js?");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayFilter = __webpack_require__(86),\n    stubArray = __webpack_require__(62);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nmodule.exports = getSymbols;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getSymbols.js\n// module id = 27\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_getSymbols.js?");

/***/ }),
/* 28 */
/***/ (function(module, exports) {

eval("/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_isIndex.js\n// module id = 28\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_isIndex.js?");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isArray = __webpack_require__(1),\n    isSymbol = __webpack_require__(16);\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_isKey.js\n// module id = 29\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_isKey.js?");

/***/ }),
/* 30 */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_isPrototype.js\n// module id = 30\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_isPrototype.js?");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsArguments = __webpack_require__(96),\n    isObjectLike = __webpack_require__(6);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isArguments.js\n// module id = 31\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/isArguments.js?");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isFunction = __webpack_require__(59),\n    isLength = __webpack_require__(34);\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isArrayLike.js\n// module id = 32\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/isArrayLike.js?");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(0),\n    stubFalse = __webpack_require__(185);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36)(module)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isBuffer.js\n// module id = 33\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/isBuffer.js?");

/***/ }),
/* 34 */
/***/ (function(module, exports) {

eval("/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isLength.js\n// module id = 34\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/isLength.js?");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isGameEndCommand(cmnd) {\n    return !!{\n        win: 1,\n        lose: 1,\n        draw: 1\n    }[cmnd];\n}\nexports.default = isGameEndCommand;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/various/isgameendcmnd.ts\n// module id = 35\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/various/isgameendcmnd.ts?");

/***/ }),
/* 36 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 36\n// module chunks = 0\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseRandom = __webpack_require__(108),\n    isIterateeCall = __webpack_require__(146),\n    toFinite = __webpack_require__(186);\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/random.js\n// module id = 37\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/random.js?");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function _defineProperty(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e};module.exports.compress = function compressArrayToString(r,e,a){if(e=numberIsInteger(e)?e:95,(a=numberIsInteger(a)?a:32)+e>256)throw new Error(\"Your provided asciiOffset(\"+a+\") + maxRadix(\"+e+\") = (\"+(a+e)+\") are greater than 256, the total number of ASCII characters available\");for(var t=new Array(e),n=0;n<e;++n)t[n]=String.fromCharCode(n+a);var o=r.length;if(!o)return\"\";var v={val:r[0]},f=[v];f[\"__\"+r[0]]=v;for(var i=_defineProperty({},r[0],[0]),l=[1],s=0,g=r[0],h=1;h<o;h++){var c=r[h];if(c===g)++l[s];else if(l.push(1),++s,g=c,i[c])i[c].push(s);else{i[c]=[s];var p={val:c};f.push(p),f[\"__\"+c]=p}}var u=a+\"|\",d=f.length;if(d-1>e)throw new Error(\"Can't handle arrays with more than provided maxRadix(\"+e+\") types of values\");f.sort(function(r,e){if(!r.percentage){for(var a=i[r.val],t=a.length,n=0,v=0;v<t;++v)n+=l[a[v]];r.percentage=n/o}if(!e.percentage){for(var f=i[e.val],s=f.length,g=0,h=0;h<s;++h)g+=l[f[h]];e.percentage=g/o}return r.percentage-e.percentage});for(var m=0,_=e,w=d-1,x=0;x<w;++x){var I=f[x],y=I.percentage*_,R=Math.floor(y);y<1&&(++R,_-=1-y),I.radix=R,I.offset=m,I.valsRange=t.slice(m,m+R),m+=R,u+=I.val+\"=\"+R+\",\"}var b=m,C=e-m;f[w].offset=b,f[w].radix=C,f[w].valsRange=t.slice(b,b+C),u+=f[w].val+\"=\"+C+\"|\";for(var A=0,S=l.length,E=0;E<S;E++){var B=r[A],F=l[E];u+=convertFromBase10(F,f[\"__\"+B].valsRange),A+=F}return u};module.exports.inflate = function inflateCompressedArray(r){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Array;if(!r.length)return[];var a=r.indexOf(\"|\"),s=r.indexOf(\"|\",a+1);if(!~a||!~s)throw new Error(\"Missing pipe delimiters... this wasn't compressed with the 'compress' method from array-compress\");for(var i=+r.slice(0,a),t=0,n=[],l=r.slice(a+1,s).split(\",\"),o=l.length,f=0;f<o;++f){var v=l[f].split(\"=\"),h=+v[0],g=+v[1],d={val:h,radix:g,offset:t};t+=g,n[\"__\"+h]=d,n.push(d)}for(var m=new Array(t),p=0;p<t;++p)m[p]=String.fromCharCode(p+i);for(var c={},w=n.length,_=0;_<w;++_){for(var u={},x=n[_],y=x.radix,A=x.offset,C=m.slice(A,A+y),L=x.val,O=0;O<y;++O){var R=C[O];c[R]=L,u[R]=O}C.__memo=u,x.valsRange=C}for(var V=[],B=0,E=r.slice(s+1),M=E.length+1,S=c[E[0]],T=E[0],b=1;b<M;b++){var j=E[b],k=c[j];if(S===k)T+=j;else{var q=n[\"__\"+S],z=convertToBase10(T,q.valsRange);B+=z,T=j,V.push({arrLength:z,arrVal:S}),S=k}}for(var D=V.length,F=new e(B),G=0,H=0;H<D;++H){var I=V[H],J=I.arrLength,K=I.arrVal;F.fill(K,G,G+J),G+=J}return F};function convertFromBase10(r,t){var e=t.length;if(1===e)return stringRepeat(t[0],r);for(var n=\"\";r>0;){var o=r%e;n=\"\"+t[o]+n,r=(r-o)/e}return n||\"0\"}function convertToBase10(r,t){var e=t.length;if(1===e)return r.length;for(var n=0,o=t.__memo,a=r.length-1,i=a;i>=0;--i)n+=o[r[i]]*Math.pow(e,a-i);return n}function stringRepeat(r,t){\"use strict\";if(null==r)throw new TypeError(\"can't convert \"+r+\" to object\");var e=\"\"+r;if((t=+t)!=t&&(t=0),t<0)throw new RangeError(\"repeat count must be non-negative\");if(t==1/0)throw new RangeError(\"repeat count must be less than infinity\");if(t=Math.floor(t),0==e.length||0==t)return\"\";if(e.length*t>=1<<28)throw new RangeError(\"repeat count must not overflow maximum string size\");for(var n=\"\";1==(1&t)&&(n+=e),0!=(t>>>=1);)e+=e;return n}function numberIsInteger(r){return\"number\"==typeof r&&isFinite(r)&&Math.floor(r)===r}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/array-compress/build.js\n// module id = 38\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/array-compress/build.js?");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

eval("var root = __webpack_require__(0);\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_Uint8Array.js\n// module id = 39\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_Uint8Array.js?");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseTimes = __webpack_require__(111),\n    isArguments = __webpack_require__(31),\n    isArray = __webpack_require__(1),\n    isBuffer = __webpack_require__(33),\n    isIndex = __webpack_require__(28),\n    isTypedArray = __webpack_require__(60);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_arrayLikeKeys.js\n// module id = 40\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_arrayLikeKeys.js?");

/***/ }),
/* 41 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_arrayReduce.js\n// module id = 41\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_arrayReduce.js?");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseAssignValue = __webpack_require__(23),\n    eq = __webpack_require__(15);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_assignValue.js\n// module id = 42\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_assignValue.js?");

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayPush = __webpack_require__(22),\n    isArray = __webpack_require__(1);\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nmodule.exports = baseGetAllKeys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseGetAllKeys.js\n// module id = 43\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseGetAllKeys.js?");

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsEqualDeep = __webpack_require__(97),\n    isObjectLike = __webpack_require__(6);\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseIsEqual.js\n// module id = 44\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseIsEqual.js?");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(3);\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_defineProperty.js\n// module id = 45\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_defineProperty.js?");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

eval("var SetCache = __webpack_require__(80),\n    arraySome = __webpack_require__(87),\n    cacheHas = __webpack_require__(116);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_equalArrays.js\n// module id = 46\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_equalArrays.js?");

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(199)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_freeGlobal.js\n// module id = 47\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_freeGlobal.js?");

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetAllKeys = __webpack_require__(43),\n    getSymbols = __webpack_require__(27),\n    keys = __webpack_require__(7);\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nmodule.exports = getAllKeys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getAllKeys.js\n// module id = 48\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_getAllKeys.js?");

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetAllKeys = __webpack_require__(43),\n    getSymbolsIn = __webpack_require__(50),\n    keysIn = __webpack_require__(61);\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getAllKeysIn.js\n// module id = 49\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_getAllKeysIn.js?");

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayPush = __webpack_require__(22),\n    getPrototype = __webpack_require__(26),\n    getSymbols = __webpack_require__(27),\n    stubArray = __webpack_require__(62);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getSymbolsIn.js\n// module id = 50\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_getSymbolsIn.js?");

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

eval("var DataView = __webpack_require__(76),\n    Map = __webpack_require__(18),\n    Promise = __webpack_require__(78),\n    Set = __webpack_require__(79),\n    WeakMap = __webpack_require__(81),\n    baseGetTag = __webpack_require__(5),\n    toSource = __webpack_require__(57);\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getTag.js\n// module id = 51\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_getTag.js?");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(2);\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_isStrictComparable.js\n// module id = 52\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_isStrictComparable.js?");

/***/ }),
/* 53 */
/***/ (function(module, exports) {

eval("/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_mapToArray.js\n// module id = 53\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_mapToArray.js?");

/***/ }),
/* 54 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_matchesStrictComparable.js\n// module id = 54\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_matchesStrictComparable.js?");

/***/ }),
/* 55 */
/***/ (function(module, exports) {

eval("/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_overArg.js\n// module id = 55\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_overArg.js?");

/***/ }),
/* 56 */
/***/ (function(module, exports) {

eval("/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_setToArray.js\n// module id = 56\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_setToArray.js?");

/***/ }),
/* 57 */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_toSource.js\n// module id = 57\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_toSource.js?");

/***/ }),
/* 58 */
/***/ (function(module, exports) {

eval("/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/identity.js\n// module id = 58\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/identity.js?");

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(5),\n    isObject = __webpack_require__(2);\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isFunction.js\n// module id = 59\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/isFunction.js?");

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsTypedArray = __webpack_require__(100),\n    baseUnary = __webpack_require__(113),\n    nodeUtil = __webpack_require__(162);\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isTypedArray.js\n// module id = 60\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/isTypedArray.js?");

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeKeys = __webpack_require__(40),\n    baseKeysIn = __webpack_require__(103),\n    isArrayLike = __webpack_require__(32);\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/keysIn.js\n// module id = 61\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/keysIn.js?");

/***/ }),
/* 62 */
/***/ (function(module, exports) {

eval("/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = stubArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/stubArray.js\n// module id = 62\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/stubArray.js?");

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (true) {\n  !(__WEBPACK_AMD_DEFINE_RESULT__ = function () { return LZString; }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lz-string/libs/lz-string.js\n// module id = 63\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lz-string/libs/lz-string.js?");

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\nUsed in .inflateFromSave, .startGameSession and .makeSessionAction (when ending turn)\nMutates the given turn with all steps that can lead to turn end, and links for those steps\nReturns the mutated turn\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar hydratestep_1 = __webpack_require__(190);\nfunction hydrateTurn(game, turn) {\n    turn.ends = {\n        win: [],\n        draw: [],\n        lose: [],\n    };\n    turn.next = {};\n    hydratestep_1.default(game, turn, turn.steps.root);\n    return turn;\n}\nexports.default = hydrateTurn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/hydration/hydrateturn.ts\n// module id = 64\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/hydration/hydrateturn.ts?");

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar base64chars_1 = __webpack_require__(67);\nexports.lengthOfEncodedBattleId = 4;\nfunction generateBattleId() {\n    var id = '';\n    for (var i = 0; i < exports.lengthOfEncodedBattleId; i++) {\n        id += base64chars_1.default[Math.floor(Math.random() * base64chars_1.default.length)];\n    }\n    return id;\n}\nexports.generateBattleId = generateBattleId;\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/id/battleid.ts\n// module id = 65\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/id/battleid.ts?");

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// TODO - we should encode games to 2 letters, otherwise we get max cap at 60sth!\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// All games must be part of this array, and order must never be changed!\n// When you add a new game, add it to the end of the list!\nvar games = [\n    \"_test\", \"amazon\", \"aries\", \"atrium\", \"castle\", \"coffee\", \"daggers\", \"gogol\", \"jostle\", \"kickrun\", \"krieg\",\n    \"murusgallicus\", \"murusgallicusadvanced\", \"orthokon\", \"semaphor\", \"serauqs\", \"snijpunt\", \"transet\", \"threemusketeers\",\n    \"uglyduck\"\n];\nvar base64chars_1 = __webpack_require__(67);\nfunction char2index(char) {\n    return char ? Math.max(base64chars_1.default.indexOf(char), 0) : 0;\n}\nfunction game2num(gameid) {\n    var num = games.indexOf(gameid);\n    if (num === -1) {\n        throw \"Game \\\"\" + gameid + \"\\\" is not mentioned in id array!\";\n    }\n    return num;\n}\nfunction decodeGameId(codeChar, offsetChar) {\n    var pos = base64chars_1.default.indexOf(codeChar);\n    if (pos === -1) {\n        throw \"Faulty gameId codechar \" + codeChar;\n    }\n    pos -= char2index(offsetChar);\n    var game = games[pos < 0 ? pos + base64chars_1.default.length : pos];\n    if (!game) {\n        throw \"Failed to get game!\";\n    }\n    return game;\n}\nexports.decodeGameId = decodeGameId;\nfunction encodeGameId(gameId, offsetChar) {\n    var code = base64chars_1.default[(game2num(gameId) + char2index(offsetChar)) % base64chars_1.default.length];\n    if (code.length !== exports.lengthOfEncodedGameId) {\n        throw \"Tried to encode \" + gameId + \" with offset {offsetChar}, but resulting code \\\"\" + code + \"\\\" was wrong length!\";\n    }\n    return code;\n}\nexports.encodeGameId = encodeGameId;\nexports.lengthOfEncodedGameId = 1;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/id/gameid.ts\n// module id = 66\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/id/gameid.ts?");

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/various/base64chars.ts\n// module id = 67\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/various/base64chars.ts?");

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayMap = __webpack_require__(21),\n    baseClone = __webpack_require__(90),\n    baseUnset = __webpack_require__(114),\n    castPath = __webpack_require__(12),\n    copyObject = __webpack_require__(8),\n    customOmitClone = __webpack_require__(129),\n    flatRest = __webpack_require__(132),\n    getAllKeysIn = __webpack_require__(49);\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/omit.js\n// module id = 68\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/omit.js?");

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction findBestTurnEndPaths(_a, brain) {\n    var game = _a.game, turn = _a.turn;\n    var func = game['brain_' + brain + '_' + turn.player], winners = [], highscore = -1000000;\n    if (turn.ends.win.length) {\n        winners = turn.ends.win.map(function (winId) { return turn.steps[winId].path.concat('win'); });\n    }\n    else {\n        for (var stepid in turn.next) {\n            var stepscore = func(turn.steps[stepid]);\n            if (stepscore > highscore) {\n                winners = [turn.steps[stepid].path.concat('endturn')];\n                highscore = stepscore;\n            }\n            else if (stepscore === highscore) {\n                winners.push(turn.steps[stepid].path.concat('endturn'));\n            }\n        }\n    }\n    return winners;\n}\nexports.default = findBestTurnEndPaths;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ai/findbestturnendpaths.ts\n// module id = 69\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/ai/findbestturnendpaths.ts?");

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar random = __webpack_require__(37);\nvar endstepsforturnbycmnd_1 = __webpack_require__(195);\n// TODO - randomize with seed!\nfunction getRandomTurnEndPath(_a) {\n    var turn = _a.turn;\n    var ends = endstepsforturnbycmnd_1.default(turn);\n    var fromName = ends.win.length ? 'win' : ends.endturn.length ? 'endturn' : ends.draw.length ? 'draw' : 'lose';\n    var targetStepId = ends[fromName][random(0, ends[fromName].length - 1)];\n    return turn.steps[targetStepId].path.concat(fromName);\n}\nexports.default = getRandomTurnEndPath;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/ai/getrandomturnendpath.ts\n// module id = 70\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/ai/getrandomturnendpath.ts?");

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar array_compress_1 = __webpack_require__(38);\nvar LZ = __webpack_require__(63);\nvar gameid_1 = __webpack_require__(66);\nvar battleid_1 = __webpack_require__(65);\n//import stringcompr from 'js-string-compression';\n//let hm = new stringcompr.Hauffman();\n//import cc from 'classical-cipher';\nfunction decodeString(str) {\n    //return str; \n    return LZ.decompressFromBase64(str);\n    //return hm.decompress(str);\n    //return cc.ciphers.hillCipher.decrypt(str,[ 2, 7, 15, 4 ]);\n}\n/*\nShould return {gameId, turnNumber, moveIndexes};\n*/\nfunction decodeSessionSave(garble) {\n    var garbledGameId = garble.substr(0, gameid_1.lengthOfEncodedGameId);\n    var battleId = garble.substr(gameid_1.lengthOfEncodedGameId, battleid_1.lengthOfEncodedBattleId);\n    var _a = array_compress_1.inflate(decodeString(garble.substr(gameid_1.lengthOfEncodedGameId + battleid_1.lengthOfEncodedBattleId))), turnNumber = _a[0], moveIndexes = _a.slice(1);\n    return {\n        gameId: gameid_1.decodeGameId(garbledGameId, garble.substr(gameid_1.lengthOfEncodedGameId, 1)),\n        battleId: battleId,\n        turnNumber: Math.abs(turnNumber),\n        moveIndexes: moveIndexes,\n        ended: turnNumber < 0\n    };\n}\nexports.default = decodeSessionSave;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/save/decodesessionsave.ts\n// module id = 71\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/save/decodesessionsave.ts?");

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\nUsed in API.startGameSession and API.makeSessionAction.\nReturns an object used to draw board in an app.\nPure.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar mapValues = __webpack_require__(182);\nvar values = __webpack_require__(189);\nvar isgameendcmnd_1 = __webpack_require__(35);\nvar gamesproxy_1 = __webpack_require__(17);\nfunction getSessionUI(session, step) {\n    var game = session.game, turn = session.turn, undo = session.undo, markTimeStamps = session.markTimeStamps;\n    var UI = {\n        activeMarks: values(step.MARKS).map(function (pos) { return ({ pos: pos, coords: gamesproxy_1.pos2coords(pos) }); }),\n        units: mapValues(step.UNITDATA, function (u) { return Object.assign({}, u, {\n            group: game.graphics.icons[u.group],\n            coords: gamesproxy_1.pos2coords(u.pos),\n            spawnCoords: u.from ? gamesproxy_1.pos2coords(u.from) : undefined\n        }); }),\n        players: session.players,\n        playing: turn.player,\n        board: game.board,\n        sessionId: session.id,\n        turnStart: session.step.stepid === 'root',\n        gameId: game.id,\n        turn: turn.turn,\n        save: session.saveString,\n        potentialMarks: [],\n        commands: [],\n        system: []\n    };\n    if (!session.endedBy) {\n        var links = Object.keys(turn.links[step.stepid]).reduce(function (mem, action) {\n            if (isgameendcmnd_1.default(action) || action == 'endturn' || action === 'next') {\n                mem.system.push(action);\n            }\n            else if (game.commands[action]) {\n                mem.commands.push(action);\n            }\n            else {\n                mem.potentialMarks.push({\n                    coords: gamesproxy_1.pos2coords(action),\n                    pos: action\n                });\n            }\n            return mem;\n        }, { potentialMarks: [], commands: [], system: undo.length ? ['undo ' + undo[undo.length - 1].actionName] : [] });\n        Object.assign(UI, links, {\n            instruction: game[step.name + turn.player + 'instruction'](step)\n        });\n    }\n    else {\n        UI.endedBy = session.endedBy;\n        UI.winner = session.winner;\n    }\n    return UI;\n}\nexports.default = getSessionUI;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/session/getsessionui.ts\n// module id = 72\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/session/getsessionui.ts?");

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\nUsed in API.makeSessionAction and API.inflateFromSave\nMutates the given session according to the given action and returns it.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar hydrateturn_1 = __webpack_require__(64);\nvar isgameendcmnd_1 = __webpack_require__(35);\nvar calcturnsave_1 = __webpack_require__(193);\nvar encodesessionsave_1 = __webpack_require__(194);\nfunction makeSessionAction(session, action) {\n    // removing an existing mark, going back in time\n    if (session.markTimeStamps[action] && !session.turn.links[session.step.stepid][action]) {\n        console.log(\"Going back to\", session.markTimeStamps[action]);\n        session.step = session.turn.steps[session.markTimeStamps[action]];\n        delete session.markTimeStamps[action]; // not really necessary\n    }\n    else if (action === 'undo' || action.substr(0, 5) === 'undo ') {\n        var undo = session.undo.pop();\n        session.step = session.turn.steps[undo.backTo];\n    }\n    else if (isgameendcmnd_1.default(action)) {\n        session.savedIndexes = session.savedIndexes.concat(calcturnsave_1.default(session.turn, session.step, action));\n        session.saveString = encodesessionsave_1.default({\n            gameId: session.gameId,\n            turnNumber: session.turn.turn,\n            battleId: session.battleId,\n            moveIndexes: session.savedIndexes,\n            ended: true\n        });\n        session.winner = (action === 'win' ? session.turn.player : action === 'lose' ? { 1: 2, 2: 1 }[session.turn.player] : 0);\n        session.endedBy = session.turn.links[session.step.stepid][action];\n    }\n    else if (action === 'endturn') {\n        session.savedIndexes = session.savedIndexes.concat(calcturnsave_1.default(session.turn, session.step, 'endturn'));\n        session.turn = hydrateturn_1.default(session.game, session.turn.next[session.step.stepid]);\n        session.saveString = encodesessionsave_1.default({\n            gameId: session.gameId,\n            turnNumber: session.turn.turn,\n            battleId: session.battleId,\n            moveIndexes: session.savedIndexes\n        });\n        session.step = session.turn.steps.root;\n        session.markTimeStamps = {};\n        session.undo = [];\n        // TODO also add to session history\n    }\n    else {\n        if (!session.game.commands[action]) {\n            session.markTimeStamps[action] = session.step.stepid;\n        }\n        else {\n            session.undo.push({\n                backTo: session.step.stepid,\n                actionName: action\n            });\n        }\n        session.step = session.turn.steps[session.step.stepid + '-' + action]; // TODO - or create, if not there!\n    }\n    return session;\n}\nexports.default = makeSessionAction;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/session/makesessionaction.ts\n// module id = 73\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/session/makesessionaction.ts?");

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\nUsed in API.startGameSession and API.inflateFromSave\nCreates a new session and returns it.\nPure.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar hydrateturn_1 = __webpack_require__(64);\nvar gamesproxy_1 = __webpack_require__(17);\nvar battleid_1 = __webpack_require__(65);\nvar nextSessionId = 1;\nfunction newSession(gameId, plr1, plr2, battleId) {\n    var game = gamesproxy_1.games[gameId];\n    var turn = game.newGame();\n    turn = hydrateturn_1.default(game, turn);\n    var session = {\n        gameId: gameId,\n        game: game,\n        turn: turn,\n        step: turn.steps.root,\n        savedIndexes: [],\n        markTimeStamps: {},\n        undo: [],\n        players: [plr1, plr2],\n        id: 's' + (nextSessionId++),\n        battleId: battleId || battleid_1.generateBattleId()\n    };\n    return session;\n}\nexports.default = newSession;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/session/newsession.ts\n// module id = 74\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/session/newsession.ts?");

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction optionsInUI(UI) {\n    return UI.commands.concat(UI.potentialMarks.map(function (m) { return m.pos; })).concat(UI.system.filter(function (c) { return c.substr(0, 4) !== 'undo'; })).sort();\n}\nexports.default = optionsInUI;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/various/optionsinui.ts\n// module id = 75\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/various/optionsinui.ts?");

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(3),\n    root = __webpack_require__(0);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_DataView.js\n// module id = 76\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_DataView.js?");

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

eval("var hashClear = __webpack_require__(137),\n    hashDelete = __webpack_require__(138),\n    hashGet = __webpack_require__(139),\n    hashHas = __webpack_require__(140),\n    hashSet = __webpack_require__(141);\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_Hash.js\n// module id = 77\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_Hash.js?");

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(3),\n    root = __webpack_require__(0);\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_Promise.js\n// module id = 78\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_Promise.js?");

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(3),\n    root = __webpack_require__(0);\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_Set.js\n// module id = 79\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_Set.js?");

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

eval("var MapCache = __webpack_require__(19),\n    setCacheAdd = __webpack_require__(166),\n    setCacheHas = __webpack_require__(167);\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_SetCache.js\n// module id = 80\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_SetCache.js?");

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(3),\n    root = __webpack_require__(0);\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_WeakMap.js\n// module id = 81\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_WeakMap.js?");

/***/ }),
/* 82 */
/***/ (function(module, exports) {

eval("/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\nmodule.exports = addMapEntry;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_addMapEntry.js\n// module id = 82\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_addMapEntry.js?");

/***/ }),
/* 83 */
/***/ (function(module, exports) {

eval("/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\nmodule.exports = addSetEntry;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_addSetEntry.js\n// module id = 83\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_addSetEntry.js?");

/***/ }),
/* 84 */
/***/ (function(module, exports) {

eval("/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_apply.js\n// module id = 84\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_apply.js?");

/***/ }),
/* 85 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_arrayEach.js\n// module id = 85\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_arrayEach.js?");

/***/ }),
/* 86 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_arrayFilter.js\n// module id = 86\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_arrayFilter.js?");

/***/ }),
/* 87 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_arraySome.js\n// module id = 87\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_arraySome.js?");

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

eval("var copyObject = __webpack_require__(8),\n    keys = __webpack_require__(7);\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseAssign.js\n// module id = 88\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseAssign.js?");

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

eval("var copyObject = __webpack_require__(8),\n    keysIn = __webpack_require__(61);\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseAssignIn.js\n// module id = 89\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseAssignIn.js?");

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Stack = __webpack_require__(20),\n    arrayEach = __webpack_require__(85),\n    assignValue = __webpack_require__(42),\n    baseAssign = __webpack_require__(88),\n    baseAssignIn = __webpack_require__(89),\n    cloneBuffer = __webpack_require__(117),\n    copyArray = __webpack_require__(124),\n    copySymbols = __webpack_require__(125),\n    copySymbolsIn = __webpack_require__(126),\n    getAllKeys = __webpack_require__(48),\n    getAllKeysIn = __webpack_require__(49),\n    getTag = __webpack_require__(51),\n    initCloneArray = __webpack_require__(142),\n    initCloneByTag = __webpack_require__(143),\n    initCloneObject = __webpack_require__(144),\n    isArray = __webpack_require__(1),\n    isBuffer = __webpack_require__(33),\n    isObject = __webpack_require__(2),\n    keys = __webpack_require__(7);\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseClone.js\n// module id = 90\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseClone.js?");

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(2);\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseCreate.js\n// module id = 91\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseCreate.js?");

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayPush = __webpack_require__(22),\n    isFlattenable = __webpack_require__(145);\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseFlatten.js\n// module id = 92\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseFlatten.js?");

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

eval("var createBaseFor = __webpack_require__(128);\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseFor.js\n// module id = 93\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseFor.js?");

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseFor = __webpack_require__(93),\n    keys = __webpack_require__(7);\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseForOwn.js\n// module id = 94\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseForOwn.js?");

/***/ }),
/* 95 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseHasIn.js\n// module id = 95\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseHasIn.js?");

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(5),\n    isObjectLike = __webpack_require__(6);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseIsArguments.js\n// module id = 96\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseIsArguments.js?");

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Stack = __webpack_require__(20),\n    equalArrays = __webpack_require__(46),\n    equalByTag = __webpack_require__(130),\n    equalObjects = __webpack_require__(131),\n    getTag = __webpack_require__(51),\n    isArray = __webpack_require__(1),\n    isBuffer = __webpack_require__(33),\n    isTypedArray = __webpack_require__(60);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseIsEqualDeep.js\n// module id = 97\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseIsEqualDeep.js?");

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Stack = __webpack_require__(20),\n    baseIsEqual = __webpack_require__(44);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseIsMatch.js\n// module id = 98\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseIsMatch.js?");

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isFunction = __webpack_require__(59),\n    isMasked = __webpack_require__(148),\n    isObject = __webpack_require__(2),\n    toSource = __webpack_require__(57);\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseIsNative.js\n// module id = 99\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseIsNative.js?");

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(5),\n    isLength = __webpack_require__(34),\n    isObjectLike = __webpack_require__(6);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseIsTypedArray.js\n// module id = 100\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseIsTypedArray.js?");

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseMatches = __webpack_require__(104),\n    baseMatchesProperty = __webpack_require__(105),\n    identity = __webpack_require__(58),\n    isArray = __webpack_require__(1),\n    property = __webpack_require__(184);\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseIteratee.js\n// module id = 101\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseIteratee.js?");

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isPrototype = __webpack_require__(30),\n    nativeKeys = __webpack_require__(160);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseKeys.js\n// module id = 102\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseKeys.js?");

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(2),\n    isPrototype = __webpack_require__(30),\n    nativeKeysIn = __webpack_require__(161);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseKeysIn.js\n// module id = 103\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseKeysIn.js?");

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsMatch = __webpack_require__(98),\n    getMatchData = __webpack_require__(133),\n    matchesStrictComparable = __webpack_require__(54);\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseMatches.js\n// module id = 104\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseMatches.js?");

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsEqual = __webpack_require__(44),\n    get = __webpack_require__(178),\n    hasIn = __webpack_require__(179),\n    isKey = __webpack_require__(29),\n    isStrictComparable = __webpack_require__(52),\n    matchesStrictComparable = __webpack_require__(54),\n    toKey = __webpack_require__(9);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseMatchesProperty.js\n// module id = 105\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseMatchesProperty.js?");

/***/ }),
/* 106 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseProperty.js\n// module id = 106\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseProperty.js?");

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGet = __webpack_require__(24);\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_basePropertyDeep.js\n// module id = 107\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_basePropertyDeep.js?");

/***/ }),
/* 108 */
/***/ (function(module, exports) {

eval("/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseRandom.js\n// module id = 108\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseRandom.js?");

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

eval("var constant = __webpack_require__(176),\n    defineProperty = __webpack_require__(45),\n    identity = __webpack_require__(58);\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseSetToString.js\n// module id = 109\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseSetToString.js?");

/***/ }),
/* 110 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseSlice.js\n// module id = 110\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseSlice.js?");

/***/ }),
/* 111 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseTimes.js\n// module id = 111\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseTimes.js?");

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(4),\n    arrayMap = __webpack_require__(21),\n    isArray = __webpack_require__(1),\n    isSymbol = __webpack_require__(16);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseToString.js\n// module id = 112\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseToString.js?");

/***/ }),
/* 113 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseUnary.js\n// module id = 113\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseUnary.js?");

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

eval("var castPath = __webpack_require__(12),\n    last = __webpack_require__(181),\n    parent = __webpack_require__(165),\n    toKey = __webpack_require__(9);\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nmodule.exports = baseUnset;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseUnset.js\n// module id = 114\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseUnset.js?");

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayMap = __webpack_require__(21);\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_baseValues.js\n// module id = 115\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_baseValues.js?");

/***/ }),
/* 116 */
/***/ (function(module, exports) {

eval("/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_cacheHas.js\n// module id = 116\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_cacheHas.js?");

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(0);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36)(module)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_cloneBuffer.js\n// module id = 117\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_cloneBuffer.js?");

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

eval("var cloneArrayBuffer = __webpack_require__(25);\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_cloneDataView.js\n// module id = 118\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_cloneDataView.js?");

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

eval("var addMapEntry = __webpack_require__(82),\n    arrayReduce = __webpack_require__(41),\n    mapToArray = __webpack_require__(53);\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1;\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\nmodule.exports = cloneMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_cloneMap.js\n// module id = 119\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_cloneMap.js?");

/***/ }),
/* 120 */
/***/ (function(module, exports) {

eval("/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_cloneRegExp.js\n// module id = 120\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_cloneRegExp.js?");

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

eval("var addSetEntry = __webpack_require__(83),\n    arrayReduce = __webpack_require__(41),\n    setToArray = __webpack_require__(56);\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1;\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\nmodule.exports = cloneSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_cloneSet.js\n// module id = 121\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_cloneSet.js?");

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(4);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_cloneSymbol.js\n// module id = 122\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_cloneSymbol.js?");

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

eval("var cloneArrayBuffer = __webpack_require__(25);\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_cloneTypedArray.js\n// module id = 123\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_cloneTypedArray.js?");

/***/ }),
/* 124 */
/***/ (function(module, exports) {

eval("/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_copyArray.js\n// module id = 124\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_copyArray.js?");

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

eval("var copyObject = __webpack_require__(8),\n    getSymbols = __webpack_require__(27);\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_copySymbols.js\n// module id = 125\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_copySymbols.js?");

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

eval("var copyObject = __webpack_require__(8),\n    getSymbolsIn = __webpack_require__(50);\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_copySymbolsIn.js\n// module id = 126\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_copySymbolsIn.js?");

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

eval("var root = __webpack_require__(0);\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_coreJsData.js\n// module id = 127\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_coreJsData.js?");

/***/ }),
/* 128 */
/***/ (function(module, exports) {

eval("/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_createBaseFor.js\n// module id = 128\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_createBaseFor.js?");

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isPlainObject = __webpack_require__(180);\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nmodule.exports = customOmitClone;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_customOmitClone.js\n// module id = 129\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_customOmitClone.js?");

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(4),\n    Uint8Array = __webpack_require__(39),\n    eq = __webpack_require__(15),\n    equalArrays = __webpack_require__(46),\n    mapToArray = __webpack_require__(53),\n    setToArray = __webpack_require__(56);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_equalByTag.js\n// module id = 130\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_equalByTag.js?");

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getAllKeys = __webpack_require__(48);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_equalObjects.js\n// module id = 131\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_equalObjects.js?");

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

eval("var flatten = __webpack_require__(177),\n    overRest = __webpack_require__(164),\n    setToString = __webpack_require__(168);\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nmodule.exports = flatRest;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_flatRest.js\n// module id = 132\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_flatRest.js?");

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isStrictComparable = __webpack_require__(52),\n    keys = __webpack_require__(7);\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getMatchData.js\n// module id = 133\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_getMatchData.js?");

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(4);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getRawTag.js\n// module id = 134\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_getRawTag.js?");

/***/ }),
/* 135 */
/***/ (function(module, exports) {

eval("/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_getValue.js\n// module id = 135\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_getValue.js?");

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

eval("var castPath = __webpack_require__(12),\n    isArguments = __webpack_require__(31),\n    isArray = __webpack_require__(1),\n    isIndex = __webpack_require__(28),\n    isLength = __webpack_require__(34),\n    toKey = __webpack_require__(9);\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nmodule.exports = hasPath;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_hasPath.js\n// module id = 136\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_hasPath.js?");

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

eval("var nativeCreate = __webpack_require__(14);\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_hashClear.js\n// module id = 137\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_hashClear.js?");

/***/ }),
/* 138 */
/***/ (function(module, exports) {

eval("/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_hashDelete.js\n// module id = 138\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_hashDelete.js?");

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

eval("var nativeCreate = __webpack_require__(14);\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_hashGet.js\n// module id = 139\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_hashGet.js?");

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

eval("var nativeCreate = __webpack_require__(14);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_hashHas.js\n// module id = 140\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_hashHas.js?");

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

eval("var nativeCreate = __webpack_require__(14);\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_hashSet.js\n// module id = 141\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_hashSet.js?");

/***/ }),
/* 142 */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_initCloneArray.js\n// module id = 142\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_initCloneArray.js?");

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

eval("var cloneArrayBuffer = __webpack_require__(25),\n    cloneDataView = __webpack_require__(118),\n    cloneMap = __webpack_require__(119),\n    cloneRegExp = __webpack_require__(120),\n    cloneSet = __webpack_require__(121),\n    cloneSymbol = __webpack_require__(122),\n    cloneTypedArray = __webpack_require__(123);\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_initCloneByTag.js\n// module id = 143\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_initCloneByTag.js?");

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseCreate = __webpack_require__(91),\n    getPrototype = __webpack_require__(26),\n    isPrototype = __webpack_require__(30);\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_initCloneObject.js\n// module id = 144\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_initCloneObject.js?");

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(4),\n    isArguments = __webpack_require__(31),\n    isArray = __webpack_require__(1);\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_isFlattenable.js\n// module id = 145\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_isFlattenable.js?");

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

eval("var eq = __webpack_require__(15),\n    isArrayLike = __webpack_require__(32),\n    isIndex = __webpack_require__(28),\n    isObject = __webpack_require__(2);\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_isIterateeCall.js\n// module id = 146\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_isIterateeCall.js?");

/***/ }),
/* 147 */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_isKeyable.js\n// module id = 147\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_isKeyable.js?");

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

eval("var coreJsData = __webpack_require__(127);\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_isMasked.js\n// module id = 148\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_isMasked.js?");

/***/ }),
/* 149 */
/***/ (function(module, exports) {

eval("/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_listCacheClear.js\n// module id = 149\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_listCacheClear.js?");

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assocIndexOf = __webpack_require__(11);\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_listCacheDelete.js\n// module id = 150\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_listCacheDelete.js?");

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assocIndexOf = __webpack_require__(11);\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_listCacheGet.js\n// module id = 151\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_listCacheGet.js?");

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assocIndexOf = __webpack_require__(11);\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_listCacheHas.js\n// module id = 152\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_listCacheHas.js?");

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assocIndexOf = __webpack_require__(11);\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_listCacheSet.js\n// module id = 153\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_listCacheSet.js?");

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Hash = __webpack_require__(77),\n    ListCache = __webpack_require__(10),\n    Map = __webpack_require__(18);\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_mapCacheClear.js\n// module id = 154\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_mapCacheClear.js?");

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getMapData = __webpack_require__(13);\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_mapCacheDelete.js\n// module id = 155\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_mapCacheDelete.js?");

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getMapData = __webpack_require__(13);\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_mapCacheGet.js\n// module id = 156\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_mapCacheGet.js?");

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getMapData = __webpack_require__(13);\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_mapCacheHas.js\n// module id = 157\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_mapCacheHas.js?");

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getMapData = __webpack_require__(13);\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_mapCacheSet.js\n// module id = 158\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_mapCacheSet.js?");

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

eval("var memoize = __webpack_require__(183);\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_memoizeCapped.js\n// module id = 159\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_memoizeCapped.js?");

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

eval("var overArg = __webpack_require__(55);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_nativeKeys.js\n// module id = 160\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_nativeKeys.js?");

/***/ }),
/* 161 */
/***/ (function(module, exports) {

eval("/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_nativeKeysIn.js\n// module id = 161\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_nativeKeysIn.js?");

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(47);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36)(module)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_nodeUtil.js\n// module id = 162\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_nodeUtil.js?");

/***/ }),
/* 163 */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_objectToString.js\n// module id = 163\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_objectToString.js?");

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = __webpack_require__(84);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_overRest.js\n// module id = 164\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_overRest.js?");

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGet = __webpack_require__(24),\n    baseSlice = __webpack_require__(110);\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nmodule.exports = parent;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_parent.js\n// module id = 165\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_parent.js?");

/***/ }),
/* 166 */
/***/ (function(module, exports) {

eval("/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_setCacheAdd.js\n// module id = 166\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_setCacheAdd.js?");

/***/ }),
/* 167 */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_setCacheHas.js\n// module id = 167\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_setCacheHas.js?");

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseSetToString = __webpack_require__(109),\n    shortOut = __webpack_require__(169);\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_setToString.js\n// module id = 168\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_setToString.js?");

/***/ }),
/* 169 */
/***/ (function(module, exports) {

eval("/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_shortOut.js\n// module id = 169\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_shortOut.js?");

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

eval("var ListCache = __webpack_require__(10);\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_stackClear.js\n// module id = 170\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_stackClear.js?");

/***/ }),
/* 171 */
/***/ (function(module, exports) {

eval("/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_stackDelete.js\n// module id = 171\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_stackDelete.js?");

/***/ }),
/* 172 */
/***/ (function(module, exports) {

eval("/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_stackGet.js\n// module id = 172\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_stackGet.js?");

/***/ }),
/* 173 */
/***/ (function(module, exports) {

eval("/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_stackHas.js\n// module id = 173\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_stackHas.js?");

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

eval("var ListCache = __webpack_require__(10),\n    Map = __webpack_require__(18),\n    MapCache = __webpack_require__(19);\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_stackSet.js\n// module id = 174\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_stackSet.js?");

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

eval("var memoizeCapped = __webpack_require__(159);\n\n/** Used to match property names within property paths. */\nvar reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/_stringToPath.js\n// module id = 175\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/_stringToPath.js?");

/***/ }),
/* 176 */
/***/ (function(module, exports) {

eval("/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/constant.js\n// module id = 176\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/constant.js?");

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseFlatten = __webpack_require__(92);\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nmodule.exports = flatten;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/flatten.js\n// module id = 177\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/flatten.js?");

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGet = __webpack_require__(24);\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/get.js\n// module id = 178\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/get.js?");

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseHasIn = __webpack_require__(95),\n    hasPath = __webpack_require__(136);\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/hasIn.js\n// module id = 179\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/hasIn.js?");

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(5),\n    getPrototype = __webpack_require__(26),\n    isObjectLike = __webpack_require__(6);\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nmodule.exports = isPlainObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/isPlainObject.js\n// module id = 180\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/isPlainObject.js?");

/***/ }),
/* 181 */
/***/ (function(module, exports) {

eval("/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nmodule.exports = last;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/last.js\n// module id = 181\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/last.js?");

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseAssignValue = __webpack_require__(23),\n    baseForOwn = __webpack_require__(94),\n    baseIteratee = __webpack_require__(101);\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nmodule.exports = mapValues;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/mapValues.js\n// module id = 182\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/mapValues.js?");

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

eval("var MapCache = __webpack_require__(19);\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/memoize.js\n// module id = 183\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/memoize.js?");

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseProperty = __webpack_require__(106),\n    basePropertyDeep = __webpack_require__(107),\n    isKey = __webpack_require__(29),\n    toKey = __webpack_require__(9);\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/property.js\n// module id = 184\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/property.js?");

/***/ }),
/* 185 */
/***/ (function(module, exports) {

eval("/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/stubFalse.js\n// module id = 185\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/stubFalse.js?");

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

eval("var toNumber = __webpack_require__(187);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/toFinite.js\n// module id = 186\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/toFinite.js?");

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(2),\n    isSymbol = __webpack_require__(16);\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/toNumber.js\n// module id = 187\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/toNumber.js?");

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseToString = __webpack_require__(112);\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/toString.js\n// module id = 188\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/toString.js?");

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseValues = __webpack_require__(115),\n    keys = __webpack_require__(7);\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/values.js\n// module id = 189\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/lodash/values.js?");

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\nUsed in .hydrateTurn, and will recursively call itself\nMutates the given turn with links for the given step\nWill create linked steps if they didn't exist and hydrate those,\nbut only keep them around if they lead to turn end.\nReturns whether or not the given step can lead to turn end\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar trytoreachturnend_1 = __webpack_require__(191);\nvar isgameendcmnd_1 = __webpack_require__(35);\nfunction hydrateStep(game, turn, step) {\n    var steps = turn.steps;\n    var stepid = step.stepid;\n    var links = turn.links;\n    var steplinks = links[stepid];\n    var checkActions = Object.keys(steplinks);\n    var canend = false;\n    while (checkActions.length) {\n        var action = checkActions.pop();\n        var func = steplinks[action];\n        if (isgameendcmnd_1.default(action)) {\n            turn.ends[action].push(stepid);\n            canend = true;\n        }\n        else if (action === 'endturn') {\n            var newturn = trytoreachturnend_1.default(game, game[func](turn, step));\n            if (newturn.canend) {\n                turn.next[stepid] = newturn;\n            }\n            else {\n                steplinks.win = newturn.blockedby || 'starvation'; // TODO - gamespec logic?\n                turn.ends.win.push(stepid);\n                delete steplinks.endturn;\n            }\n            canend = true;\n        }\n        else {\n            var nextstepid = stepid + '-' + action;\n            var nextstep = steps[nextstepid] || (steps[nextstepid] = game[func](turn, step, action));\n            if (hydrateStep(game, turn, nextstep)) {\n                canend = true;\n            }\n            else {\n                delete steplinks[action]; // TODO - only this is actually needed\n                delete steps[nextstepid];\n                delete links[nextstepid];\n            }\n        }\n    }\n    return canend;\n}\nexports.default = hydrateStep;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/hydration/hydratestep.ts\n// module id = 190\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/hydration/hydratestep.ts?");

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\nUsed in .hydrateStep for links leading to a new turn, to see if that turn is a dead end\nMutates the given turn with .canend boolean, and returns same boolean\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isturnendcmnd_1 = __webpack_require__(196);\nfunction tryToReachTurnEnd(game, turn) {\n    var steps = turn.steps, links = turn.links;\n    var checkSteps = [steps.root];\n    var canalwaysend = game.canalwaysend || {};\n    while (!turn.canend && checkSteps.length) {\n        var step = checkSteps.pop();\n        var stepid = step.stepid;\n        var steplinks = links[stepid];\n        var checkActions = Object.keys(steplinks);\n        while (!turn.canend && checkActions.length) {\n            var action = checkActions.pop();\n            var func = steplinks[action];\n            if (isturnendcmnd_1.default(action) || canalwaysend[func]) {\n                turn.canend = true;\n            }\n            else {\n                var nextstepid = stepid + '-' + action;\n                checkSteps.push(steps[nextstepid] || (steps[nextstepid] = game[func](turn, step, action)));\n            }\n        }\n    }\n    return turn;\n}\nexports.default = tryToReachTurnEnd;\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/hydration/trytoreachturnend.ts\n// module id = 191\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/hydration/trytoreachturnend.ts?");

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\nThe public methods of the Algol system.\nMeant to be consumed by an app.\n*/\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gamesproxy_1 = __webpack_require__(17);\nvar omit = __webpack_require__(68);\nvar random = __webpack_require__(37);\nvar decodesessionsave_1 = __webpack_require__(71);\nvar optionsinui_1 = __webpack_require__(75);\nvar newsession_1 = __webpack_require__(74);\nvar getsessionui_1 = __webpack_require__(72);\nvar makesessionaction_1 = __webpack_require__(73);\nvar findbestturnendpaths_1 = __webpack_require__(69);\nvar getrandomturnendpath_1 = __webpack_require__(70);\nvar sessions = {};\n// TODO - rename startGame to startBattle\nvar api = {\n    /*\n    Start a new session for a given game with the given players\n    BattleId is optional, otherwise one will be randomised\n    */\n    startGame: function (gameId, plr1, plr2, battleid) {\n        var session = newsession_1.default(gameId, plr1, plr2, battleid);\n        sessions[session.id] = session;\n        return getsessionui_1.default(session, session.step);\n    },\n    /*\n    Make a mark, do a command, etc. Perform an action in a session!\n    */\n    performAction: function (sessionId, action) {\n        var session = sessions[sessionId];\n        //console.log('Gonna do',action,'in session',sessionId,'which has state',session);\n        session = makesessionaction_1.default(session, action);\n        return getsessionui_1.default(session, session.step);\n    },\n    /*\n    Returns array of best moves for finishing current turn according to named brain.\n    TODO - randomize all using battleId as a seed\n    */\n    findBestOption: function (sessionId, brain) {\n        switch (brain) {\n            case \"Randy\": return getrandomturnendpath_1.default(sessions[sessionId]);\n            default:\n                var paths = findbestturnendpaths_1.default(sessions[sessionId], brain);\n                return paths[random(0, paths.length - 1)];\n        }\n    },\n    /*\n    Take a wild guess! :D\n    */\n    debug: function (sessionId) {\n        var session = sessions[sessionId];\n        return __assign({}, omit(session, ['game']), session.game.debug());\n    },\n    /*\n    Yeeeah\n    */\n    inflateFromSave: function (saveString) {\n        var _a = decodesessionsave_1.default(saveString), gameId = _a.gameId, battleId = _a.battleId, turnNumber = _a.turnNumber, moveIndexes = _a.moveIndexes, ended = _a.ended;\n        var UI = api.startGame(gameId, 'plr1', 'plr2', battleId);\n        while (UI.turn < turnNumber || UI.turn == turnNumber && ended && !UI.endedBy) {\n            var action = void 0, available = optionsinui_1.default(UI);\n            if (available.length === 1) {\n                action = available[0];\n            }\n            else if (available.length > 1) {\n                if (!moveIndexes.length) {\n                    throw \"Many available but no save index left!\";\n                }\n                action = available[moveIndexes.shift()];\n            }\n            else {\n                throw \"No available actions!\";\n            }\n            UI = api.performAction(UI.sessionId, action);\n        }\n        if (moveIndexes.length) {\n            console.log(moveIndexes);\n            throw \"Oh noes, we had indexes still to go :(\";\n        }\n        return UI;\n    },\n    /*\n    Wooh! :D\n    */\n    gameLibrary: function () {\n        return gamesproxy_1.meta;\n    }\n};\nexports.default = api;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.ts\n// module id = 192\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction calcTurnSave(turn, step, finishCmnd) {\n    var id = 'root';\n    var remaining = step.path.concat(finishCmnd);\n    var save = [];\n    while (remaining.length) {\n        var cmnd = remaining.shift();\n        var available = Object.keys(turn.links[id]).sort();\n        if (available.length > 1) {\n            var index = available.indexOf(cmnd);\n            if (index === -1) {\n                throw \"Didnt find action!\";\n            }\n            save.push(index);\n        }\n        id += '-' + cmnd;\n    }\n    return save;\n}\nexports.default = calcTurnSave;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/save/calcturnsave.ts\n// module id = 193\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/save/calcturnsave.ts?");

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar array_compress_1 = __webpack_require__(38);\nvar gameid_1 = __webpack_require__(66);\nvar LZ = __webpack_require__(63);\n//import cc from 'classical-cipher';\n//import stringcompr from 'js-string-compression';\n//let hm = new stringcompr.Hauffman();\nfunction compressString(str) {\n    //return str;\n    return LZ.compressToBase64(str);\n    // return hm.compress(str);\n    //return cc.ciphers.hillCipher.encrypt(str, [ 2, 7, 15, 4 ]);\n}\n/*\nShould return an encoded sessionSave\n*/\nfunction encodeSessionSave(_a) {\n    var gameId = _a.gameId, turnNumber = _a.turnNumber, moveIndexes = _a.moveIndexes, battleId = _a.battleId, ended = _a.ended;\n    return gameid_1.encodeGameId(gameId, battleId[0]) + battleId + compressString(array_compress_1.compress([turnNumber * (ended ? -1 : 1)].concat(moveIndexes)));\n}\nexports.default = encodeSessionSave;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/save/encodesessionsave.ts\n// module id = 194\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/save/encodesessionsave.ts?");

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\nReturns an object with the 4 turn-ending actions, and an array of steps for each.s\n*/\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction endStepsForTurnByCmnd(turn) {\n    return ['win', 'lose', 'draw'].reduce(function (mem, cmnd) {\n        return (__assign({}, mem, (_a = {}, _a[cmnd] = turn.ends[cmnd], _a)));\n        var _a;\n    }, {\n        endturn: Object.keys(turn.next), win: [], lose: [], draw: []\n    });\n}\nexports.default = endStepsForTurnByCmnd;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/various/endstepsforturnbycmnd.ts\n// module id = 195\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/various/endstepsforturnbycmnd.ts?");

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isTurnEndCommand(cmnd) {\n    return !!{\n        endturn: 1,\n        win: 1,\n        lose: 1,\n        draw: 1\n    }[cmnd];\n}\nexports.default = isTurnEndCommand;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/various/isturnendcmnd.ts\n// module id = 196\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/various/isturnendcmnd.ts?");

/***/ }),
/* 197 */
/***/ (function(module, exports) {

eval("function isArray(arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n}\nvar colname2number = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVXYZ\".split(\"\").reduce(function (mem, char, n) {\n    mem[char] = n + 1;\n    return mem;\n}, {});\nvar colnumber2name = Object.keys(colname2number).reduce(function (mem, key) {\n    mem[colname2number[key]] = key;\n    return mem;\n}, {});\nfunction pos2coords(pos) {\n    return {\n        x: colname2number[pos[0]],\n        y: parseInt(pos.substr(1))\n    };\n}\nfunction coords2pos(coords) {\n    return colnumber2name[coords.x] + coords.y;\n}\nfunction boardPositions(board) {\n    var ret = [];\n    for (var y = 1; y <= board.height; y++) {\n        for (var x = 1; x <= board.width; x++) {\n            ret.push(coords2pos({ x: x, y: y }));\n        }\n    }\n    return ret.sort();\n}\nfunction offsetPos(pos, dir, forward, right, board) {\n    var forwardmods = [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1]]; // x,y\n    var rightmods = [[1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1]];\n    var n = dir - 1;\n    var coords = pos2coords(pos);\n    var newx = coords.x + forwardmods[n][0] * forward + rightmods[n][0] * right;\n    var newy = coords.y + forwardmods[n][1] * forward + rightmods[n][1] * right;\n    var withinbounds = newx > 0 && newx <= board.width && newy > 0 && newy <= board.height;\n    return withinbounds && coords2pos({ x: newx, y: newy });\n}\nfunction posConnections(pos, board) {\n    return [1, 2, 3, 4, 5, 6, 7, 8].reduce(function (mem, dir) {\n        var newpos = offsetPos(pos, dir, 1, 0, board);\n        if (newpos) {\n            mem[dir] = newpos;\n        }\n        // TODO - handle offsets better in here! :)\n        return (board.offsets || []).reduce(function (innermem, _a) {\n            var forward = _a[0], right = _a[1];\n            var newpos = offsetPos(pos, dir, forward, right, board);\n            if (newpos) {\n                innermem['o' + dir + '_' + forward + '_' + right] = newpos;\n            }\n            return innermem;\n        }, mem);\n    }, {});\n}\n/*\nCalculates the connections object\n*/\nfunction boardConnections(board) {\n    return boardPositions(board).reduce(function (mem, pos) {\n        mem[pos] = posConnections(pos, board);\n        return mem;\n    }, { faux: {} });\n}\n/*\nCalculates the three BOARD layers (board,light,dark) and returns them.\n*/\nfunction boardLayers(board) {\n    return boardPositions(board).reduce(function (mem, pos) {\n        var coords = pos2coords(pos);\n        var colour = [\"dark\", \"light\"][(coords.x + (coords.y % 2)) % 2];\n        mem.board[pos] = mem[colour][pos] = { colour: colour, x: coords.x, y: coords.y, pos: pos };\n        return mem;\n    }, { board: {}, light: {}, dark: {} });\n}\nfunction convertToEntities(def) {\n    switch (def[0]) {\n        case \"pos\":// [\"pos\",list,blueprint]\n            return def[1].map(function (pos) { return Object.assign({ pos: pos }, def[2]); });\n        case \"rect\": // [\"rect\",bottomleft,topright,blueprint]\n        case \"holerect\":// [\"holerect\",bottomleft,topright,holes,blueprint]\n            var bottomleft = pos2coords(def[1]);\n            var topright = pos2coords(def[2]);\n            var blueprint = def[3];\n            var positions = [];\n            for (var x = bottomleft.x; x <= topright.x; x++) {\n                for (var y = bottomleft.y; y <= topright.y; y++) {\n                    positions.push(coords2pos({ x: x, y: y }));\n                }\n            }\n            if (def[0] === \"holerect\") {\n                blueprint = def[4];\n                positions = positions.filter(function (p) { return def[3].indexOf(p) === -1; });\n            }\n            return positions.map(function (p) { return Object.assign({ pos: p }, blueprint); });\n        default:\n            if (typeof def === 'string') {\n                return [{ pos: def }];\n            }\n            else if (typeof def === 'object') {\n                return [def];\n            }\n            else {\n                throw \"Unknown entity def: \" + def;\n            }\n    }\n}\n/*\nthe initial unit data blob\n*/\nfunction deduceInitialUnitData(setup) {\n    var id = 1;\n    return Object.keys(setup).reduce(function (mem, group) {\n        var defsbyplr = setup[group];\n        return Object.keys(defsbyplr).reduce(function (mem, plr) {\n            var entitydefs = defsbyplr[plr];\n            return entitydefs.reduce(function (mem, entitydef) {\n                convertToEntities(entitydef).forEach(function (e) {\n                    var newid = 'unit' + (id++);\n                    mem[newid] = Object.assign(e, {\n                        id: newid,\n                        group: group,\n                        owner: parseInt(plr)\n                    });\n                });\n                return mem;\n            }, mem);\n        }, mem);\n    }, {});\n}\n/*\nCalculates all terrain layers and returns them.\nThis should be done per player if any terrain has owner.\n*/\nfunction terrainLayers(board, forplayer, aiterrain) {\n    var terrainDef = Object.assign({}, board.terrain || {}, aiterrain || {});\n    if (!Object.keys(terrainDef).length) {\n        return {};\n    }\n    var terrain = Object.keys(terrainDef).reduce(function (mem, name) {\n        var def = terrainDef[name];\n        mem[name] = {};\n        if (isArray(def)) {\n            def.forEach(function (entityDef) {\n                convertToEntities(entityDef).forEach(function (e) {\n                    mem[name][e.pos] = e;\n                });\n            });\n        }\n        else {\n            for (var owner in def) {\n                owner = parseInt(owner);\n                def[owner].forEach(function (entityDef) {\n                    convertToEntities(entityDef).forEach(function (e) {\n                        e.owner = owner;\n                        mem[name][e.pos] = e;\n                        var prefix = owner === 0 ? 'neutral' : owner === forplayer ? 'my' : 'opp';\n                        mem[prefix + name] = mem[prefix + name] || {};\n                        mem[prefix + name][e.pos] = e;\n                    });\n                });\n            }\n        }\n        return mem;\n    }, {});\n    // add no-variants of layers and return\n    return Object.keys(terrain).reduce(function (mem, name) {\n        var t = terrain[name];\n        var noname = 'no' + name;\n        mem[noname] = {};\n        boardPositions(board).forEach(function (pos) {\n            if (!t[pos]) {\n                mem[noname][pos] = { pos: pos };\n            }\n        });\n        return mem;\n    }, terrain);\n}\nmodule.exports = {\n    _test: (function () {\n        var game = {};\n        game.commands = {};\n        game.graphics = {\n            \"icons\": {\n                \"stepsfirsts\": \"queens\",\n                \"blocksfirsts\": \"queens\",\n                \"defaultfirsts\": \"queens\",\n                \"noblocks\": \"queens\",\n                \"pawns\": \"pawns\"\n            },\n            \"tiles\": {\n                \"steps\": \"grass\"\n            }\n        };\n        game.board = {\n            \"height\": 10,\n            \"width\": 10,\n            \"terrain\": {\n                \"steps\": [\n                    [\"rect\", \"a1\", \"d4\"]\n                ]\n            }\n        };\n        game.AI = [];\n        game.id = \"_test\";\n        var boardDef = {\n            \"height\": 10,\n            \"width\": 10,\n            \"terrain\": {\n                \"steps\": [\n                    [\"rect\", \"a1\", \"d4\"]\n                ]\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"stepsfirsts\": {\n                        \"1\": [\"a3\"]\n                    },\n                    \"blocksfirsts\": {\n                        \"1\": [\"b3\"]\n                    },\n                    \"defaultfirsts\": {\n                        \"1\": [\"c3\"]\n                    },\n                    \"noblocks\": {\n                        \"1\": [\"d3\"]\n                    },\n                    \"pawns\": {\n                        \"2\": [\"a1\", \"a5\", \"b1\", \"b5\", \"c1\", \"c5\", \"d1\", \"d5\"]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    marks: Object.assign({}, step.ARTIFACTS.marks),\n                    blocks: Object.assign({}, step.ARTIFACTS.blocks)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var allowedsteps = TERRAIN.steps;\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = (function () {\n                    var ret = {}, s0 = UNITLAYERS.mystepsfirsts, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectunit']] = 1;\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 5];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 2; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS] && !BLOCKS[POS]) {\n                            ARTIFACTS['marks'][POS] = {};\n                        }\n                        if (BLOCKS[POS] && allowedsteps[POS]) {\n                            ARTIFACTS['blocks'][POS] = {};\n                        }\n                    }\n                }\n                var allowedsteps = TERRAIN.steps;\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = (function () {\n                    var ret = {}, s0 = UNITLAYERS.myblocksfirsts, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectunit']] = 1;\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 5];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 2; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS] && allowedsteps[POS]) {\n                            ARTIFACTS['marks'][POS] = {};\n                        }\n                        if (BLOCKS[POS]) {\n                            ARTIFACTS['blocks'][POS] = {};\n                        }\n                    }\n                }\n                var allowedsteps = TERRAIN.steps;\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = (function () {\n                    var ret = {}, s0 = UNITLAYERS.mydefaultfirsts, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectunit']] = 1;\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 5];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 2; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS] && !BLOCKS[POS]) {\n                            ARTIFACTS['marks'][POS] = {};\n                        }\n                        if (BLOCKS[POS] && allowedsteps[POS]) {\n                            ARTIFACTS['blocks'][POS] = {};\n                        }\n                    }\n                }\n                var allowedsteps = TERRAIN.steps;\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = (function () {\n                    var ret = {}, s0 = UNITLAYERS.mynoblocks, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectunit']] = 1;\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 5];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 2; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS] && !BLOCKS[POS]) {\n                            ARTIFACTS['marks'][POS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in (function () {\n                    var k, ret = {}, s0 = ARTIFACTS.marks, s1 = ARTIFACTS.blocks;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }())) {\n                    newlinks[linkpos] = 'selectmark1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmark1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmark: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmark'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.selectmark1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"marks\": {},\n                    \"blocks\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"stepsfirsts\": {},\n                    \"mystepsfirsts\": {},\n                    \"oppstepsfirsts\": {},\n                    \"neutralstepsfirsts\": {},\n                    \"blocksfirsts\": {},\n                    \"myblocksfirsts\": {},\n                    \"oppblocksfirsts\": {},\n                    \"neutralblocksfirsts\": {},\n                    \"defaultfirsts\": {},\n                    \"mydefaultfirsts\": {},\n                    \"oppdefaultfirsts\": {},\n                    \"neutraldefaultfirsts\": {},\n                    \"noblocks\": {},\n                    \"mynoblocks\": {},\n                    \"oppnoblocks\": {},\n                    \"neutralnoblocks\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    marks: Object.assign({}, step.ARTIFACTS.marks),\n                    blocks: Object.assign({}, step.ARTIFACTS.blocks)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var allowedsteps = TERRAIN.steps;\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = (function () {\n                    var ret = {}, s0 = UNITLAYERS.mystepsfirsts, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectunit']] = 1;\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 5];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 2; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS] && !BLOCKS[POS]) {\n                            ARTIFACTS['marks'][POS] = {};\n                        }\n                        if (BLOCKS[POS] && allowedsteps[POS]) {\n                            ARTIFACTS['blocks'][POS] = {};\n                        }\n                    }\n                }\n                var allowedsteps = TERRAIN.steps;\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = (function () {\n                    var ret = {}, s0 = UNITLAYERS.myblocksfirsts, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectunit']] = 1;\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 5];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 2; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS] && allowedsteps[POS]) {\n                            ARTIFACTS['marks'][POS] = {};\n                        }\n                        if (BLOCKS[POS]) {\n                            ARTIFACTS['blocks'][POS] = {};\n                        }\n                    }\n                }\n                var allowedsteps = TERRAIN.steps;\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = (function () {\n                    var ret = {}, s0 = UNITLAYERS.mydefaultfirsts, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectunit']] = 1;\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 5];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 2; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS] && !BLOCKS[POS]) {\n                            ARTIFACTS['marks'][POS] = {};\n                        }\n                        if (BLOCKS[POS] && allowedsteps[POS]) {\n                            ARTIFACTS['blocks'][POS] = {};\n                        }\n                    }\n                }\n                var allowedsteps = TERRAIN.steps;\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = (function () {\n                    var ret = {}, s0 = UNITLAYERS.mynoblocks, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectunit']] = 1;\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 5];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 2; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS] && !BLOCKS[POS]) {\n                            ARTIFACTS['marks'][POS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in (function () {\n                    var k, ret = {}, s0 = ARTIFACTS.marks, s1 = ARTIFACTS.blocks;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }())) {\n                    newlinks[linkpos] = 'selectmark2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmark2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmark: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmark'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.selectmark2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"marks\": {},\n                    \"blocks\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"stepsfirsts\": {},\n                    \"mystepsfirsts\": {},\n                    \"oppstepsfirsts\": {},\n                    \"neutralstepsfirsts\": {},\n                    \"blocksfirsts\": {},\n                    \"myblocksfirsts\": {},\n                    \"oppblocksfirsts\": {},\n                    \"neutralblocksfirsts\": {},\n                    \"defaultfirsts\": {},\n                    \"mydefaultfirsts\": {},\n                    \"oppdefaultfirsts\": {},\n                    \"neutraldefaultfirsts\": {},\n                    \"noblocks\": {},\n                    \"mynoblocks\": {},\n                    \"oppnoblocks\": {},\n                    \"neutralnoblocks\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), amazon: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1,\n            \"fire\": 1\n        };\n        game.graphics = {\n            \"icons\": {\n                \"queens\": \"queens\",\n                \"fires\": \"pawns\"\n            }\n        };\n        game.board = {\n            \"height\": 10,\n            \"width\": 10\n        };\n        game.AI = [\"Steve\"];\n        game.id = \"amazon\";\n        var boardDef = {\n            \"height\": 10,\n            \"width\": 10\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        var TERRAIN = terrainLayers(boardDef, 0);\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"queens\": {\n                        \"1\": [\"d10\", \"g10\", \"a7\", \"j7\"],\n                        \"2\": [\"a4\", \"d1\", \"g1\", \"j4\"]\n                    }\n                }),\n                TURNVARS: {},\n                clones: 0\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.brain_Steve_1 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.myroads = {};\n                ARTIFACTS.opproads = {};\n                ARTIFACTS.myreach = {};\n                ARTIFACTS.oppreach = {};\n                for (var STARTPOS in UNITLAYERS.queens) {\n                    var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    var foundneighbours = [];\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS && !UNITLAYERS.units[POS]) {\n                            foundneighbours.push(POS);\n                        }\n                    }\n                    var NEIGHBOURCOUNT = foundneighbours.length;\n                    ARTIFACTS[(!!(UNITLAYERS.myunits[STARTPOS]) ? 'myroads' : 'opproads')][STARTPOS] = {\n                        count: NEIGHBOURCOUNT\n                    };\n                }\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = UNITLAYERS.queens;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.myunits[STARTPOS]) ? 'myreach' : 'oppreach')][POS] = {};\n                        }\n                    }\n                }\n                return reduce(ARTIFACTS.myroads, function (mem, obj) {\n                    return mem + obj['count'];\n                }, 0) + Object.keys(ARTIFACTS.myreach).length - reduce(ARTIFACTS.opproads, function (mem, obj) {\n                    return mem + obj['count'];\n                }, 0) - Object.keys(ARTIFACTS.oppreach).length;\n            };\n            game.brain_Steve_1_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.myroads = {};\n                ARTIFACTS.opproads = {};\n                ARTIFACTS.myreach = {};\n                ARTIFACTS.oppreach = {};\n                for (var STARTPOS in UNITLAYERS.queens) {\n                    var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    var foundneighbours = [];\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS && !UNITLAYERS.units[POS]) {\n                            foundneighbours.push(POS);\n                        }\n                    }\n                    var NEIGHBOURCOUNT = foundneighbours.length;\n                    ARTIFACTS[(!!(UNITLAYERS.myunits[STARTPOS]) ? 'myroads' : 'opproads')][STARTPOS] = {\n                        count: NEIGHBOURCOUNT\n                    };\n                }\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = UNITLAYERS.queens;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.myunits[STARTPOS]) ? 'myreach' : 'oppreach')][POS] = {};\n                        }\n                    }\n                }\n                return {\n                    myroads: reduce(ARTIFACTS.myroads, function (mem, obj) {\n                        return mem + obj['count'];\n                    }, 0),\n                    mydomain: Object.keys(ARTIFACTS.myreach).length,\n                    opproads: -reduce(ARTIFACTS.opproads, function (mem, obj) {\n                        return mem + obj['count'];\n                    }, 0),\n                    oppdomain: -Object.keys(ARTIFACTS.oppreach).length\n                };\n            };\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    targets: Object.assign({}, step.ARTIFACTS.targets)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = MARKS['selectunit'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                        ARTIFACTS['targets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.targets) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return 'Select where to move the amazon';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return 'Choose Move to go here!';\n            };\n            game.selectfiretarget1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectfiretarget: markpos\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectfiretarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].fire = 'fire1';\n                return newstep;\n            };\n            game.selectfiretarget1instruction = function (step) {\n                return 'Choose Fire to shoot here!';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = {\n                    targets: Object.assign({}, step.ARTIFACTS.targets)\n                };\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var TURNVARS = Object.assign({}, step.TURNVARS);\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                TURNVARS['movedto'] = MARKS['selectmovetarget'];\n                MARKS = {};\n                UNITLAYERS = {\n                    \"queens\": {},\n                    \"myqueens\": {},\n                    \"oppqueens\": {},\n                    \"neutralqueens\": {},\n                    \"fires\": {},\n                    \"myfires\": {},\n                    \"oppfires\": {},\n                    \"neutralfires\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"targets\": {}\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = TURNVARS['movedto'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                        ARTIFACTS['targets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move'),\n                    TURNVARS: TURNVARS\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.targets) {\n                    newlinks[linkpos] = 'selectfiretarget1';\n                }\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return 'Now select where to fire at';\n            };\n            game.fire1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                var TURNVARS = Object.assign({}, step.TURNVARS);\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectfiretarget'],\n                    id: newunitid,\n                    group: 'fires',\n                    owner: 0,\n                    from: TURNVARS['movedto']\n                };\n                MARKS = {};\n                UNITLAYERS = {\n                    \"queens\": {},\n                    \"myqueens\": {},\n                    \"oppqueens\": {},\n                    \"neutralqueens\": {},\n                    \"fires\": {},\n                    \"myfires\": {},\n                    \"oppfires\": {},\n                    \"neutralfires\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"targets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'fire';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'fire',\n                    path: step.path.concat('fire'),\n                    clones: clones,\n                    TURNVARS: TURNVARS\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.fire1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"targets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var TURNVARS = {};\n                var UNITLAYERS = {\n                    \"queens\": {},\n                    \"myqueens\": {},\n                    \"oppqueens\": {},\n                    \"neutralqueens\": {},\n                    \"fires\": {},\n                    \"myfires\": {},\n                    \"oppfires\": {},\n                    \"neutralfires\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: [],\n                    TURNVARS: TURNVARS\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return 'Select an amazon to move and fire with';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.brain_Steve_2 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.myroads = {};\n                ARTIFACTS.opproads = {};\n                ARTIFACTS.myreach = {};\n                ARTIFACTS.oppreach = {};\n                for (var STARTPOS in UNITLAYERS.queens) {\n                    var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    var foundneighbours = [];\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS && !UNITLAYERS.units[POS]) {\n                            foundneighbours.push(POS);\n                        }\n                    }\n                    var NEIGHBOURCOUNT = foundneighbours.length;\n                    ARTIFACTS[(!!(UNITLAYERS.myunits[STARTPOS]) ? 'myroads' : 'opproads')][STARTPOS] = {\n                        count: NEIGHBOURCOUNT\n                    };\n                }\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = UNITLAYERS.queens;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.myunits[STARTPOS]) ? 'myreach' : 'oppreach')][POS] = {};\n                        }\n                    }\n                }\n                return reduce(ARTIFACTS.myroads, function (mem, obj) {\n                    return mem + obj['count'];\n                }, 0) + Object.keys(ARTIFACTS.myreach).length - reduce(ARTIFACTS.opproads, function (mem, obj) {\n                    return mem + obj['count'];\n                }, 0) - Object.keys(ARTIFACTS.oppreach).length;\n            };\n            game.brain_Steve_2_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.myroads = {};\n                ARTIFACTS.opproads = {};\n                ARTIFACTS.myreach = {};\n                ARTIFACTS.oppreach = {};\n                for (var STARTPOS in UNITLAYERS.queens) {\n                    var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    var foundneighbours = [];\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS && !UNITLAYERS.units[POS]) {\n                            foundneighbours.push(POS);\n                        }\n                    }\n                    var NEIGHBOURCOUNT = foundneighbours.length;\n                    ARTIFACTS[(!!(UNITLAYERS.myunits[STARTPOS]) ? 'myroads' : 'opproads')][STARTPOS] = {\n                        count: NEIGHBOURCOUNT\n                    };\n                }\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = UNITLAYERS.queens;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.myunits[STARTPOS]) ? 'myreach' : 'oppreach')][POS] = {};\n                        }\n                    }\n                }\n                return {\n                    myroads: reduce(ARTIFACTS.myroads, function (mem, obj) {\n                        return mem + obj['count'];\n                    }, 0),\n                    mydomain: Object.keys(ARTIFACTS.myreach).length,\n                    opproads: -reduce(ARTIFACTS.opproads, function (mem, obj) {\n                        return mem + obj['count'];\n                    }, 0),\n                    oppdomain: -Object.keys(ARTIFACTS.oppreach).length\n                };\n            };\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    targets: Object.assign({}, step.ARTIFACTS.targets)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = MARKS['selectunit'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                        ARTIFACTS['targets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.targets) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return 'Select where to move the amazon';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return 'Choose Move to go here!';\n            };\n            game.selectfiretarget2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectfiretarget: markpos\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectfiretarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].fire = 'fire2';\n                return newstep;\n            };\n            game.selectfiretarget2instruction = function (step) {\n                return 'Choose Fire to shoot here!';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = {\n                    targets: Object.assign({}, step.ARTIFACTS.targets)\n                };\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var TURNVARS = Object.assign({}, step.TURNVARS);\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                TURNVARS['movedto'] = MARKS['selectmovetarget'];\n                MARKS = {};\n                UNITLAYERS = {\n                    \"queens\": {},\n                    \"myqueens\": {},\n                    \"oppqueens\": {},\n                    \"neutralqueens\": {},\n                    \"fires\": {},\n                    \"myfires\": {},\n                    \"oppfires\": {},\n                    \"neutralfires\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"targets\": {}\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = TURNVARS['movedto'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                        ARTIFACTS['targets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move'),\n                    TURNVARS: TURNVARS\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.targets) {\n                    newlinks[linkpos] = 'selectfiretarget2';\n                }\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return 'Now select where to fire at';\n            };\n            game.fire2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                var TURNVARS = Object.assign({}, step.TURNVARS);\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectfiretarget'],\n                    id: newunitid,\n                    group: 'fires',\n                    owner: 0,\n                    from: TURNVARS['movedto']\n                };\n                MARKS = {};\n                UNITLAYERS = {\n                    \"queens\": {},\n                    \"myqueens\": {},\n                    \"oppqueens\": {},\n                    \"neutralqueens\": {},\n                    \"fires\": {},\n                    \"myfires\": {},\n                    \"oppfires\": {},\n                    \"neutralfires\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"targets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'fire';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'fire',\n                    path: step.path.concat('fire'),\n                    clones: clones,\n                    TURNVARS: TURNVARS\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.fire2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"targets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var TURNVARS = {};\n                var UNITLAYERS = {\n                    \"queens\": {},\n                    \"myqueens\": {},\n                    \"oppqueens\": {},\n                    \"neutralqueens\": {},\n                    \"fires\": {},\n                    \"myfires\": {},\n                    \"oppfires\": {},\n                    \"neutralfires\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: [],\n                    TURNVARS: TURNVARS\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return 'Select an amazon to move and fire with';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), aries: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1\n        };\n        game.graphics = {\n            \"tiles\": {\n                \"corner\": \"playercolour\"\n            },\n            \"icons\": {\n                \"soldiers\": \"rooks\"\n            }\n        };\n        game.board = {\n            \"height\": 8,\n            \"width\": 8,\n            \"terrain\": {\n                \"corner\": {\n                    \"1\": [\"a1\"],\n                    \"2\": [\"h8\"]\n                }\n            }\n        };\n        game.AI = [];\n        game.id = \"aries\";\n        var boardDef = {\n            \"height\": 8,\n            \"width\": 8,\n            \"terrain\": {\n                \"corner\": {\n                    \"1\": [\"a1\"],\n                    \"2\": [\"h8\"]\n                }\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"soldiers\": {\n                        \"1\": [\n                            [\"rect\", \"a1\", \"d4\"]\n                        ],\n                        \"2\": [\n                            [\"rect\", \"e5\", \"h8\"]\n                        ]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = MARKS['selectunit'];\n                var allwalkerdirs = [1, 3, 5, 7];\n                for (var walkerdirnbr = 0; walkerdirnbr < 4; walkerdirnbr++) {\n                    var DIR = allwalkerdirs[walkerdirnbr];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR]) && !BLOCKS[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                    if (BLOCKS[POS]) {\n                        if (UNITLAYERS.oppunits[POS]) {\n                            ARTIFACTS['movetargets'][POS] = {\n                                dir: DIR\n                            };\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    beingpushed: Object.assign({}, step.ARTIFACTS.beingpushed),\n                    squished: Object.assign({}, step.ARTIFACTS.squished)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                if (!!(UNITLAYERS.oppunits[MARKS['selectmovetarget']])) {\n                    var allowedsteps = UNITLAYERS.oppunits;\n                    var BLOCKS = UNITLAYERS.myunits;\n                    var STARTPOS = MARKS['selectmovetarget'];\n                    var DIR = relativedirs[(ARTIFACTS.movetargets[MARKS['selectmovetarget']] || {})['dir'] - 2 + 1];\n                    var walkedsquares = [];\n                    var STOPREASON = \"\";\n                    var POS = \"faux\";\n                    connections.faux[DIR] = STARTPOS;\n                    while (!(STOPREASON = (!(POS = connections[POS][relativedirs[(ARTIFACTS.movetargets[MARKS['selectmovetarget']] || {})['dir'] - 2 + 1]]) ? \"outofbounds\" : BLOCKS[POS] ? \"hitblock\" : !allowedsteps[POS] ? \"nomoresteps\" : null))) {\n                        walkedsquares.push(POS);\n                        ARTIFACTS['beingpushed'][POS] = {};\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if (WALKLENGTH) {\n                        if ((['hitblock', 'outofbounds'].indexOf(STOPREASON) !== -1)) {\n                            ARTIFACTS['squished'][walkedsquares[WALKLENGTH - 1]] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var LOOPID;\n                for (var POS in ARTIFACTS.beingpushed) {\n                    if (LOOPID = (UNITLAYERS.units[POS] || {}).id) {\n                        var pushid = LOOPID;\n                        var pushdir = (ARTIFACTS.movetargets[MARKS['selectmovetarget']] || {})['dir'];\n                        var dist = 1;\n                        var newpos = UNITDATA[pushid].pos;\n                        while (dist && connections[newpos][pushdir]) {\n                            newpos = connections[newpos][pushdir];\n                            dist--;\n                        }\n                        UNITDATA[pushid] = Object.assign({}, UNITDATA[pushid], {\n                            pos: newpos\n                        });\n                        // TODO - check that it uses ['loopid'] ?\n                    }\n                }\n                var LOOPID;\n                for (var POS in ARTIFACTS.squished) {\n                    if (LOOPID = (UNITLAYERS.units[POS] || {}).id) {\n                        delete UNITDATA[LOOPID]; // TODO - check that it uses ['loopid'] ?\n                    }\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"beingpushed\": {},\n                    \"squished\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.oppcorner, s1 = UNITLAYERS.myunits;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'invade';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"beingpushed\": {},\n                    \"squished\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = MARKS['selectunit'];\n                var allwalkerdirs = [1, 3, 5, 7];\n                for (var walkerdirnbr = 0; walkerdirnbr < 4; walkerdirnbr++) {\n                    var DIR = allwalkerdirs[walkerdirnbr];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR]) && !BLOCKS[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                    if (BLOCKS[POS]) {\n                        if (UNITLAYERS.oppunits[POS]) {\n                            ARTIFACTS['movetargets'][POS] = {\n                                dir: DIR\n                            };\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    beingpushed: Object.assign({}, step.ARTIFACTS.beingpushed),\n                    squished: Object.assign({}, step.ARTIFACTS.squished)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                if (!!(UNITLAYERS.oppunits[MARKS['selectmovetarget']])) {\n                    var allowedsteps = UNITLAYERS.oppunits;\n                    var BLOCKS = UNITLAYERS.myunits;\n                    var STARTPOS = MARKS['selectmovetarget'];\n                    var DIR = relativedirs[(ARTIFACTS.movetargets[MARKS['selectmovetarget']] || {})['dir'] - 2 + 1];\n                    var walkedsquares = [];\n                    var STOPREASON = \"\";\n                    var POS = \"faux\";\n                    connections.faux[DIR] = STARTPOS;\n                    while (!(STOPREASON = (!(POS = connections[POS][relativedirs[(ARTIFACTS.movetargets[MARKS['selectmovetarget']] || {})['dir'] - 2 + 1]]) ? \"outofbounds\" : BLOCKS[POS] ? \"hitblock\" : !allowedsteps[POS] ? \"nomoresteps\" : null))) {\n                        walkedsquares.push(POS);\n                        ARTIFACTS['beingpushed'][POS] = {};\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if (WALKLENGTH) {\n                        if ((['hitblock', 'outofbounds'].indexOf(STOPREASON) !== -1)) {\n                            ARTIFACTS['squished'][walkedsquares[WALKLENGTH - 1]] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var LOOPID;\n                for (var POS in ARTIFACTS.beingpushed) {\n                    if (LOOPID = (UNITLAYERS.units[POS] || {}).id) {\n                        var pushid = LOOPID;\n                        var pushdir = (ARTIFACTS.movetargets[MARKS['selectmovetarget']] || {})['dir'];\n                        var dist = 1;\n                        var newpos = UNITDATA[pushid].pos;\n                        while (dist && connections[newpos][pushdir]) {\n                            newpos = connections[newpos][pushdir];\n                            dist--;\n                        }\n                        UNITDATA[pushid] = Object.assign({}, UNITDATA[pushid], {\n                            pos: newpos\n                        });\n                        // TODO - check that it uses ['loopid'] ?\n                    }\n                }\n                var LOOPID;\n                for (var POS in ARTIFACTS.squished) {\n                    if (LOOPID = (UNITLAYERS.units[POS] || {}).id) {\n                        delete UNITDATA[LOOPID]; // TODO - check that it uses ['loopid'] ?\n                    }\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"beingpushed\": {},\n                    \"squished\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.oppcorner, s1 = UNITLAYERS.myunits;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'invade';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"beingpushed\": {},\n                    \"squished\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), atrium: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1\n        };\n        game.graphics = {\n            \"icons\": {\n                \"kings\": \"kings\",\n                \"queens\": \"queens\"\n            }\n        };\n        game.board = {\n            \"height\": 5,\n            \"width\": 5\n        };\n        game.AI = [];\n        game.id = \"atrium\";\n        var boardDef = {\n            \"height\": 5,\n            \"width\": 5\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        var TERRAIN = terrainLayers(boardDef, 0);\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"kings\": {\n                        \"1\": [\"a2\", \"c5\", \"e2\"],\n                        \"2\": [\"b1\", \"b5\", \"e3\"]\n                    },\n                    \"queens\": {\n                        \"1\": [\"a3\", \"d5\", \"d1\"],\n                        \"2\": [\"a4\", \"c1\", \"e4\"]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && !UNITLAYERS.units[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"queens\": {},\n                    \"myqueens\": {},\n                    \"oppqueens\": {},\n                    \"neutralqueens\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"winline\": {}\n                };\n                var walkstarts = UNITLAYERS.myunits;\n                for (var STARTPOS in walkstarts) {\n                    var allowedsteps = (!!(UNITLAYERS.mykings[STARTPOS]) ? UNITLAYERS.mykings : UNITLAYERS.myqueens);\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS]) {\n                            walkedsquares.push(POS);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        if ((WALKLENGTH === 2)) {\n                            ARTIFACTS['winline'][STARTPOS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madewinline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"winline\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"queens\": {},\n                    \"myqueens\": {},\n                    \"oppqueens\": {},\n                    \"neutralqueens\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && !UNITLAYERS.units[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"queens\": {},\n                    \"myqueens\": {},\n                    \"oppqueens\": {},\n                    \"neutralqueens\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"winline\": {}\n                };\n                var walkstarts = UNITLAYERS.myunits;\n                for (var STARTPOS in walkstarts) {\n                    var allowedsteps = (!!(UNITLAYERS.mykings[STARTPOS]) ? UNITLAYERS.mykings : UNITLAYERS.myqueens);\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS]) {\n                            walkedsquares.push(POS);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        if ((WALKLENGTH === 2)) {\n                            ARTIFACTS['winline'][STARTPOS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madewinline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"winline\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"queens\": {},\n                    \"myqueens\": {},\n                    \"oppqueens\": {},\n                    \"neutralqueens\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), castle: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1\n        };\n        game.graphics = {\n            \"tiles\": {\n                \"walls\": \"castle\",\n                \"thrones\": \"playercolour\"\n            },\n            \"icons\": {\n                \"soldiers\": \"rooks\"\n            }\n        };\n        game.board = {\n            \"width\": 19,\n            \"height\": 19,\n            \"terrain\": {\n                \"walls\": [\n                    [\"rect\", \"c2\", \"c8\"],\n                    [\"rect\", \"f1\", \"f6\"],\n                    [\"rect\", \"h2\", \"h6\"],\n                    [\"rect\", \"l2\", \"l6\"],\n                    [\"rect\", \"n1\", \"n6\"],\n                    [\"rect\", \"q2\", \"q8\"],\n                    [\"rect\", \"c8\", \"i8\"],\n                    [\"rect\", \"k8\", \"p8\"],\n                    [\"rect\", \"i6\", \"k6\"], \"i2\", \"k2\", [\"rect\", \"c12\", \"c18\"],\n                    [\"rect\", \"f14\", \"f19\"],\n                    [\"rect\", \"h14\", \"h18\"],\n                    [\"rect\", \"l14\", \"l18\"],\n                    [\"rect\", \"n14\", \"n19\"],\n                    [\"rect\", \"q12\", \"q18\"],\n                    [\"rect\", \"c12\", \"i12\"],\n                    [\"rect\", \"k12\", \"p12\"],\n                    [\"rect\", \"i14\", \"k14\"], \"i18\", \"k18\"\n                ],\n                \"thrones\": {\n                    \"1\": [\"j4\"],\n                    \"2\": [\"j16\"]\n                }\n            }\n        };\n        game.AI = [];\n        game.id = \"castle\";\n        var boardDef = {\n            \"width\": 19,\n            \"height\": 19,\n            \"terrain\": {\n                \"walls\": [\n                    [\"rect\", \"c2\", \"c8\"],\n                    [\"rect\", \"f1\", \"f6\"],\n                    [\"rect\", \"h2\", \"h6\"],\n                    [\"rect\", \"l2\", \"l6\"],\n                    [\"rect\", \"n1\", \"n6\"],\n                    [\"rect\", \"q2\", \"q8\"],\n                    [\"rect\", \"c8\", \"i8\"],\n                    [\"rect\", \"k8\", \"p8\"],\n                    [\"rect\", \"i6\", \"k6\"], \"i2\", \"k2\", [\"rect\", \"c12\", \"c18\"],\n                    [\"rect\", \"f14\", \"f19\"],\n                    [\"rect\", \"h14\", \"h18\"],\n                    [\"rect\", \"l14\", \"l18\"],\n                    [\"rect\", \"n14\", \"n19\"],\n                    [\"rect\", \"q12\", \"q18\"],\n                    [\"rect\", \"c12\", \"i12\"],\n                    [\"rect\", \"k12\", \"p12\"],\n                    [\"rect\", \"i14\", \"k14\"], \"i18\", \"k18\"\n                ],\n                \"thrones\": {\n                    \"1\": [\"j4\"],\n                    \"2\": [\"j16\"]\n                }\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"soldiers\": {\n                        \"1\": [\"f1\", \"n1\", \"h2\", \"l2\", \"h6\", \"l6\", \"c8\", \"q8\"],\n                        \"2\": [\"f19\", \"n19\", \"h18\", \"l18\", \"h14\", \"l14\", \"c12\", \"q12\"]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && ((!!(TERRAIN.walls[STARTPOS]) && !(TERRAIN.walls[POS])) || (!(TERRAIN.walls[STARTPOS]) && !!(TERRAIN.walls[POS])))) {\n                        if (!UNITLAYERS.myunits[POS]) {\n                            ARTIFACTS['movetargets'][POS] = {};\n                        }\n                    }\n                }\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = MARKS['selectunit'];\n                var allowedsteps = (!!(TERRAIN.walls[STARTPOS]) ? TERRAIN.walls :\n                    (function () {\n                        var ret = {}, s0 = TERRAIN.nowalls, s1 = TERRAIN.mythrones;\n                        for (var key in s0) {\n                            if (!s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }()));\n                var allwalkerdirs = [1, 3, 5, 7];\n                for (var walkerdirnbr = 0; walkerdirnbr < 4; walkerdirnbr++) {\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS] && !BLOCKS[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                    if (BLOCKS[POS] && allowedsteps[POS]) {\n                        if (UNITLAYERS.oppunits[POS]) {\n                            ARTIFACTS['movetargets'][POS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.oppthrones;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else if (Object.keys(UNITLAYERS.oppunits || {}).length === 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'genocide';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && ((!!(TERRAIN.walls[STARTPOS]) && !(TERRAIN.walls[POS])) || (!(TERRAIN.walls[STARTPOS]) && !!(TERRAIN.walls[POS])))) {\n                        if (!UNITLAYERS.myunits[POS]) {\n                            ARTIFACTS['movetargets'][POS] = {};\n                        }\n                    }\n                }\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = MARKS['selectunit'];\n                var allowedsteps = (!!(TERRAIN.walls[STARTPOS]) ? TERRAIN.walls :\n                    (function () {\n                        var ret = {}, s0 = TERRAIN.nowalls, s1 = TERRAIN.mythrones;\n                        for (var key in s0) {\n                            if (!s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }()));\n                var allwalkerdirs = [1, 3, 5, 7];\n                for (var walkerdirnbr = 0; walkerdirnbr < 4; walkerdirnbr++) {\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS] && !BLOCKS[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                    if (BLOCKS[POS] && allowedsteps[POS]) {\n                        if (UNITLAYERS.oppunits[POS]) {\n                            ARTIFACTS['movetargets'][POS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.oppthrones;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else if (Object.keys(UNITLAYERS.oppunits || {}).length === 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'genocide';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), coffee: (function () {\n        var game = {};\n        game.commands = {\n            \"uphill\": 1,\n            \"downhill\": 1,\n            \"horisontal\": 1,\n            \"vertical\": 1\n        };\n        game.graphics = {\n            \"icons\": {\n                \"soldiers\": \"pawns\",\n                \"markers\": \"pawns\"\n            }\n        };\n        game.board = {\n            \"height\": 5,\n            \"width\": 5\n        };\n        game.AI = [];\n        game.id = \"coffee\";\n        var boardDef = {\n            \"height\": 5,\n            \"width\": 5\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        var TERRAIN = terrainLayers(boardDef, 0);\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({}),\n                clones: 0\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectdrop1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    FOOBAR: Object.assign({}, step.ARTIFACTS.FOOBAR),\n                    vertical: Object.assign({}, step.ARTIFACTS.vertical),\n                    uphill: Object.assign({}, step.ARTIFACTS.uphill),\n                    horisontal: Object.assign({}, step.ARTIFACTS.horisontal),\n                    downhill: Object.assign({}, step.ARTIFACTS.downhill)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectdrop: markpos\n                };\n                var STARTPOS = MARKS['selectdrop'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var DIR = allwalkerdirs[walkerdirnbr];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR])) {\n                        if (!UNITLAYERS.units[POS]) {\n                            ARTIFACTS[['FOOBAR', 'vertical', 'uphill', 'horisontal', 'downhill', 'vertical', 'uphill', 'horisontal', 'downhill'][DIR]][POS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectdrop'\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.uphill || {}).length !== 0) {\n                    turn.links[newstepid].uphill = 'uphill1';\n                }\n                if (Object.keys(ARTIFACTS.downhill || {}).length !== 0) {\n                    turn.links[newstepid].downhill = 'downhill1';\n                }\n                if (Object.keys(ARTIFACTS.vertical || {}).length !== 0) {\n                    turn.links[newstepid].vertical = 'vertical1';\n                }\n                if (Object.keys(ARTIFACTS.horisontal || {}).length !== 0) {\n                    turn.links[newstepid].horisontal = 'horisontal1';\n                }\n                return newstep;\n            };\n            game.selectdrop1instruction = function (step) {\n                return '';\n            };\n            game.uphill1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                for (var POS in UNITLAYERS.markers) {\n                    delete UNITDATA[(UNITLAYERS.units[POS] || {}).id];\n                }\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectdrop'],\n                    id: newunitid,\n                    group: 'soldiers',\n                    owner: player\n                };\n                for (var POS in ARTIFACTS.uphill) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'markers',\n                        owner: 0\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"markers\": {},\n                    \"mymarkers\": {},\n                    \"oppmarkers\": {},\n                    \"neutralmarkers\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"FOOBAR\": {},\n                    \"vertical\": {},\n                    \"uphill\": {},\n                    \"horisontal\": {},\n                    \"downhill\": {},\n                    \"winline\": {}\n                };\n                var allowedsteps = UNITLAYERS.myunits;\n                var walkstarts = UNITLAYERS.myunits;\n                for (var STARTPOS in walkstarts) {\n                    var DIR = undefined;\n                    var walkedsquares = [];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR]) && allowedsteps[POS]) {\n                        walkedsquares.push(POS);\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if ((3 === WALKLENGTH)) {\n                        ARTIFACTS['winline'][STARTPOS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'uphill';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'uphill',\n                    path: step.path.concat('uphill'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(UNITLAYERS.markers || {}).length === 0) {\n                    turn.blockedby = \"nolegal\";\n                }\n                else if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.uphill1instruction = function (step) {\n                return '';\n            };\n            game.downhill1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                for (var POS in UNITLAYERS.markers) {\n                    delete UNITDATA[(UNITLAYERS.units[POS] || {}).id];\n                }\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectdrop'],\n                    id: newunitid,\n                    group: 'soldiers',\n                    owner: player\n                };\n                for (var POS in ARTIFACTS.downhill) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'markers',\n                        owner: 0\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"markers\": {},\n                    \"mymarkers\": {},\n                    \"oppmarkers\": {},\n                    \"neutralmarkers\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"FOOBAR\": {},\n                    \"vertical\": {},\n                    \"uphill\": {},\n                    \"horisontal\": {},\n                    \"downhill\": {},\n                    \"winline\": {}\n                };\n                var allowedsteps = UNITLAYERS.myunits;\n                var walkstarts = UNITLAYERS.myunits;\n                for (var STARTPOS in walkstarts) {\n                    var DIR = undefined;\n                    var walkedsquares = [];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR]) && allowedsteps[POS]) {\n                        walkedsquares.push(POS);\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if ((3 === WALKLENGTH)) {\n                        ARTIFACTS['winline'][STARTPOS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'downhill';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'downhill',\n                    path: step.path.concat('downhill'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(UNITLAYERS.markers || {}).length === 0) {\n                    turn.blockedby = \"nolegal\";\n                }\n                else if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.downhill1instruction = function (step) {\n                return '';\n            };\n            game.horisontal1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                for (var POS in UNITLAYERS.markers) {\n                    delete UNITDATA[(UNITLAYERS.units[POS] || {}).id];\n                }\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectdrop'],\n                    id: newunitid,\n                    group: 'soldiers',\n                    owner: player\n                };\n                for (var POS in ARTIFACTS.horisontal) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'markers',\n                        owner: 0\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"markers\": {},\n                    \"mymarkers\": {},\n                    \"oppmarkers\": {},\n                    \"neutralmarkers\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"FOOBAR\": {},\n                    \"vertical\": {},\n                    \"uphill\": {},\n                    \"horisontal\": {},\n                    \"downhill\": {},\n                    \"winline\": {}\n                };\n                var allowedsteps = UNITLAYERS.myunits;\n                var walkstarts = UNITLAYERS.myunits;\n                for (var STARTPOS in walkstarts) {\n                    var DIR = undefined;\n                    var walkedsquares = [];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR]) && allowedsteps[POS]) {\n                        walkedsquares.push(POS);\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if ((3 === WALKLENGTH)) {\n                        ARTIFACTS['winline'][STARTPOS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'horisontal';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'horisontal',\n                    path: step.path.concat('horisontal'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(UNITLAYERS.markers || {}).length === 0) {\n                    turn.blockedby = \"nolegal\";\n                }\n                else if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.horisontal1instruction = function (step) {\n                return '';\n            };\n            game.vertical1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                for (var POS in UNITLAYERS.markers) {\n                    delete UNITDATA[(UNITLAYERS.units[POS] || {}).id];\n                }\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectdrop'],\n                    id: newunitid,\n                    group: 'soldiers',\n                    owner: player\n                };\n                for (var POS in ARTIFACTS.vertical) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'markers',\n                        owner: 0\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"markers\": {},\n                    \"mymarkers\": {},\n                    \"oppmarkers\": {},\n                    \"neutralmarkers\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"FOOBAR\": {},\n                    \"vertical\": {},\n                    \"uphill\": {},\n                    \"horisontal\": {},\n                    \"downhill\": {},\n                    \"winline\": {}\n                };\n                var allowedsteps = UNITLAYERS.myunits;\n                var walkstarts = UNITLAYERS.myunits;\n                for (var STARTPOS in walkstarts) {\n                    var DIR = undefined;\n                    var walkedsquares = [];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR]) && allowedsteps[POS]) {\n                        walkedsquares.push(POS);\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if ((3 === WALKLENGTH)) {\n                        ARTIFACTS['winline'][STARTPOS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'vertical';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'vertical',\n                    path: step.path.concat('vertical'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(UNITLAYERS.markers || {}).length === 0) {\n                    turn.blockedby = \"nolegal\";\n                }\n                else if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.vertical1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"FOOBAR\": {},\n                    \"vertical\": {},\n                    \"uphill\": {},\n                    \"horisontal\": {},\n                    \"downhill\": {},\n                    \"winline\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"markers\": {},\n                    \"mymarkers\": {},\n                    \"oppmarkers\": {},\n                    \"neutralmarkers\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in (Object.keys(UNITLAYERS.markers || {}).length === 0 ? BOARD.board : UNITLAYERS.markers)) {\n                    newlinks[linkpos] = 'selectdrop1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectdrop2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    FOOBAR: Object.assign({}, step.ARTIFACTS.FOOBAR),\n                    vertical: Object.assign({}, step.ARTIFACTS.vertical),\n                    uphill: Object.assign({}, step.ARTIFACTS.uphill),\n                    horisontal: Object.assign({}, step.ARTIFACTS.horisontal),\n                    downhill: Object.assign({}, step.ARTIFACTS.downhill)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectdrop: markpos\n                };\n                var STARTPOS = MARKS['selectdrop'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var DIR = allwalkerdirs[walkerdirnbr];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR])) {\n                        if (!UNITLAYERS.units[POS]) {\n                            ARTIFACTS[['FOOBAR', 'vertical', 'uphill', 'horisontal', 'downhill', 'vertical', 'uphill', 'horisontal', 'downhill'][DIR]][POS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectdrop'\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.uphill || {}).length !== 0) {\n                    turn.links[newstepid].uphill = 'uphill2';\n                }\n                if (Object.keys(ARTIFACTS.downhill || {}).length !== 0) {\n                    turn.links[newstepid].downhill = 'downhill2';\n                }\n                if (Object.keys(ARTIFACTS.vertical || {}).length !== 0) {\n                    turn.links[newstepid].vertical = 'vertical2';\n                }\n                if (Object.keys(ARTIFACTS.horisontal || {}).length !== 0) {\n                    turn.links[newstepid].horisontal = 'horisontal2';\n                }\n                return newstep;\n            };\n            game.selectdrop2instruction = function (step) {\n                return '';\n            };\n            game.uphill2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                for (var POS in UNITLAYERS.markers) {\n                    delete UNITDATA[(UNITLAYERS.units[POS] || {}).id];\n                }\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectdrop'],\n                    id: newunitid,\n                    group: 'soldiers',\n                    owner: player\n                };\n                for (var POS in ARTIFACTS.uphill) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'markers',\n                        owner: 0\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"markers\": {},\n                    \"mymarkers\": {},\n                    \"oppmarkers\": {},\n                    \"neutralmarkers\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"FOOBAR\": {},\n                    \"vertical\": {},\n                    \"uphill\": {},\n                    \"horisontal\": {},\n                    \"downhill\": {},\n                    \"winline\": {}\n                };\n                var allowedsteps = UNITLAYERS.myunits;\n                var walkstarts = UNITLAYERS.myunits;\n                for (var STARTPOS in walkstarts) {\n                    var DIR = undefined;\n                    var walkedsquares = [];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR]) && allowedsteps[POS]) {\n                        walkedsquares.push(POS);\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if ((3 === WALKLENGTH)) {\n                        ARTIFACTS['winline'][STARTPOS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'uphill';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'uphill',\n                    path: step.path.concat('uphill'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(UNITLAYERS.markers || {}).length === 0) {\n                    turn.blockedby = \"nolegal\";\n                }\n                else if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.uphill2instruction = function (step) {\n                return '';\n            };\n            game.downhill2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                for (var POS in UNITLAYERS.markers) {\n                    delete UNITDATA[(UNITLAYERS.units[POS] || {}).id];\n                }\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectdrop'],\n                    id: newunitid,\n                    group: 'soldiers',\n                    owner: player\n                };\n                for (var POS in ARTIFACTS.downhill) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'markers',\n                        owner: 0\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"markers\": {},\n                    \"mymarkers\": {},\n                    \"oppmarkers\": {},\n                    \"neutralmarkers\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"FOOBAR\": {},\n                    \"vertical\": {},\n                    \"uphill\": {},\n                    \"horisontal\": {},\n                    \"downhill\": {},\n                    \"winline\": {}\n                };\n                var allowedsteps = UNITLAYERS.myunits;\n                var walkstarts = UNITLAYERS.myunits;\n                for (var STARTPOS in walkstarts) {\n                    var DIR = undefined;\n                    var walkedsquares = [];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR]) && allowedsteps[POS]) {\n                        walkedsquares.push(POS);\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if ((3 === WALKLENGTH)) {\n                        ARTIFACTS['winline'][STARTPOS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'downhill';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'downhill',\n                    path: step.path.concat('downhill'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(UNITLAYERS.markers || {}).length === 0) {\n                    turn.blockedby = \"nolegal\";\n                }\n                else if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.downhill2instruction = function (step) {\n                return '';\n            };\n            game.horisontal2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                for (var POS in UNITLAYERS.markers) {\n                    delete UNITDATA[(UNITLAYERS.units[POS] || {}).id];\n                }\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectdrop'],\n                    id: newunitid,\n                    group: 'soldiers',\n                    owner: player\n                };\n                for (var POS in ARTIFACTS.horisontal) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'markers',\n                        owner: 0\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"markers\": {},\n                    \"mymarkers\": {},\n                    \"oppmarkers\": {},\n                    \"neutralmarkers\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"FOOBAR\": {},\n                    \"vertical\": {},\n                    \"uphill\": {},\n                    \"horisontal\": {},\n                    \"downhill\": {},\n                    \"winline\": {}\n                };\n                var allowedsteps = UNITLAYERS.myunits;\n                var walkstarts = UNITLAYERS.myunits;\n                for (var STARTPOS in walkstarts) {\n                    var DIR = undefined;\n                    var walkedsquares = [];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR]) && allowedsteps[POS]) {\n                        walkedsquares.push(POS);\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if ((3 === WALKLENGTH)) {\n                        ARTIFACTS['winline'][STARTPOS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'horisontal';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'horisontal',\n                    path: step.path.concat('horisontal'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(UNITLAYERS.markers || {}).length === 0) {\n                    turn.blockedby = \"nolegal\";\n                }\n                else if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.horisontal2instruction = function (step) {\n                return '';\n            };\n            game.vertical2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                for (var POS in UNITLAYERS.markers) {\n                    delete UNITDATA[(UNITLAYERS.units[POS] || {}).id];\n                }\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectdrop'],\n                    id: newunitid,\n                    group: 'soldiers',\n                    owner: player\n                };\n                for (var POS in ARTIFACTS.vertical) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'markers',\n                        owner: 0\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"markers\": {},\n                    \"mymarkers\": {},\n                    \"oppmarkers\": {},\n                    \"neutralmarkers\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"FOOBAR\": {},\n                    \"vertical\": {},\n                    \"uphill\": {},\n                    \"horisontal\": {},\n                    \"downhill\": {},\n                    \"winline\": {}\n                };\n                var allowedsteps = UNITLAYERS.myunits;\n                var walkstarts = UNITLAYERS.myunits;\n                for (var STARTPOS in walkstarts) {\n                    var DIR = undefined;\n                    var walkedsquares = [];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][DIR]) && allowedsteps[POS]) {\n                        walkedsquares.push(POS);\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if ((3 === WALKLENGTH)) {\n                        ARTIFACTS['winline'][STARTPOS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'vertical';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'vertical',\n                    path: step.path.concat('vertical'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(UNITLAYERS.markers || {}).length === 0) {\n                    turn.blockedby = \"nolegal\";\n                }\n                else if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.vertical2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"FOOBAR\": {},\n                    \"vertical\": {},\n                    \"uphill\": {},\n                    \"horisontal\": {},\n                    \"downhill\": {},\n                    \"winline\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"markers\": {},\n                    \"mymarkers\": {},\n                    \"oppmarkers\": {},\n                    \"neutralmarkers\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in (Object.keys(UNITLAYERS.markers || {}).length === 0 ? BOARD.board : UNITLAYERS.markers)) {\n                    newlinks[linkpos] = 'selectdrop2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), daggers: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1\n        };\n        game.graphics = {\n            \"tiles\": {\n                \"bases\": \"playercolour\"\n            },\n            \"icons\": {\n                \"daggers\": \"bishops\",\n                \"crowns\": \"kings\"\n            }\n        };\n        game.board = {\n            \"height\": 8,\n            \"width\": 8,\n            \"terrain\": {\n                \"bases\": {\n                    \"1\": [\n                        [\"rect\", \"a8\", \"h8\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a1\", \"h1\"]\n                    ]\n                }\n            }\n        };\n        game.AI = [];\n        game.id = \"daggers\";\n        var boardDef = {\n            \"height\": 8,\n            \"width\": 8,\n            \"terrain\": {\n                \"bases\": {\n                    \"1\": [\n                        [\"rect\", \"a8\", \"h8\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a1\", \"h1\"]\n                    ]\n                }\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"crowns\": {\n                        \"1\": [\"d8\", \"e8\"],\n                        \"2\": [\"c1\", \"f1\"]\n                    },\n                    \"daggers\": {\n                        \"1\": [\n                            [\"rect\", \"c7\", \"f7\"]\n                        ],\n                        \"2\": [\"c3\", \"f3\", [\"rect\", \"b2\", \"g2\"]]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    movetarget: Object.assign({}, step.ARTIFACTS.movetarget)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                if (!!(UNITLAYERS.mycrowns[MARKS['selectunit']])) {\n                    var STARTPOS = MARKS['selectunit'];\n                    var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS) {\n                            if (!(UNITLAYERS.myunits[POS])) {\n                                ARTIFACTS['movetarget'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                else {\n                    var BLOCKS = UNITLAYERS.units;\n                    var STARTPOS = MARKS['selectunit'];\n                    var allwalkerdirs = [8, 1, 2, 4, 5, 6];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 6; walkerdirnbr++) {\n                        var DIR = allwalkerdirs[walkerdirnbr];\n                        var MAX = (([8, 1, 2].indexOf(DIR) !== -1) ? 1 : 8);\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][DIR]) && !BLOCKS[POS]) {\n                            LENGTH++;\n                            ARTIFACTS['movetarget'][POS] = {};\n                        }\n                        if (BLOCKS[POS]) {\n                            if ((!(UNITLAYERS.myunits[POS]) && !(([1, 5].indexOf(DIR) !== -1) && !!(UNITLAYERS.oppdaggers[POS])))) {\n                                ARTIFACTS['movetarget'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetarget) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"crowns\": {},\n                    \"mycrowns\": {},\n                    \"oppcrowns\": {},\n                    \"neutralcrowns\": {},\n                    \"daggers\": {},\n                    \"mydaggers\": {},\n                    \"oppdaggers\": {},\n                    \"neutraldaggers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetarget\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mycrowns, s1 = TERRAIN.oppbases;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else if ((Object.keys(UNITLAYERS.oppcrowns).length === 1)) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'kingkill';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetarget\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"crowns\": {},\n                    \"mycrowns\": {},\n                    \"oppcrowns\": {},\n                    \"neutralcrowns\": {},\n                    \"daggers\": {},\n                    \"mydaggers\": {},\n                    \"oppdaggers\": {},\n                    \"neutraldaggers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    movetarget: Object.assign({}, step.ARTIFACTS.movetarget)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                if (!!(UNITLAYERS.mycrowns[MARKS['selectunit']])) {\n                    var STARTPOS = MARKS['selectunit'];\n                    var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS) {\n                            if (!(UNITLAYERS.myunits[POS])) {\n                                ARTIFACTS['movetarget'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                else {\n                    var BLOCKS = UNITLAYERS.units;\n                    var STARTPOS = MARKS['selectunit'];\n                    var allwalkerdirs = [8, 1, 2, 4, 5, 6];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 6; walkerdirnbr++) {\n                        var DIR = allwalkerdirs[walkerdirnbr];\n                        var MAX = (([8, 1, 2].indexOf(DIR) !== -1) ? 1 : 8);\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][DIR]) && !BLOCKS[POS]) {\n                            LENGTH++;\n                            ARTIFACTS['movetarget'][POS] = {};\n                        }\n                        if (BLOCKS[POS]) {\n                            if ((!(UNITLAYERS.myunits[POS]) && !(([1, 5].indexOf(DIR) !== -1) && !!(UNITLAYERS.oppdaggers[POS])))) {\n                                ARTIFACTS['movetarget'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetarget) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"crowns\": {},\n                    \"mycrowns\": {},\n                    \"oppcrowns\": {},\n                    \"neutralcrowns\": {},\n                    \"daggers\": {},\n                    \"mydaggers\": {},\n                    \"oppdaggers\": {},\n                    \"neutraldaggers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetarget\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mycrowns, s1 = TERRAIN.oppbases;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else if ((Object.keys(UNITLAYERS.oppcrowns).length === 1)) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'kingkill';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetarget\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"crowns\": {},\n                    \"mycrowns\": {},\n                    \"oppcrowns\": {},\n                    \"neutralcrowns\": {},\n                    \"daggers\": {},\n                    \"mydaggers\": {},\n                    \"oppdaggers\": {},\n                    \"neutraldaggers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), gogol: (function () {\n        var game = {};\n        game.commands = {\n            \"deploy\": 1,\n            \"move\": 1,\n            \"jump\": 1\n        };\n        game.graphics = {\n            \"tiles\": {\n                \"homerow\": \"playercolour\"\n            },\n            \"icons\": {\n                \"kings\": \"kings\",\n                \"soldiers\": \"pawns\"\n            }\n        };\n        game.board = {\n            \"height\": 8,\n            \"width\": 8,\n            \"terrain\": {\n                \"homerow\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"h1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a8\", \"h8\"]\n                    ]\n                },\n                \"edges\": [\n                    [\"rect\", \"a1\", \"a8\"],\n                    [\"rect\", \"h1\", \"h8\"],\n                    [\"rect\", \"b8\", \"g8\"],\n                    [\"rect\", \"b1\", \"g1\"]\n                ]\n            }\n        };\n        game.AI = [];\n        game.id = \"gogol\";\n        var boardDef = {\n            \"height\": 8,\n            \"width\": 8,\n            \"terrain\": {\n                \"homerow\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"h1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a8\", \"h8\"]\n                    ]\n                },\n                \"edges\": [\n                    [\"rect\", \"a1\", \"a8\"],\n                    [\"rect\", \"h1\", \"h8\"],\n                    [\"rect\", \"b8\", \"g8\"],\n                    [\"rect\", \"b1\", \"g1\"]\n                ]\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"soldiers\": {\n                        \"1\": [\n                            [\"rect\", \"a1\", \"h1\"]\n                        ],\n                        \"2\": [\n                            [\"rect\", \"a8\", \"h8\"]\n                        ]\n                    }\n                }),\n                clones: 0\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectkingdeploy1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectkingdeploy: markpos\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectkingdeploy'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].deploy = 'deploy1';\n                return newstep;\n            };\n            game.selectkingdeploy1instruction = function (step) {\n                return '';\n            };\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    kingwalk: Object.assign({}, step.ARTIFACTS.kingwalk),\n                    adjacentenemies: Object.assign({}, step.ARTIFACTS.adjacentenemies),\n                    willdie: Object.assign({}, step.ARTIFACTS.willdie),\n                    jumptargets: Object.assign({}, step.ARTIFACTS.jumptargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.mykings, s1 = ARTIFACTS.selectunit;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            if (!ARTIFACTS.nokings[POS]) {\n                                ARTIFACTS['kingwalk'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                    var DIR = neighbourdirs[dirnbr];\n                    var POS = startconnections[DIR];\n                    if (POS && UNITLAYERS.oppunits[POS]) {\n                        ARTIFACTS['adjacentenemies'][POS] = {\n                            dir: DIR\n                        };\n                    }\n                }\n                for (var STARTPOS in ARTIFACTS.adjacentenemies) {\n                    var DIR = relativedirs[(ARTIFACTS.adjacentenemies[STARTPOS] || {})['dir'] - 2 + 1];\n                    var POS = connections[STARTPOS][DIR];\n                    if (POS && !(function () {\n                        var k, ret = {}, s0 = UNITLAYERS.units, s1 = (!!(UNITLAYERS.mykings[MARKS['selectunit']]) ? ARTIFACTS.nokings : ARTIFACTS.nosoldiers);\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }())[POS]) {\n                        var NEIGHBOURCOUNT = 1;\n                        ARTIFACTS['jumptargets'][POS] = {\n                            dir: DIR\n                        };\n                    }\n                    if (!!NEIGHBOURCOUNT) {\n                        ARTIFACTS['willdie'][STARTPOS] = {\n                            dir: DIR\n                        };\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in (!!(UNITLAYERS.mykings[MARKS['selectunit']]) ? ARTIFACTS.kingwalk :\n                    (function () {\n                        var ret = {}, s0 = BOARD.board, s1 = (function () {\n                            var k, ret = {}, s0 = UNITLAYERS.units, s1 = (function () {\n                                var k, ret = {}, s0 = ARTIFACTS.nosoldiers, s1 = ARTIFACTS.jumptargets;\n                                for (k in s0) {\n                                    ret[k] = 1;\n                                }\n                                for (k in s1) {\n                                    ret[k] = 1;\n                                }\n                                return ret;\n                            }());\n                            for (k in s0) {\n                                ret[k] = 1;\n                            }\n                            for (k in s1) {\n                                ret[k] = 1;\n                            }\n                            return ret;\n                        }());\n                        for (var key in s0) {\n                            if (!s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }()))) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.jumptargets) {\n                    newlinks[linkpos] = 'selectjumptarget1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return '';\n            };\n            game.selectjumptarget1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    splashed: Object.assign({}, step.ARTIFACTS.splashed)\n                });\n                var MARKS = {\n                    selectjumptarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var filtersourcelayer = ARTIFACTS.willdie;\n                var filtersourcelayer = ARTIFACTS.splashed;\n                for (var POS in filtersourcelayer) {\n                    if (filtersourcelayer[POS]) {\n                        var filterobj = filtersourcelayer[POS];\n                        if (false || filterobj.dir === (ARTIFACTS.jumptargets[MARKS['selectjumptarget']] || {})['dir']) {\n                            filtertargetlayer[POS] = filterobj;\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectjumptarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].jump = 'jump1';\n                return newstep;\n            };\n            game.selectjumptarget1instruction = function (step) {\n                return '';\n            };\n            game.deploy1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectkingdeploy'],\n                    id: newunitid,\n                    group: 'kings',\n                    owner: player\n                };\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"nokings\": {},\n                    \"nosoldiers\": {},\n                    \"kingwalk\": {},\n                    \"adjacentenemies\": {},\n                    \"splashed\": {},\n                    \"willdie\": {},\n                    \"jumptargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'deploy';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'deploy',\n                    path: step.path.concat('deploy'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mykings, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else if (((turn.turn > 2) && Object.keys(UNITLAYERS.oppkings || {}).length === 0)) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'kingkill';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.deploy1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"nokings\": {},\n                    \"nosoldiers\": {},\n                    \"kingwalk\": {},\n                    \"adjacentenemies\": {},\n                    \"splashed\": {},\n                    \"willdie\": {},\n                    \"jumptargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mykings, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else if (((turn.turn > 2) && Object.keys(UNITLAYERS.oppkings || {}).length === 0)) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'kingkill';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.jump1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                delete UNITDATA[(UNITLAYERS.units[Object.keys(ARTIFACTS.willdie)[0]] || {}).id];\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectjumptarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"nokings\": {},\n                    \"nosoldiers\": {},\n                    \"kingwalk\": {},\n                    \"adjacentenemies\": {},\n                    \"splashed\": {},\n                    \"willdie\": {},\n                    \"jumptargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'jump';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'jump',\n                    path: step.path.concat('jump')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mykings, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else if (((turn.turn > 2) && Object.keys(UNITLAYERS.oppkings || {}).length === 0)) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'kingkill';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.jump1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"nokings\": {},\n                    \"nosoldiers\": {},\n                    \"kingwalk\": {},\n                    \"adjacentenemies\": {},\n                    \"splashed\": {},\n                    \"willdie\": {},\n                    \"jumptargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                for (var STARTPOS in (function () {\n                    var ret = {}, s0 = TERRAIN.edges, s1 = UNITLAYERS.mysoldiers;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())) {\n                    var neighbourdirs = (!!(TERRAIN.homerow[STARTPOS]) ? [1, 3, 5, 7] : [1, 5]);\n                    var nbrofneighbourdirs = neighbourdirs.length;\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS) {\n                            ARTIFACTS['nokings'][POS] = {};\n                        }\n                    }\n                }\n                for (var STARTPOS in UNITLAYERS.mykings) {\n                    var neighbourdirs = [1, 3, 5, 7];\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS && (!!(TERRAIN.homerow[POS]) || (!!(TERRAIN.edges[STARTPOS]) && !!(TERRAIN.edges[POS])))) {\n                            ARTIFACTS['nosoldiers'][POS] = {};\n                        }\n                    }\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                if ((turn.turn > 2)) {\n                    var newlinks = turn.links.root;\n                    for (var linkpos in UNITLAYERS.myunits) {\n                        newlinks[linkpos] = 'selectunit1';\n                    }\n                }\n                else {\n                    var newlinks = turn.links.root;\n                    for (var linkpos in (function () {\n                        var ret = {}, s0 = BOARD.board, s1 = (function () {\n                            var k, ret = {}, s0 = UNITLAYERS.units, s1 = ARTIFACTS.nokings;\n                            for (k in s0) {\n                                ret[k] = 1;\n                            }\n                            for (k in s1) {\n                                ret[k] = 1;\n                            }\n                            return ret;\n                        }());\n                        for (var key in s0) {\n                            if (!s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())) {\n                        newlinks[linkpos] = 'selectkingdeploy1';\n                    }\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectkingdeploy2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectkingdeploy: markpos\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectkingdeploy'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].deploy = 'deploy2';\n                return newstep;\n            };\n            game.selectkingdeploy2instruction = function (step) {\n                return '';\n            };\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    kingwalk: Object.assign({}, step.ARTIFACTS.kingwalk),\n                    adjacentenemies: Object.assign({}, step.ARTIFACTS.adjacentenemies),\n                    willdie: Object.assign({}, step.ARTIFACTS.willdie),\n                    jumptargets: Object.assign({}, step.ARTIFACTS.jumptargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var walkstarts = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.mykings, s1 = ARTIFACTS.selectunit;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            if (!ARTIFACTS.nokings[POS]) {\n                                ARTIFACTS['kingwalk'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                    var DIR = neighbourdirs[dirnbr];\n                    var POS = startconnections[DIR];\n                    if (POS && UNITLAYERS.oppunits[POS]) {\n                        ARTIFACTS['adjacentenemies'][POS] = {\n                            dir: DIR\n                        };\n                    }\n                }\n                for (var STARTPOS in ARTIFACTS.adjacentenemies) {\n                    var DIR = relativedirs[(ARTIFACTS.adjacentenemies[STARTPOS] || {})['dir'] - 2 + 1];\n                    var POS = connections[STARTPOS][DIR];\n                    if (POS && !(function () {\n                        var k, ret = {}, s0 = UNITLAYERS.units, s1 = (!!(UNITLAYERS.mykings[MARKS['selectunit']]) ? ARTIFACTS.nokings : ARTIFACTS.nosoldiers);\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }())[POS]) {\n                        var NEIGHBOURCOUNT = 1;\n                        ARTIFACTS['jumptargets'][POS] = {\n                            dir: DIR\n                        };\n                    }\n                    if (!!NEIGHBOURCOUNT) {\n                        ARTIFACTS['willdie'][STARTPOS] = {\n                            dir: DIR\n                        };\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in (!!(UNITLAYERS.mykings[MARKS['selectunit']]) ? ARTIFACTS.kingwalk :\n                    (function () {\n                        var ret = {}, s0 = BOARD.board, s1 = (function () {\n                            var k, ret = {}, s0 = UNITLAYERS.units, s1 = (function () {\n                                var k, ret = {}, s0 = ARTIFACTS.nosoldiers, s1 = ARTIFACTS.jumptargets;\n                                for (k in s0) {\n                                    ret[k] = 1;\n                                }\n                                for (k in s1) {\n                                    ret[k] = 1;\n                                }\n                                return ret;\n                            }());\n                            for (k in s0) {\n                                ret[k] = 1;\n                            }\n                            for (k in s1) {\n                                ret[k] = 1;\n                            }\n                            return ret;\n                        }());\n                        for (var key in s0) {\n                            if (!s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }()))) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.jumptargets) {\n                    newlinks[linkpos] = 'selectjumptarget2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return '';\n            };\n            game.selectjumptarget2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    splashed: Object.assign({}, step.ARTIFACTS.splashed)\n                });\n                var MARKS = {\n                    selectjumptarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var filtersourcelayer = ARTIFACTS.willdie;\n                var filtersourcelayer = ARTIFACTS.splashed;\n                for (var POS in filtersourcelayer) {\n                    if (filtersourcelayer[POS]) {\n                        var filterobj = filtersourcelayer[POS];\n                        if (false || filterobj.dir === (ARTIFACTS.jumptargets[MARKS['selectjumptarget']] || {})['dir']) {\n                            filtertargetlayer[POS] = filterobj;\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectjumptarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].jump = 'jump2';\n                return newstep;\n            };\n            game.selectjumptarget2instruction = function (step) {\n                return '';\n            };\n            game.deploy2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectkingdeploy'],\n                    id: newunitid,\n                    group: 'kings',\n                    owner: player\n                };\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"nokings\": {},\n                    \"nosoldiers\": {},\n                    \"kingwalk\": {},\n                    \"adjacentenemies\": {},\n                    \"splashed\": {},\n                    \"willdie\": {},\n                    \"jumptargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'deploy';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'deploy',\n                    path: step.path.concat('deploy'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mykings, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else if (((turn.turn > 2) && Object.keys(UNITLAYERS.oppkings || {}).length === 0)) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'kingkill';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.deploy2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"nokings\": {},\n                    \"nosoldiers\": {},\n                    \"kingwalk\": {},\n                    \"adjacentenemies\": {},\n                    \"splashed\": {},\n                    \"willdie\": {},\n                    \"jumptargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mykings, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else if (((turn.turn > 2) && Object.keys(UNITLAYERS.oppkings || {}).length === 0)) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'kingkill';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.jump2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                delete UNITDATA[(UNITLAYERS.units[Object.keys(ARTIFACTS.willdie)[0]] || {}).id];\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectjumptarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"nokings\": {},\n                    \"nosoldiers\": {},\n                    \"kingwalk\": {},\n                    \"adjacentenemies\": {},\n                    \"splashed\": {},\n                    \"willdie\": {},\n                    \"jumptargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'jump';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'jump',\n                    path: step.path.concat('jump')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mykings, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else if (((turn.turn > 2) && Object.keys(UNITLAYERS.oppkings || {}).length === 0)) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'kingkill';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.jump2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"nokings\": {},\n                    \"nosoldiers\": {},\n                    \"kingwalk\": {},\n                    \"adjacentenemies\": {},\n                    \"splashed\": {},\n                    \"willdie\": {},\n                    \"jumptargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                for (var STARTPOS in (function () {\n                    var ret = {}, s0 = TERRAIN.edges, s1 = UNITLAYERS.mysoldiers;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())) {\n                    var neighbourdirs = (!!(TERRAIN.homerow[STARTPOS]) ? [1, 3, 5, 7] : [1, 5]);\n                    var nbrofneighbourdirs = neighbourdirs.length;\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS) {\n                            ARTIFACTS['nokings'][POS] = {};\n                        }\n                    }\n                }\n                for (var STARTPOS in UNITLAYERS.mykings) {\n                    var neighbourdirs = [1, 3, 5, 7];\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS && (!!(TERRAIN.homerow[POS]) || (!!(TERRAIN.edges[STARTPOS]) && !!(TERRAIN.edges[POS])))) {\n                            ARTIFACTS['nosoldiers'][POS] = {};\n                        }\n                    }\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                if ((turn.turn > 2)) {\n                    var newlinks = turn.links.root;\n                    for (var linkpos in UNITLAYERS.myunits) {\n                        newlinks[linkpos] = 'selectunit2';\n                    }\n                }\n                else {\n                    var newlinks = turn.links.root;\n                    for (var linkpos in (function () {\n                        var ret = {}, s0 = BOARD.board, s1 = (function () {\n                            var k, ret = {}, s0 = UNITLAYERS.units, s1 = ARTIFACTS.nokings;\n                            for (k in s0) {\n                                ret[k] = 1;\n                            }\n                            for (k in s1) {\n                                ret[k] = 1;\n                            }\n                            return ret;\n                        }());\n                        for (var key in s0) {\n                            if (!s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())) {\n                        newlinks[linkpos] = 'selectkingdeploy2';\n                    }\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), jostle: (function () {\n        var game = {};\n        game.commands = {\n            \"jostle\": 1\n        };\n        game.graphics = {\n            \"icons\": {\n                \"checkers\": \"pawns\"\n            }\n        };\n        game.board = {\n            \"height\": 10,\n            \"width\": 10\n        };\n        game.AI = [];\n        game.id = \"jostle\";\n        var boardDef = {\n            \"height\": 10,\n            \"width\": 10\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        var TERRAIN = terrainLayers(boardDef, 0);\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"checkers\": {\n                        \"1\": [\"c4\", \"c6\", \"c8\", \"d3\", \"d5\", \"d7\", \"e4\", \"e8\", \"f3\", \"f7\", \"g4\", \"g6\", \"g8\", \"h3\", \"h5\", \"h7\"],\n                        \"2\": [\"c3\", \"c5\", \"c7\", \"d4\", \"d6\", \"d8\", \"e3\", \"e7\", \"f4\", \"f8\", \"g3\", \"g5\", \"g7\", \"h4\", \"h6\", \"h8\"]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets),\n                    initialenemy: Object.assign({}, step.ARTIFACTS.initialenemy),\n                    initialfriend: Object.assign({}, step.ARTIFACTS.initialfriend)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS) {\n                        ARTIFACTS[(!(UNITLAYERS.units[POS]) ? 'movetargets' : (!!(UNITLAYERS.oppunits[POS]) ? 'initialenemy' : 'initialfriend'))][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                var ARTIFACTS = step.ARTIFACTS;\n                return (('The current position is worth ' + '') + (Object.keys(ARTIFACTS.initialfriend).length - Object.keys(ARTIFACTS.initialenemy).length));\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    newenemy: Object.assign({}, step.ARTIFACTS.newenemy),\n                    newfriend: Object.assign({}, step.ARTIFACTS.newfriend)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var STARTPOS = MARKS['selectmovetarget'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && UNITLAYERS.units[POS]) {\n                        ARTIFACTS[(!!(UNITLAYERS.oppunits[POS]) ? 'newenemy' : 'newfriend')][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                if ((Object.keys(ARTIFACTS.newfriend).length - (1 + Object.keys(ARTIFACTS.newenemy).length) > Object.keys(ARTIFACTS.initialfriend).length - Object.keys(ARTIFACTS.initialenemy).length)) {\n                    turn.links[newstepid].jostle = 'jostle1';\n                }\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                var ARTIFACTS = step.ARTIFACTS;\n                return (('That position would be worth ' + '') + (Object.keys(ARTIFACTS.newfriend).length - (1 + Object.keys(ARTIFACTS.newenemy).length)));\n            };\n            game.jostle1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"checkers\": {},\n                    \"mycheckers\": {},\n                    \"oppcheckers\": {},\n                    \"neutralcheckers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"initialenemy\": {},\n                    \"initialfriend\": {},\n                    \"newenemy\": {},\n                    \"newfriend\": {}\n                };\n                var newstepid = step.stepid + '-' + 'jostle';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'jostle',\n                    path: step.path.concat('jostle')\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.jostle1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"initialenemy\": {},\n                    \"initialfriend\": {},\n                    \"newenemy\": {},\n                    \"newfriend\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"checkers\": {},\n                    \"mycheckers\": {},\n                    \"oppcheckers\": {},\n                    \"neutralcheckers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.mycheckers) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return 'Select which unit to jostle!';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets),\n                    initialenemy: Object.assign({}, step.ARTIFACTS.initialenemy),\n                    initialfriend: Object.assign({}, step.ARTIFACTS.initialfriend)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS) {\n                        ARTIFACTS[(!(UNITLAYERS.units[POS]) ? 'movetargets' : (!!(UNITLAYERS.oppunits[POS]) ? 'initialenemy' : 'initialfriend'))][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                var ARTIFACTS = step.ARTIFACTS;\n                return (('The current position is worth ' + '') + (Object.keys(ARTIFACTS.initialfriend).length - Object.keys(ARTIFACTS.initialenemy).length));\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    newenemy: Object.assign({}, step.ARTIFACTS.newenemy),\n                    newfriend: Object.assign({}, step.ARTIFACTS.newfriend)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var STARTPOS = MARKS['selectmovetarget'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && UNITLAYERS.units[POS]) {\n                        ARTIFACTS[(!!(UNITLAYERS.oppunits[POS]) ? 'newenemy' : 'newfriend')][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                if ((Object.keys(ARTIFACTS.newfriend).length - (1 + Object.keys(ARTIFACTS.newenemy).length) > Object.keys(ARTIFACTS.initialfriend).length - Object.keys(ARTIFACTS.initialenemy).length)) {\n                    turn.links[newstepid].jostle = 'jostle2';\n                }\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                var ARTIFACTS = step.ARTIFACTS;\n                return (('That position would be worth ' + '') + (Object.keys(ARTIFACTS.newfriend).length - (1 + Object.keys(ARTIFACTS.newenemy).length)));\n            };\n            game.jostle2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"checkers\": {},\n                    \"mycheckers\": {},\n                    \"oppcheckers\": {},\n                    \"neutralcheckers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"initialenemy\": {},\n                    \"initialfriend\": {},\n                    \"newenemy\": {},\n                    \"newfriend\": {}\n                };\n                var newstepid = step.stepid + '-' + 'jostle';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'jostle',\n                    path: step.path.concat('jostle')\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.jostle2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"initialenemy\": {},\n                    \"initialfriend\": {},\n                    \"newenemy\": {},\n                    \"newfriend\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"checkers\": {},\n                    \"mycheckers\": {},\n                    \"oppcheckers\": {},\n                    \"neutralcheckers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.mycheckers) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return 'Select which unit to jostle!';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), kickrun: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1\n        };\n        game.graphics = {\n            \"tiles\": {\n                \"corners\": \"playercolour\"\n            },\n            \"icons\": {\n                \"runners\": \"bishops\",\n                \"sidekickers\": \"pawns\"\n            }\n        };\n        game.board = {\n            \"height\": 5,\n            \"width\": 5,\n            \"terrain\": {\n                \"corners\": {\n                    \"1\": [\"a1\"],\n                    \"2\": [\"e5\"]\n                }\n            }\n        };\n        game.AI = [];\n        game.id = \"kickrun\";\n        var boardDef = {\n            \"height\": 5,\n            \"width\": 5,\n            \"terrain\": {\n                \"corners\": {\n                    \"1\": [\"a1\"],\n                    \"2\": [\"e5\"]\n                }\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"runners\": {\n                        \"1\": [\"a2\", \"b1\"],\n                        \"2\": [\"d5\", \"e4\"]\n                    },\n                    \"sidekickers\": {\n                        \"1\": [\"a1\", \"c1\", \"a3\"],\n                        \"2\": [\"c5\", \"e5\", \"e3\"]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = MARKS['selectunit'];\n                var allwalkerdirs = (!!(UNITLAYERS.myrunners[MARKS['selectunit']]) ? [1, 2, 3] : [8, 1, 3, 4]);\n                var nbrofwalkerdirs = allwalkerdirs.length;\n                for (var walkerdirnbr = 0; walkerdirnbr < nbrofwalkerdirs; walkerdirnbr++) {\n                    var DIR = allwalkerdirs[walkerdirnbr];\n                    var MAX = (!!(UNITLAYERS.myrunners[MARKS['selectunit']]) ? 4 : 1);\n                    var POS = STARTPOS;\n                    var LENGTH = 0;\n                    while (LENGTH < MAX && (POS = connections[POS][DIR]) && !BLOCKS[POS]) {\n                        LENGTH++;\n                        if (((DIR !== 8) && (DIR !== 4))) {\n                            ARTIFACTS['movetargets'][POS] = {};\n                        }\n                    }\n                    if (BLOCKS[POS]) {\n                        if ((!!(UNITLAYERS.oppunits[POS]) && ((DIR === 8) || (DIR === 4)))) {\n                            ARTIFACTS['movetargets'][POS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"runners\": {},\n                    \"myrunners\": {},\n                    \"opprunners\": {},\n                    \"neutralrunners\": {},\n                    \"sidekickers\": {},\n                    \"mysidekickers\": {},\n                    \"oppsidekickers\": {},\n                    \"neutralsidekickers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myrunners, s1 = TERRAIN.oppcorners;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"runners\": {},\n                    \"myrunners\": {},\n                    \"opprunners\": {},\n                    \"neutralrunners\": {},\n                    \"sidekickers\": {},\n                    \"mysidekickers\": {},\n                    \"oppsidekickers\": {},\n                    \"neutralsidekickers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = MARKS['selectunit'];\n                var allwalkerdirs = (!!(UNITLAYERS.myrunners[MARKS['selectunit']]) ? [5, 6, 7] : [4, 5, 7, 8]);\n                var nbrofwalkerdirs = allwalkerdirs.length;\n                for (var walkerdirnbr = 0; walkerdirnbr < nbrofwalkerdirs; walkerdirnbr++) {\n                    var DIR = allwalkerdirs[walkerdirnbr];\n                    var MAX = (!!(UNITLAYERS.myrunners[MARKS['selectunit']]) ? 4 : 1);\n                    var POS = STARTPOS;\n                    var LENGTH = 0;\n                    while (LENGTH < MAX && (POS = connections[POS][DIR]) && !BLOCKS[POS]) {\n                        LENGTH++;\n                        if (((DIR !== 8) && (DIR !== 4))) {\n                            ARTIFACTS['movetargets'][POS] = {};\n                        }\n                    }\n                    if (BLOCKS[POS]) {\n                        if ((!!(UNITLAYERS.oppunits[POS]) && ((DIR === 8) || (DIR === 4)))) {\n                            ARTIFACTS['movetargets'][POS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"runners\": {},\n                    \"myrunners\": {},\n                    \"opprunners\": {},\n                    \"neutralrunners\": {},\n                    \"sidekickers\": {},\n                    \"mysidekickers\": {},\n                    \"oppsidekickers\": {},\n                    \"neutralsidekickers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myrunners, s1 = TERRAIN.oppcorners;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"runners\": {},\n                    \"myrunners\": {},\n                    \"opprunners\": {},\n                    \"neutralrunners\": {},\n                    \"sidekickers\": {},\n                    \"mysidekickers\": {},\n                    \"oppsidekickers\": {},\n                    \"neutralsidekickers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), krieg: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1\n        };\n        game.graphics = {\n            \"tiles\": {\n                \"corners\": \"playercolour\",\n                \"bases\": \"castle\"\n            },\n            \"icons\": {\n                \"notfrozens\": \"knights\",\n                \"frozens\": \"rooks\"\n            }\n        };\n        game.board = {\n            \"width\": 4,\n            \"height\": 4,\n            \"terrain\": {\n                \"southeast\": [\"a4\", \"c2\"],\n                \"northwest\": [\"b3\", \"d1\"],\n                \"corners\": {\n                    \"1\": [\"a4\"],\n                    \"2\": [\"d1\"]\n                },\n                \"bases\": {\n                    \"1\": [\"b4\", \"a3\", \"b3\"],\n                    \"2\": [\"c2\", \"d2\", \"c1\"]\n                }\n            }\n        };\n        game.AI = [\"Fred\"];\n        game.id = \"krieg\";\n        var boardDef = {\n            \"width\": 4,\n            \"height\": 4,\n            \"terrain\": {\n                \"southeast\": [\"a4\", \"c2\"],\n                \"northwest\": [\"b3\", \"d1\"],\n                \"corners\": {\n                    \"1\": [\"a4\"],\n                    \"2\": [\"d1\"]\n                },\n                \"bases\": {\n                    \"1\": [\"b4\", \"a3\", \"b3\"],\n                    \"2\": [\"c2\", \"d2\", \"c1\"]\n                }\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"notfrozens\": {\n                        \"1\": [\"a4\", \"b4\", \"a3\", \"b3\"],\n                        \"2\": [\"c2\", \"c1\", \"d2\", \"d1\"]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.brain_Fred_1 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.myfrozenguardedthreat = {};\n                ARTIFACTS.myfrozenfreethreat = {};\n                ARTIFACTS.mymoverguardedthreat = {};\n                ARTIFACTS.mymoverfreethreat = {};\n                ARTIFACTS.oppfrozenguardedthreat = {};\n                ARTIFACTS.oppfrozenfreethreat = {};\n                ARTIFACTS.oppmoverguardedthreat = {};\n                ARTIFACTS.oppmoverfreethreat = {};\n                for (var STARTPOS in UNITLAYERS.myunits) {\n                    var neighbourdirs = (!!(TERRAIN.oppbases[STARTPOS]) ? [4] : [3, 5]);\n                    var nbrofneighbourdirs = neighbourdirs.length;\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS &&\n                            (function () {\n                                var k, ret = {}, s0 = TERRAIN.oppbases, s1 = TERRAIN.oppcorners;\n                                for (k in s0) {\n                                    ret[k] = 1;\n                                }\n                                for (k in s1) {\n                                    ret[k] = 1;\n                                }\n                                return ret;\n                            }())[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.myfrozens[STARTPOS]) ? (!!(UNITLAYERS.units[POS]) ? 'myfrozenguardedthreat' : 'myfrozenfreethreat') : (!!(UNITLAYERS.units[POS]) ? 'mymoverguardedthreat' : 'mymoverfreethreat'))][POS] = {};\n                        }\n                    }\n                }\n                for (var STARTPOS in UNITLAYERS.oppunits) {\n                    var neighbourdirs = (!!(TERRAIN.mybases[STARTPOS]) ? [8] : [7, 1]);\n                    var nbrofneighbourdirs = neighbourdirs.length;\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS &&\n                            (function () {\n                                var k, ret = {}, s0 = TERRAIN.mybases, s1 = TERRAIN.mycorners;\n                                for (k in s0) {\n                                    ret[k] = 1;\n                                }\n                                for (k in s1) {\n                                    ret[k] = 1;\n                                }\n                                return ret;\n                            }())[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.oppfrozens[STARTPOS]) ? (!!(UNITLAYERS.units[POS]) ? 'oppfrozenguardedthreat' : 'oppfrozenfreethreat') : (!!(UNITLAYERS.units[POS]) ? 'oppmoverguardedthreat' : 'oppmoverfreethreat'))][POS] = {};\n                        }\n                    }\n                }\n                return Object.keys(ARTIFACTS.myfrozenguardedthreat).length + 2 * Object.keys(ARTIFACTS.myfrozenfreethreat).length + 3 * Object.keys(ARTIFACTS.mymoverguardedthreat).length + 4 * Object.keys(ARTIFACTS.mymoverfreethreat).length + 5 * Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myfrozens, s1 = TERRAIN.oppbases;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length + 6 * Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mynotfrozens, s1 = TERRAIN.oppbases;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length - Object.keys(ARTIFACTS.oppfrozenguardedthreat).length - 2 * Object.keys(ARTIFACTS.oppfrozenfreethreat).length - 3 * Object.keys(ARTIFACTS.oppmoverguardedthreat).length - 4 * Object.keys(ARTIFACTS.oppmoverfreethreat).length - 5 * Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.oppfrozens, s1 = TERRAIN.mybases;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length - 6 * Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.oppnotfrozens, s1 = TERRAIN.mybases;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length;\n            };\n            game.brain_Fred_1_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.myfrozenguardedthreat = {};\n                ARTIFACTS.myfrozenfreethreat = {};\n                ARTIFACTS.mymoverguardedthreat = {};\n                ARTIFACTS.mymoverfreethreat = {};\n                ARTIFACTS.oppfrozenguardedthreat = {};\n                ARTIFACTS.oppfrozenfreethreat = {};\n                ARTIFACTS.oppmoverguardedthreat = {};\n                ARTIFACTS.oppmoverfreethreat = {};\n                for (var STARTPOS in UNITLAYERS.myunits) {\n                    var neighbourdirs = (!!(TERRAIN.oppbases[STARTPOS]) ? [4] : [3, 5]);\n                    var nbrofneighbourdirs = neighbourdirs.length;\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS &&\n                            (function () {\n                                var k, ret = {}, s0 = TERRAIN.oppbases, s1 = TERRAIN.oppcorners;\n                                for (k in s0) {\n                                    ret[k] = 1;\n                                }\n                                for (k in s1) {\n                                    ret[k] = 1;\n                                }\n                                return ret;\n                            }())[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.myfrozens[STARTPOS]) ? (!!(UNITLAYERS.units[POS]) ? 'myfrozenguardedthreat' : 'myfrozenfreethreat') : (!!(UNITLAYERS.units[POS]) ? 'mymoverguardedthreat' : 'mymoverfreethreat'))][POS] = {};\n                        }\n                    }\n                }\n                for (var STARTPOS in UNITLAYERS.oppunits) {\n                    var neighbourdirs = (!!(TERRAIN.mybases[STARTPOS]) ? [8] : [7, 1]);\n                    var nbrofneighbourdirs = neighbourdirs.length;\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS &&\n                            (function () {\n                                var k, ret = {}, s0 = TERRAIN.mybases, s1 = TERRAIN.mycorners;\n                                for (k in s0) {\n                                    ret[k] = 1;\n                                }\n                                for (k in s1) {\n                                    ret[k] = 1;\n                                }\n                                return ret;\n                            }())[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.oppfrozens[STARTPOS]) ? (!!(UNITLAYERS.units[POS]) ? 'oppfrozenguardedthreat' : 'oppfrozenfreethreat') : (!!(UNITLAYERS.units[POS]) ? 'oppmoverguardedthreat' : 'oppmoverfreethreat'))][POS] = {};\n                        }\n                    }\n                }\n                return {\n                    myfrozenguardedthreat: Object.keys(ARTIFACTS.myfrozenguardedthreat).length,\n                    myfrozenfreethreat: 2 * Object.keys(ARTIFACTS.myfrozenfreethreat).length,\n                    mymoverguardedthreat: 3 * Object.keys(ARTIFACTS.mymoverguardedthreat).length,\n                    mymoverfreethreat: 4 * Object.keys(ARTIFACTS.mymoverfreethreat).length,\n                    myfrozeninfiltrators: 5 * Object.keys((function () {\n                        var ret = {}, s0 = UNITLAYERS.myfrozens, s1 = TERRAIN.oppbases;\n                        for (var key in s0) {\n                            if (s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())).length,\n                    myfreeinfiltrators: 6 * Object.keys((function () {\n                        var ret = {}, s0 = UNITLAYERS.mynotfrozens, s1 = TERRAIN.oppbases;\n                        for (var key in s0) {\n                            if (s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())).length,\n                    oppfrozenguardedthreat: -Object.keys(ARTIFACTS.oppfrozenguardedthreat).length,\n                    oppfrozenfreethreat: -2 * Object.keys(ARTIFACTS.oppfrozenfreethreat).length,\n                    oppmoverguardedthreat: -3 * Object.keys(ARTIFACTS.oppmoverguardedthreat).length,\n                    oppmoverfreethreat: -4 * Object.keys(ARTIFACTS.oppmoverfreethreat).length,\n                    oppfrozeninfiltrators: -5 * Object.keys((function () {\n                        var ret = {}, s0 = UNITLAYERS.oppfrozens, s1 = TERRAIN.mybases;\n                        for (var key in s0) {\n                            if (s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())).length,\n                    oppfreeinfiltrators: -6 * Object.keys((function () {\n                        var ret = {}, s0 = UNITLAYERS.oppnotfrozens, s1 = TERRAIN.mybases;\n                        for (var key in s0) {\n                            if (s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())).length\n                };\n            };\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = (!!(TERRAIN.southeast[STARTPOS]) ? [1, 3, 4, 5, 7] : (!!(TERRAIN.northwest[STARTPOS]) ? [1, 3, 5, 7, 8] : [1, 3, 5, 7]));\n                var nbrofneighbourdirs = neighbourdirs.length;\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && !UNITLAYERS.units[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmove1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmove1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmove: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmove'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmove1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var LOOPID;\n                for (var POS in UNITLAYERS.myfrozens) {\n                    LOOPID = UNITLAYERS.myfrozens[POS].id;\n                    UNITDATA[LOOPID] = Object.assign({}, UNITDATA[LOOPID], {\n                        'group': 'notfrozens'\n                    });\n                    // TODO - check that it uses ['loopid'] ?\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'frozens'\n                    });\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmove']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"notfrozens\": {},\n                    \"mynotfrozens\": {},\n                    \"oppnotfrozens\": {},\n                    \"neutralnotfrozens\": {},\n                    \"frozens\": {},\n                    \"myfrozens\": {},\n                    \"oppfrozens\": {},\n                    \"neutralfrozens\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.oppcorners, s1 = UNITLAYERS.myunits;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'cornerinfiltration';\n                }\n                else if ((Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.oppbases, s1 = UNITLAYERS.myunits;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length === 2)) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'occupation';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"notfrozens\": {},\n                    \"mynotfrozens\": {},\n                    \"oppnotfrozens\": {},\n                    \"neutralnotfrozens\": {},\n                    \"frozens\": {},\n                    \"myfrozens\": {},\n                    \"oppfrozens\": {},\n                    \"neutralfrozens\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.mynotfrozens) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.brain_Fred_2 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.myfrozenguardedthreat = {};\n                ARTIFACTS.myfrozenfreethreat = {};\n                ARTIFACTS.mymoverguardedthreat = {};\n                ARTIFACTS.mymoverfreethreat = {};\n                ARTIFACTS.oppfrozenguardedthreat = {};\n                ARTIFACTS.oppfrozenfreethreat = {};\n                ARTIFACTS.oppmoverguardedthreat = {};\n                ARTIFACTS.oppmoverfreethreat = {};\n                for (var STARTPOS in UNITLAYERS.myunits) {\n                    var neighbourdirs = (!!(TERRAIN.oppbases[STARTPOS]) ? [8] : [7, 1]);\n                    var nbrofneighbourdirs = neighbourdirs.length;\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS &&\n                            (function () {\n                                var k, ret = {}, s0 = TERRAIN.oppbases, s1 = TERRAIN.oppcorners;\n                                for (k in s0) {\n                                    ret[k] = 1;\n                                }\n                                for (k in s1) {\n                                    ret[k] = 1;\n                                }\n                                return ret;\n                            }())[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.myfrozens[STARTPOS]) ? (!!(UNITLAYERS.units[POS]) ? 'myfrozenguardedthreat' : 'myfrozenfreethreat') : (!!(UNITLAYERS.units[POS]) ? 'mymoverguardedthreat' : 'mymoverfreethreat'))][POS] = {};\n                        }\n                    }\n                }\n                for (var STARTPOS in UNITLAYERS.oppunits) {\n                    var neighbourdirs = (!!(TERRAIN.mybases[STARTPOS]) ? [4] : [3, 5]);\n                    var nbrofneighbourdirs = neighbourdirs.length;\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS &&\n                            (function () {\n                                var k, ret = {}, s0 = TERRAIN.mybases, s1 = TERRAIN.mycorners;\n                                for (k in s0) {\n                                    ret[k] = 1;\n                                }\n                                for (k in s1) {\n                                    ret[k] = 1;\n                                }\n                                return ret;\n                            }())[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.oppfrozens[STARTPOS]) ? (!!(UNITLAYERS.units[POS]) ? 'oppfrozenguardedthreat' : 'oppfrozenfreethreat') : (!!(UNITLAYERS.units[POS]) ? 'oppmoverguardedthreat' : 'oppmoverfreethreat'))][POS] = {};\n                        }\n                    }\n                }\n                return Object.keys(ARTIFACTS.myfrozenguardedthreat).length + 2 * Object.keys(ARTIFACTS.myfrozenfreethreat).length + 3 * Object.keys(ARTIFACTS.mymoverguardedthreat).length + 4 * Object.keys(ARTIFACTS.mymoverfreethreat).length + 5 * Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myfrozens, s1 = TERRAIN.oppbases;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length + 6 * Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mynotfrozens, s1 = TERRAIN.oppbases;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length - Object.keys(ARTIFACTS.oppfrozenguardedthreat).length - 2 * Object.keys(ARTIFACTS.oppfrozenfreethreat).length - 3 * Object.keys(ARTIFACTS.oppmoverguardedthreat).length - 4 * Object.keys(ARTIFACTS.oppmoverfreethreat).length - 5 * Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.oppfrozens, s1 = TERRAIN.mybases;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length - 6 * Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.oppnotfrozens, s1 = TERRAIN.mybases;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length;\n            };\n            game.brain_Fred_2_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.myfrozenguardedthreat = {};\n                ARTIFACTS.myfrozenfreethreat = {};\n                ARTIFACTS.mymoverguardedthreat = {};\n                ARTIFACTS.mymoverfreethreat = {};\n                ARTIFACTS.oppfrozenguardedthreat = {};\n                ARTIFACTS.oppfrozenfreethreat = {};\n                ARTIFACTS.oppmoverguardedthreat = {};\n                ARTIFACTS.oppmoverfreethreat = {};\n                for (var STARTPOS in UNITLAYERS.myunits) {\n                    var neighbourdirs = (!!(TERRAIN.oppbases[STARTPOS]) ? [8] : [7, 1]);\n                    var nbrofneighbourdirs = neighbourdirs.length;\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS &&\n                            (function () {\n                                var k, ret = {}, s0 = TERRAIN.oppbases, s1 = TERRAIN.oppcorners;\n                                for (k in s0) {\n                                    ret[k] = 1;\n                                }\n                                for (k in s1) {\n                                    ret[k] = 1;\n                                }\n                                return ret;\n                            }())[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.myfrozens[STARTPOS]) ? (!!(UNITLAYERS.units[POS]) ? 'myfrozenguardedthreat' : 'myfrozenfreethreat') : (!!(UNITLAYERS.units[POS]) ? 'mymoverguardedthreat' : 'mymoverfreethreat'))][POS] = {};\n                        }\n                    }\n                }\n                for (var STARTPOS in UNITLAYERS.oppunits) {\n                    var neighbourdirs = (!!(TERRAIN.mybases[STARTPOS]) ? [4] : [3, 5]);\n                    var nbrofneighbourdirs = neighbourdirs.length;\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS &&\n                            (function () {\n                                var k, ret = {}, s0 = TERRAIN.mybases, s1 = TERRAIN.mycorners;\n                                for (k in s0) {\n                                    ret[k] = 1;\n                                }\n                                for (k in s1) {\n                                    ret[k] = 1;\n                                }\n                                return ret;\n                            }())[POS]) {\n                            ARTIFACTS[(!!(UNITLAYERS.oppfrozens[STARTPOS]) ? (!!(UNITLAYERS.units[POS]) ? 'oppfrozenguardedthreat' : 'oppfrozenfreethreat') : (!!(UNITLAYERS.units[POS]) ? 'oppmoverguardedthreat' : 'oppmoverfreethreat'))][POS] = {};\n                        }\n                    }\n                }\n                return {\n                    myfrozenguardedthreat: Object.keys(ARTIFACTS.myfrozenguardedthreat).length,\n                    myfrozenfreethreat: 2 * Object.keys(ARTIFACTS.myfrozenfreethreat).length,\n                    mymoverguardedthreat: 3 * Object.keys(ARTIFACTS.mymoverguardedthreat).length,\n                    mymoverfreethreat: 4 * Object.keys(ARTIFACTS.mymoverfreethreat).length,\n                    myfrozeninfiltrators: 5 * Object.keys((function () {\n                        var ret = {}, s0 = UNITLAYERS.myfrozens, s1 = TERRAIN.oppbases;\n                        for (var key in s0) {\n                            if (s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())).length,\n                    myfreeinfiltrators: 6 * Object.keys((function () {\n                        var ret = {}, s0 = UNITLAYERS.mynotfrozens, s1 = TERRAIN.oppbases;\n                        for (var key in s0) {\n                            if (s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())).length,\n                    oppfrozenguardedthreat: -Object.keys(ARTIFACTS.oppfrozenguardedthreat).length,\n                    oppfrozenfreethreat: -2 * Object.keys(ARTIFACTS.oppfrozenfreethreat).length,\n                    oppmoverguardedthreat: -3 * Object.keys(ARTIFACTS.oppmoverguardedthreat).length,\n                    oppmoverfreethreat: -4 * Object.keys(ARTIFACTS.oppmoverfreethreat).length,\n                    oppfrozeninfiltrators: -5 * Object.keys((function () {\n                        var ret = {}, s0 = UNITLAYERS.oppfrozens, s1 = TERRAIN.mybases;\n                        for (var key in s0) {\n                            if (s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())).length,\n                    oppfreeinfiltrators: -6 * Object.keys((function () {\n                        var ret = {}, s0 = UNITLAYERS.oppnotfrozens, s1 = TERRAIN.mybases;\n                        for (var key in s0) {\n                            if (s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())).length\n                };\n            };\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = (!!(TERRAIN.southeast[STARTPOS]) ? [1, 3, 4, 5, 7] : (!!(TERRAIN.northwest[STARTPOS]) ? [1, 3, 5, 7, 8] : [1, 3, 5, 7]));\n                var nbrofneighbourdirs = neighbourdirs.length;\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && !UNITLAYERS.units[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmove2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmove2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmove: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmove'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmove2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var LOOPID;\n                for (var POS in UNITLAYERS.myfrozens) {\n                    LOOPID = UNITLAYERS.myfrozens[POS].id;\n                    UNITDATA[LOOPID] = Object.assign({}, UNITDATA[LOOPID], {\n                        'group': 'notfrozens'\n                    });\n                    // TODO - check that it uses ['loopid'] ?\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'frozens'\n                    });\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmove']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"notfrozens\": {},\n                    \"mynotfrozens\": {},\n                    \"oppnotfrozens\": {},\n                    \"neutralnotfrozens\": {},\n                    \"frozens\": {},\n                    \"myfrozens\": {},\n                    \"oppfrozens\": {},\n                    \"neutralfrozens\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.oppcorners, s1 = UNITLAYERS.myunits;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'cornerinfiltration';\n                }\n                else if ((Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.oppbases, s1 = UNITLAYERS.myunits;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length === 2)) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'occupation';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"notfrozens\": {},\n                    \"mynotfrozens\": {},\n                    \"oppnotfrozens\": {},\n                    \"neutralnotfrozens\": {},\n                    \"frozens\": {},\n                    \"myfrozens\": {},\n                    \"oppfrozens\": {},\n                    \"neutralfrozens\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.mynotfrozens) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), murusgallicus: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1,\n            \"kill\": 1\n        };\n        game.graphics = {\n            \"tiles\": {\n                \"homerow\": \"playercolour\"\n            },\n            \"icons\": {\n                \"towers\": \"rooks\",\n                \"walls\": \"pawns\"\n            }\n        };\n        game.board = {\n            \"height\": 7,\n            \"width\": 8,\n            \"terrain\": {\n                \"homerow\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"h1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a7\", \"h7\"]\n                    ]\n                }\n            }\n        };\n        game.AI = [\"Steve\", \"Joe\", \"Clive\"];\n        game.id = \"murusgallicus\";\n        var boardDef = {\n            \"height\": 7,\n            \"width\": 8,\n            \"terrain\": {\n                \"homerow\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"h1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a7\", \"h7\"]\n                    ]\n                }\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"towers\": {\n                        \"1\": [\n                            [\"rect\", \"a1\", \"h1\"]\n                        ],\n                        \"2\": [\n                            [\"rect\", \"a7\", \"h7\"]\n                        ]\n                    }\n                }),\n                clones: 0\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1, {\n                \"threatrow\": {\n                    \"1\": [\n                        [\"rect\", \"a3\", \"h3\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a5\", \"h5\"]\n                    ]\n                }\n            });\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            var mybasic = {\n                \"h1\": 0,\n                \"g1\": 0,\n                \"f1\": 0,\n                \"e1\": 0,\n                \"d1\": 0,\n                \"c1\": 0,\n                \"b1\": 0,\n                \"a1\": 0,\n                \"h2\": 0,\n                \"g2\": 0,\n                \"f2\": 1,\n                \"e2\": 1,\n                \"d2\": 1,\n                \"c2\": 1,\n                \"b2\": 0,\n                \"a2\": 0,\n                \"h3\": 0,\n                \"g3\": 0,\n                \"f3\": 2,\n                \"e3\": 2,\n                \"d3\": 2,\n                \"c3\": 2,\n                \"b3\": 0,\n                \"a3\": 0,\n                \"h4\": 0,\n                \"g4\": 0,\n                \"f4\": 3,\n                \"e4\": 3,\n                \"d4\": 3,\n                \"c4\": 3,\n                \"b4\": 0,\n                \"a4\": 0,\n                \"h5\": 2,\n                \"g5\": 3,\n                \"f5\": 4,\n                \"e5\": 4,\n                \"d5\": 4,\n                \"c5\": 4,\n                \"b5\": 3,\n                \"a5\": 2,\n                \"h6\": 1,\n                \"g6\": 1,\n                \"f6\": 1,\n                \"e6\": 1,\n                \"d6\": 1,\n                \"c6\": 1,\n                \"b6\": 1,\n                \"a6\": 1,\n                \"h7\": 0,\n                \"g7\": 0,\n                \"f7\": 0,\n                \"e7\": 0,\n                \"d7\": 0,\n                \"c7\": 0,\n                \"b7\": 0,\n                \"a7\": 0\n            };\n            var oppbasic = {\n                \"h1\": 0,\n                \"g1\": 0,\n                \"f1\": 0,\n                \"e1\": 0,\n                \"d1\": 0,\n                \"c1\": 0,\n                \"b1\": 0,\n                \"a1\": 0,\n                \"h2\": 1,\n                \"g2\": 1,\n                \"f2\": 1,\n                \"e2\": 1,\n                \"d2\": 1,\n                \"c2\": 1,\n                \"b2\": 1,\n                \"a2\": 1,\n                \"h3\": 2,\n                \"g3\": 3,\n                \"f3\": 4,\n                \"e3\": 4,\n                \"d3\": 4,\n                \"c3\": 4,\n                \"b3\": 3,\n                \"a3\": 2,\n                \"h4\": 0,\n                \"g4\": 0,\n                \"f4\": 3,\n                \"e4\": 3,\n                \"d4\": 3,\n                \"c4\": 3,\n                \"b4\": 0,\n                \"a4\": 0,\n                \"h5\": 0,\n                \"g5\": 0,\n                \"f5\": 2,\n                \"e5\": 2,\n                \"d5\": 2,\n                \"c5\": 2,\n                \"b5\": 0,\n                \"a5\": 0,\n                \"h6\": 0,\n                \"g6\": 0,\n                \"f6\": 1,\n                \"e6\": 1,\n                \"d6\": 1,\n                \"c6\": 1,\n                \"b6\": 0,\n                \"a6\": 0,\n                \"h7\": 0,\n                \"g7\": 0,\n                \"f7\": 0,\n                \"e7\": 0,\n                \"d7\": 0,\n                \"c7\": 0,\n                \"b7\": 0,\n                \"a7\": 0\n            };\n            game.brain_Steve_1 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.oppmoves = {};\n                ARTIFACTS.oppheavythreats = {};\n                ARTIFACTS.opplightthreats = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var filtersourcelayer = TERRAIN.mythreatrow;\n                for (var POS in filtersourcelayer) {\n                    var filtersourcelayer = ARTIFACTS[(!!(UNITLAYERS.oppwalls[POS]) ? 'oppheavythreats' : 'opplightthreats')];\n                    if (filtersourcelayer[POS]) {\n                        var filterobj = filtersourcelayer[POS];\n                        if (false || !!(ARTIFACTS.oppmoves[POS])) {\n                            filtertargetlayer[POS] = filterobj;\n                        }\n                    }\n                }\n                return 2 * Object.keys(UNITLAYERS.mytowers).length + Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) + 2 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) - 10000 * Object.keys((function () {\n                    var k, ret = {}, s0 = ARTIFACTS.oppmoves, s1 = TERRAIN.myhomerow;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }())).length - 20 * Object.keys(ARTIFACTS.opplightthreats).length - 500 * Object.keys(ARTIFACTS.oppheavythreats).length;\n            };\n            game.brain_Steve_1_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.oppmoves = {};\n                ARTIFACTS.oppheavythreats = {};\n                ARTIFACTS.opplightthreats = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var filtersourcelayer = TERRAIN.mythreatrow;\n                for (var POS in filtersourcelayer) {\n                    var filtersourcelayer = ARTIFACTS[(!!(UNITLAYERS.oppwalls[POS]) ? 'oppheavythreats' : 'opplightthreats')];\n                    if (filtersourcelayer[POS]) {\n                        var filterobj = filtersourcelayer[POS];\n                        if (false || !!(ARTIFACTS.oppmoves[POS])) {\n                            filtertargetlayer[POS] = filterobj;\n                        }\n                    }\n                }\n                return {\n                    mytowercount: 2 * Object.keys(UNITLAYERS.mytowers).length,\n                    mywallpos: Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    mytowerpos: 2 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    oppwinmoves: -10000 * Object.keys((function () {\n                        var k, ret = {}, s0 = ARTIFACTS.oppmoves, s1 = TERRAIN.myhomerow;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }())).length,\n                    opplightthreats: -20 * Object.keys(ARTIFACTS.opplightthreats).length,\n                    oppheavythreats: -500 * Object.keys(ARTIFACTS.oppheavythreats).length\n                };\n            };\n            game.brain_Joe_1 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.oppmoves = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                return 2 * Object.keys(UNITLAYERS.mytowers).length + Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) + 2 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) - 100 * Object.keys((function () {\n                    var k, ret = {}, s0 = ARTIFACTS.oppmoves, s1 = TERRAIN.myhomerow;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }())).length;\n            };\n            game.brain_Joe_1_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.oppmoves = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                return {\n                    mytowercount: 2 * Object.keys(UNITLAYERS.mytowers).length,\n                    mywallpos: Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    mytowerpos: 2 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    oppwinmoves: -100 * Object.keys((function () {\n                        var k, ret = {}, s0 = ARTIFACTS.oppmoves, s1 = TERRAIN.myhomerow;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }())).length\n                };\n            };\n            game.brain_Clive_1 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.mymoves = {};\n                ARTIFACTS.oppmoves = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.oppwalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.mytowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['mymoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                return Object.keys(ARTIFACTS.mymoves).length + 3 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) + Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) - Object.keys(ARTIFACTS.oppmoves).length;\n            };\n            game.brain_Clive_1_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.mymoves = {};\n                ARTIFACTS.oppmoves = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.oppwalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.mytowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['mymoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                return {\n                    mymoves: Object.keys(ARTIFACTS.mymoves).length,\n                    mytowerpos: 3 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    mywallpos: Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    oppmoves: -Object.keys(ARTIFACTS.oppmoves).length\n                };\n            };\n            game.selecttower1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets),\n                    killtargets: Object.assign({}, step.ARTIFACTS.killtargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selecttower: markpos\n                };\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.oppunits, s1 = UNITLAYERS.mytowers;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var STARTPOS = MARKS['selecttower'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var DIR = allwalkerdirs[walkerdirnbr];\n                    var walkedsquares = [];\n                    var MAX = 2;\n                    var POS = STARTPOS;\n                    var LENGTH = 0;\n                    while (LENGTH < MAX && (POS = connections[POS][DIR]) && !BLOCKS[POS]) {\n                        walkedsquares.push(POS);\n                        LENGTH++;\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    var STEP = 0;\n                    for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                        POS = walkedsquares[walkstepper];\n                        STEP++;\n                        if (((WALKLENGTH === 2) && (STEP === 2))) {\n                            ARTIFACTS['movetargets'][POS] = {\n                                dir: DIR\n                            };\n                        }\n                    }\n                }\n                var STARTPOS = MARKS['selecttower'];\n                var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && UNITLAYERS.oppwalls[POS]) {\n                        ARTIFACTS['killtargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selecttower'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmove1';\n                }\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.killtargets) {\n                    newlinks[linkpos] = 'selectkill1';\n                }\n                return newstep;\n            };\n            game.selecttower1instruction = function (step) {\n                return '';\n            };\n            game.selectmove1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    madetowers: Object.assign({}, step.ARTIFACTS.madetowers),\n                    madewalls: Object.assign({}, step.ARTIFACTS.madewalls)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmove: markpos,\n                    selecttower: step.MARKS.selecttower\n                };\n                var STARTPOS = MARKS['selectmove'];\n                var POS = connections[STARTPOS][relativedirs[(ARTIFACTS.movetargets[MARKS['selectmove']] || {})['dir'] - 2 + 5]];\n                if (POS) {\n                    ARTIFACTS[(!!(UNITLAYERS.myunits[POS]) ? 'madetowers' : 'madewalls')][POS] = {};\n                }\n                ARTIFACTS[(!!(UNITLAYERS.myunits[MARKS['selectmove']]) ? 'madetowers' : 'madewalls')][STARTPOS] = {};\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmove'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmove1instruction = function (step) {\n                return '';\n            };\n            game.selectkill1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectkill: markpos,\n                    selecttower: step.MARKS.selecttower\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectkill'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].kill = 'kill1';\n                return newstep;\n            };\n            game.selectkill1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                delete UNITDATA[(UNITLAYERS.units[MARKS['selecttower']] || {}).id];\n                for (var POS in ARTIFACTS.madetowers) {\n                    var unitid = (UNITLAYERS.units[POS] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'group': 'towers'\n                        });\n                    }\n                }\n                for (var POS in ARTIFACTS.madewalls) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'walls',\n                        owner: 1,\n                        from: MARKS['selecttower']\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.kill1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selecttower']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'walls'\n                    });\n                }\n                delete UNITDATA[(UNITLAYERS.units[MARKS['selectkill']] || {}).id];\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'kill';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'kill',\n                    path: step.path.concat('kill')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.kill1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.mytowers) {\n                    newlinks[linkpos] = 'selecttower1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2, {\n                \"threatrow\": {\n                    \"1\": [\n                        [\"rect\", \"a3\", \"h3\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a5\", \"h5\"]\n                    ]\n                }\n            });\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            var oppbasic = {\n                \"h1\": 0,\n                \"g1\": 0,\n                \"f1\": 0,\n                \"e1\": 0,\n                \"d1\": 0,\n                \"c1\": 0,\n                \"b1\": 0,\n                \"a1\": 0,\n                \"h2\": 0,\n                \"g2\": 0,\n                \"f2\": 1,\n                \"e2\": 1,\n                \"d2\": 1,\n                \"c2\": 1,\n                \"b2\": 0,\n                \"a2\": 0,\n                \"h3\": 0,\n                \"g3\": 0,\n                \"f3\": 2,\n                \"e3\": 2,\n                \"d3\": 2,\n                \"c3\": 2,\n                \"b3\": 0,\n                \"a3\": 0,\n                \"h4\": 0,\n                \"g4\": 0,\n                \"f4\": 3,\n                \"e4\": 3,\n                \"d4\": 3,\n                \"c4\": 3,\n                \"b4\": 0,\n                \"a4\": 0,\n                \"h5\": 2,\n                \"g5\": 3,\n                \"f5\": 4,\n                \"e5\": 4,\n                \"d5\": 4,\n                \"c5\": 4,\n                \"b5\": 3,\n                \"a5\": 2,\n                \"h6\": 1,\n                \"g6\": 1,\n                \"f6\": 1,\n                \"e6\": 1,\n                \"d6\": 1,\n                \"c6\": 1,\n                \"b6\": 1,\n                \"a6\": 1,\n                \"h7\": 0,\n                \"g7\": 0,\n                \"f7\": 0,\n                \"e7\": 0,\n                \"d7\": 0,\n                \"c7\": 0,\n                \"b7\": 0,\n                \"a7\": 0\n            };\n            var mybasic = {\n                \"h1\": 0,\n                \"g1\": 0,\n                \"f1\": 0,\n                \"e1\": 0,\n                \"d1\": 0,\n                \"c1\": 0,\n                \"b1\": 0,\n                \"a1\": 0,\n                \"h2\": 1,\n                \"g2\": 1,\n                \"f2\": 1,\n                \"e2\": 1,\n                \"d2\": 1,\n                \"c2\": 1,\n                \"b2\": 1,\n                \"a2\": 1,\n                \"h3\": 2,\n                \"g3\": 3,\n                \"f3\": 4,\n                \"e3\": 4,\n                \"d3\": 4,\n                \"c3\": 4,\n                \"b3\": 3,\n                \"a3\": 2,\n                \"h4\": 0,\n                \"g4\": 0,\n                \"f4\": 3,\n                \"e4\": 3,\n                \"d4\": 3,\n                \"c4\": 3,\n                \"b4\": 0,\n                \"a4\": 0,\n                \"h5\": 0,\n                \"g5\": 0,\n                \"f5\": 2,\n                \"e5\": 2,\n                \"d5\": 2,\n                \"c5\": 2,\n                \"b5\": 0,\n                \"a5\": 0,\n                \"h6\": 0,\n                \"g6\": 0,\n                \"f6\": 1,\n                \"e6\": 1,\n                \"d6\": 1,\n                \"c6\": 1,\n                \"b6\": 0,\n                \"a6\": 0,\n                \"h7\": 0,\n                \"g7\": 0,\n                \"f7\": 0,\n                \"e7\": 0,\n                \"d7\": 0,\n                \"c7\": 0,\n                \"b7\": 0,\n                \"a7\": 0\n            };\n            game.brain_Steve_2 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.oppmoves = {};\n                ARTIFACTS.oppheavythreats = {};\n                ARTIFACTS.opplightthreats = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var filtersourcelayer = TERRAIN.mythreatrow;\n                for (var POS in filtersourcelayer) {\n                    var filtersourcelayer = ARTIFACTS[(!!(UNITLAYERS.oppwalls[POS]) ? 'oppheavythreats' : 'opplightthreats')];\n                    if (filtersourcelayer[POS]) {\n                        var filterobj = filtersourcelayer[POS];\n                        if (false || !!(ARTIFACTS.oppmoves[POS])) {\n                            filtertargetlayer[POS] = filterobj;\n                        }\n                    }\n                }\n                return 2 * Object.keys(UNITLAYERS.mytowers).length + Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) + 2 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) - 10000 * Object.keys((function () {\n                    var k, ret = {}, s0 = ARTIFACTS.oppmoves, s1 = TERRAIN.myhomerow;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }())).length - 20 * Object.keys(ARTIFACTS.opplightthreats).length - 500 * Object.keys(ARTIFACTS.oppheavythreats).length;\n            };\n            game.brain_Steve_2_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.oppmoves = {};\n                ARTIFACTS.oppheavythreats = {};\n                ARTIFACTS.opplightthreats = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var filtersourcelayer = TERRAIN.mythreatrow;\n                for (var POS in filtersourcelayer) {\n                    var filtersourcelayer = ARTIFACTS[(!!(UNITLAYERS.oppwalls[POS]) ? 'oppheavythreats' : 'opplightthreats')];\n                    if (filtersourcelayer[POS]) {\n                        var filterobj = filtersourcelayer[POS];\n                        if (false || !!(ARTIFACTS.oppmoves[POS])) {\n                            filtertargetlayer[POS] = filterobj;\n                        }\n                    }\n                }\n                return {\n                    mytowercount: 2 * Object.keys(UNITLAYERS.mytowers).length,\n                    mywallpos: Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    mytowerpos: 2 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    oppwinmoves: -10000 * Object.keys((function () {\n                        var k, ret = {}, s0 = ARTIFACTS.oppmoves, s1 = TERRAIN.myhomerow;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }())).length,\n                    opplightthreats: -20 * Object.keys(ARTIFACTS.opplightthreats).length,\n                    oppheavythreats: -500 * Object.keys(ARTIFACTS.oppheavythreats).length\n                };\n            };\n            game.brain_Joe_2 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.oppmoves = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                return 2 * Object.keys(UNITLAYERS.mytowers).length + Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) + 2 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) - 100 * Object.keys((function () {\n                    var k, ret = {}, s0 = ARTIFACTS.oppmoves, s1 = TERRAIN.myhomerow;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }())).length;\n            };\n            game.brain_Joe_2_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.oppmoves = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                return {\n                    mytowercount: 2 * Object.keys(UNITLAYERS.mytowers).length,\n                    mywallpos: Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    mytowerpos: 2 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    oppwinmoves: -100 * Object.keys((function () {\n                        var k, ret = {}, s0 = ARTIFACTS.oppmoves, s1 = TERRAIN.myhomerow;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }())).length\n                };\n            };\n            game.brain_Clive_2 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.mymoves = {};\n                ARTIFACTS.oppmoves = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.oppwalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.mytowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['mymoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                return Object.keys(ARTIFACTS.mymoves).length + 3 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) + Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                    return mem + (mybasic[pos] || 0);\n                }, 0) - Object.keys(ARTIFACTS.oppmoves).length;\n            };\n            game.brain_Clive_2_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                ARTIFACTS.mymoves = {};\n                ARTIFACTS.oppmoves = {};\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.oppwalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.mytowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['mymoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.towers, s1 = UNITLAYERS.mywalls;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = UNITLAYERS.opptowers;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var MAX = 2;\n                        var POS = STARTPOS;\n                        var LENGTH = 0;\n                        while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                            walkedsquares.push(POS);\n                            LENGTH++;\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var STEP = 0;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            STEP++;\n                            if (((WALKLENGTH === 2) && (STEP === 2))) {\n                                ARTIFACTS['oppmoves'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                return {\n                    mymoves: Object.keys(ARTIFACTS.mymoves).length,\n                    mytowerpos: 3 * Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    mywallpos: Object.keys(UNITLAYERS.mytowers).reduce(function (mem, pos) {\n                        return mem + (mybasic[pos] || 0);\n                    }, 0),\n                    oppmoves: -Object.keys(ARTIFACTS.oppmoves).length\n                };\n            };\n            game.selecttower2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets),\n                    killtargets: Object.assign({}, step.ARTIFACTS.killtargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selecttower: markpos\n                };\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.oppunits, s1 = UNITLAYERS.mytowers;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var STARTPOS = MARKS['selecttower'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var DIR = allwalkerdirs[walkerdirnbr];\n                    var walkedsquares = [];\n                    var MAX = 2;\n                    var POS = STARTPOS;\n                    var LENGTH = 0;\n                    while (LENGTH < MAX && (POS = connections[POS][DIR]) && !BLOCKS[POS]) {\n                        walkedsquares.push(POS);\n                        LENGTH++;\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    var STEP = 0;\n                    for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                        POS = walkedsquares[walkstepper];\n                        STEP++;\n                        if (((WALKLENGTH === 2) && (STEP === 2))) {\n                            ARTIFACTS['movetargets'][POS] = {\n                                dir: DIR\n                            };\n                        }\n                    }\n                }\n                var STARTPOS = MARKS['selecttower'];\n                var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && UNITLAYERS.oppwalls[POS]) {\n                        ARTIFACTS['killtargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selecttower'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmove2';\n                }\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.killtargets) {\n                    newlinks[linkpos] = 'selectkill2';\n                }\n                return newstep;\n            };\n            game.selecttower2instruction = function (step) {\n                return '';\n            };\n            game.selectmove2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    madetowers: Object.assign({}, step.ARTIFACTS.madetowers),\n                    madewalls: Object.assign({}, step.ARTIFACTS.madewalls)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmove: markpos,\n                    selecttower: step.MARKS.selecttower\n                };\n                var STARTPOS = MARKS['selectmove'];\n                var POS = connections[STARTPOS][relativedirs[(ARTIFACTS.movetargets[MARKS['selectmove']] || {})['dir'] - 2 + 5]];\n                if (POS) {\n                    ARTIFACTS[(!!(UNITLAYERS.myunits[POS]) ? 'madetowers' : 'madewalls')][POS] = {};\n                }\n                ARTIFACTS[(!!(UNITLAYERS.myunits[MARKS['selectmove']]) ? 'madetowers' : 'madewalls')][STARTPOS] = {};\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmove'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmove2instruction = function (step) {\n                return '';\n            };\n            game.selectkill2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectkill: markpos,\n                    selecttower: step.MARKS.selecttower\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectkill'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].kill = 'kill2';\n                return newstep;\n            };\n            game.selectkill2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                delete UNITDATA[(UNITLAYERS.units[MARKS['selecttower']] || {}).id];\n                for (var POS in ARTIFACTS.madetowers) {\n                    var unitid = (UNITLAYERS.units[POS] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'group': 'towers'\n                        });\n                    }\n                }\n                for (var POS in ARTIFACTS.madewalls) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'walls',\n                        owner: 2,\n                        from: MARKS['selecttower']\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.kill2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selecttower']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'walls'\n                    });\n                }\n                delete UNITDATA[(UNITLAYERS.units[MARKS['selectkill']] || {}).id];\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'kill';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'kill',\n                    path: step.path.concat('kill')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.kill2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.mytowers) {\n                    newlinks[linkpos] = 'selecttower2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), murusgallicusadvanced: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1,\n            \"kill\": 1,\n            \"sacrifice\": 1,\n            \"fire\": 1\n        };\n        game.graphics = {\n            \"tiles\": {\n                \"homerow\": \"playercolour\"\n            },\n            \"icons\": {\n                \"towers\": \"rooks\",\n                \"walls\": \"pawns\",\n                \"catapults\": \"queens\"\n            }\n        };\n        game.board = {\n            \"height\": 7,\n            \"width\": 8,\n            \"terrain\": {\n                \"homerow\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"h1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a7\", \"h7\"]\n                    ]\n                }\n            }\n        };\n        game.AI = [];\n        game.id = \"murusgallicusadvanced\";\n        var boardDef = {\n            \"height\": 7,\n            \"width\": 8,\n            \"terrain\": {\n                \"homerow\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"h1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a7\", \"h7\"]\n                    ]\n                }\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"towers\": {\n                        \"1\": [\n                            [\"rect\", \"a1\", \"h1\"]\n                        ],\n                        \"2\": [\n                            [\"rect\", \"a7\", \"h7\"]\n                        ]\n                    }\n                }),\n                clones: 0\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selecttower1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets),\n                    killtargets: Object.assign({}, step.ARTIFACTS.killtargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selecttower: markpos\n                };\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.oppunits, s1 = UNITLAYERS.mycatapults;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var STARTPOS = MARKS['selecttower'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var DIR = allwalkerdirs[walkerdirnbr];\n                    var walkedsquares = [];\n                    var MAX = 2;\n                    var POS = STARTPOS;\n                    var LENGTH = 0;\n                    while (LENGTH < MAX && (POS = connections[POS][DIR]) && !BLOCKS[POS]) {\n                        walkedsquares.push(POS);\n                        LENGTH++;\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    var STEP = 0;\n                    for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                        POS = walkedsquares[walkstepper];\n                        STEP++;\n                        if (((WALKLENGTH === 2) && (STEP === 2))) {\n                            ARTIFACTS['movetargets'][POS] = {\n                                dir: DIR\n                            };\n                        }\n                    }\n                }\n                var STARTPOS = MARKS['selecttower'];\n                var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS &&\n                        (function () {\n                            var k, ret = {}, s0 = UNITLAYERS.oppcatapults, s1 = UNITLAYERS.oppwalls;\n                            for (k in s0) {\n                                ret[k] = 1;\n                            }\n                            for (k in s1) {\n                                ret[k] = 1;\n                            }\n                            return ret;\n                        }())[POS]) {\n                        ARTIFACTS['killtargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selecttower'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmove1';\n                }\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.killtargets) {\n                    newlinks[linkpos] = 'selectkill1';\n                }\n                return newstep;\n            };\n            game.selecttower1instruction = function (step) {\n                return '';\n            };\n            game.selectmove1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    madecatapults: Object.assign({}, step.ARTIFACTS.madecatapults),\n                    madetowers: Object.assign({}, step.ARTIFACTS.madetowers),\n                    madewalls: Object.assign({}, step.ARTIFACTS.madewalls)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmove: markpos,\n                    selecttower: step.MARKS.selecttower\n                };\n                var STARTPOS = MARKS['selectmove'];\n                var POS = connections[STARTPOS][relativedirs[(ARTIFACTS.movetargets[MARKS['selectmove']] || {})['dir'] - 2 + 5]];\n                if (POS) {\n                    ARTIFACTS[(!!(UNITLAYERS.myunits[POS]) ? (!!(UNITLAYERS.mytowers[POS]) ? 'madecatapults' : 'madetowers') : 'madewalls')][POS] = {};\n                }\n                ARTIFACTS[(!!(UNITLAYERS.myunits[MARKS['selectmove']]) ? (!!(UNITLAYERS.mytowers[MARKS['selectmove']]) ? 'madecatapults' : 'madetowers') : 'madewalls')][STARTPOS] = {};\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmove'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmove1instruction = function (step) {\n                return '';\n            };\n            game.selectkill1 = function (turn, step, markpos) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectkill: markpos,\n                    selecttower: step.MARKS.selecttower\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectkill'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].kill = 'kill1';\n                if (!!(UNITLAYERS.oppcatapults[MARKS['selectkill']])) {\n                    turn.links[newstepid].sacrifice = 'sacrifice1';\n                }\n                return newstep;\n            };\n            game.selectkill1instruction = function (step) {\n                return '';\n            };\n            game.selectcatapult1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    firetargets: Object.assign({}, step.ARTIFACTS.firetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectcatapult: markpos\n                };\n                var STARTPOS = MARKS['selectcatapult'];\n                var allwalkerdirs = [7, 8, 1, 2, 3];\n                for (var walkerdirnbr = 0; walkerdirnbr < 5; walkerdirnbr++) {\n                    var MAX = 3;\n                    var POS = STARTPOS;\n                    var LENGTH = 0;\n                    var STEP = 0;\n                    while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]])) {\n                        LENGTH++;\n                        STEP++;\n                        if (((STEP > 1) && !(UNITLAYERS.myunits[POS]))) {\n                            ARTIFACTS['firetargets'][POS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectcatapult'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.firetargets) {\n                    newlinks[linkpos] = 'selectfire1';\n                }\n                return newstep;\n            };\n            game.selectcatapult1instruction = function (step) {\n                return '';\n            };\n            game.selectfire1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectfire: markpos,\n                    selectcatapult: step.MARKS.selectcatapult\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectfire'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].fire = 'fire1';\n                return newstep;\n            };\n            game.selectfire1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                delete UNITDATA[(UNITLAYERS.units[MARKS['selecttower']] || {}).id];\n                for (var POS in ARTIFACTS.madecatapults) {\n                    var unitid = (UNITLAYERS.units[POS] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'group': 'catapults'\n                        });\n                    }\n                }\n                for (var POS in ARTIFACTS.madetowers) {\n                    var unitid = (UNITLAYERS.units[POS] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'group': 'towers'\n                        });\n                    }\n                }\n                for (var POS in ARTIFACTS.madewalls) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'walls',\n                        owner: 1,\n                        from: MARKS['selecttower']\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"catapults\": {},\n                    \"mycatapults\": {},\n                    \"oppcatapults\": {},\n                    \"neutralcatapults\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"firetargets\": {},\n                    \"movetargets\": {},\n                    \"madecatapults\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.kill1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selecttower']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'walls'\n                    });\n                }\n                if (!!(UNITLAYERS.oppcatapults[MARKS['selectkill']])) {\n                    var unitid = (UNITLAYERS.units[MARKS['selectkill']] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'group': 'towers'\n                        });\n                    }\n                }\n                else {\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectkill']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"catapults\": {},\n                    \"mycatapults\": {},\n                    \"oppcatapults\": {},\n                    \"neutralcatapults\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"firetargets\": {},\n                    \"movetargets\": {},\n                    \"madecatapults\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'kill';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'kill',\n                    path: step.path.concat('kill')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.kill1instruction = function (step) {\n                return '';\n            };\n            game.sacrifice1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectkill']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'walls'\n                    });\n                }\n                delete UNITDATA[(UNITLAYERS.units[MARKS['selecttower']] || {}).id];\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"catapults\": {},\n                    \"mycatapults\": {},\n                    \"oppcatapults\": {},\n                    \"neutralcatapults\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"firetargets\": {},\n                    \"movetargets\": {},\n                    \"madecatapults\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'sacrifice';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'sacrifice',\n                    path: step.path.concat('sacrifice')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.sacrifice1instruction = function (step) {\n                return '';\n            };\n            game.fire1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                if (!!(UNITLAYERS.oppwalls[MARKS['selectfire']])) {\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectfire']] || {}).id];\n                }\n                else {\n                    if (!!(UNITLAYERS.oppunits[MARKS['selectfire']])) {\n                        var unitid = (UNITLAYERS.units[MARKS['selectfire']] || {}).id;\n                        if (unitid) {\n                            UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                                'group': (!!(UNITLAYERS.oppcatapults[MARKS['selectfire']]) ? 'towers' : 'walls')\n                            });\n                        }\n                    }\n                    else {\n                        var newunitid = 'spawn' + (clones++);\n                        UNITDATA[newunitid] = {\n                            pos: MARKS['selectfire'],\n                            id: newunitid,\n                            group: 'walls',\n                            owner: 1,\n                            from: MARKS['selectcatapult']\n                        };\n                    }\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectcatapult']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'towers'\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"catapults\": {},\n                    \"mycatapults\": {},\n                    \"oppcatapults\": {},\n                    \"neutralcatapults\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"firetargets\": {},\n                    \"movetargets\": {},\n                    \"madecatapults\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'fire';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'fire',\n                    path: step.path.concat('fire'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.fire1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"firetargets\": {},\n                    \"movetargets\": {},\n                    \"madecatapults\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"catapults\": {},\n                    \"mycatapults\": {},\n                    \"oppcatapults\": {},\n                    \"neutralcatapults\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.mytowers) {\n                    newlinks[linkpos] = 'selecttower1';\n                }\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.mycatapults) {\n                    newlinks[linkpos] = 'selectcatapult1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selecttower2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets),\n                    killtargets: Object.assign({}, step.ARTIFACTS.killtargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selecttower: markpos\n                };\n                var BLOCKS = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.oppunits, s1 = UNITLAYERS.mycatapults;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var STARTPOS = MARKS['selecttower'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var DIR = allwalkerdirs[walkerdirnbr];\n                    var walkedsquares = [];\n                    var MAX = 2;\n                    var POS = STARTPOS;\n                    var LENGTH = 0;\n                    while (LENGTH < MAX && (POS = connections[POS][DIR]) && !BLOCKS[POS]) {\n                        walkedsquares.push(POS);\n                        LENGTH++;\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    var STEP = 0;\n                    for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                        POS = walkedsquares[walkstepper];\n                        STEP++;\n                        if (((WALKLENGTH === 2) && (STEP === 2))) {\n                            ARTIFACTS['movetargets'][POS] = {\n                                dir: DIR\n                            };\n                        }\n                    }\n                }\n                var STARTPOS = MARKS['selecttower'];\n                var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS &&\n                        (function () {\n                            var k, ret = {}, s0 = UNITLAYERS.oppcatapults, s1 = UNITLAYERS.oppwalls;\n                            for (k in s0) {\n                                ret[k] = 1;\n                            }\n                            for (k in s1) {\n                                ret[k] = 1;\n                            }\n                            return ret;\n                        }())[POS]) {\n                        ARTIFACTS['killtargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selecttower'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmove2';\n                }\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.killtargets) {\n                    newlinks[linkpos] = 'selectkill2';\n                }\n                return newstep;\n            };\n            game.selecttower2instruction = function (step) {\n                return '';\n            };\n            game.selectmove2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    madecatapults: Object.assign({}, step.ARTIFACTS.madecatapults),\n                    madetowers: Object.assign({}, step.ARTIFACTS.madetowers),\n                    madewalls: Object.assign({}, step.ARTIFACTS.madewalls)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmove: markpos,\n                    selecttower: step.MARKS.selecttower\n                };\n                var STARTPOS = MARKS['selectmove'];\n                var POS = connections[STARTPOS][relativedirs[(ARTIFACTS.movetargets[MARKS['selectmove']] || {})['dir'] - 2 + 5]];\n                if (POS) {\n                    ARTIFACTS[(!!(UNITLAYERS.myunits[POS]) ? (!!(UNITLAYERS.mytowers[POS]) ? 'madecatapults' : 'madetowers') : 'madewalls')][POS] = {};\n                }\n                ARTIFACTS[(!!(UNITLAYERS.myunits[MARKS['selectmove']]) ? (!!(UNITLAYERS.mytowers[MARKS['selectmove']]) ? 'madecatapults' : 'madetowers') : 'madewalls')][STARTPOS] = {};\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmove'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmove2instruction = function (step) {\n                return '';\n            };\n            game.selectkill2 = function (turn, step, markpos) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectkill: markpos,\n                    selecttower: step.MARKS.selecttower\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectkill'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].kill = 'kill2';\n                if (!!(UNITLAYERS.oppcatapults[MARKS['selectkill']])) {\n                    turn.links[newstepid].sacrifice = 'sacrifice2';\n                }\n                return newstep;\n            };\n            game.selectkill2instruction = function (step) {\n                return '';\n            };\n            game.selectcatapult2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    firetargets: Object.assign({}, step.ARTIFACTS.firetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectcatapult: markpos\n                };\n                var STARTPOS = MARKS['selectcatapult'];\n                var allwalkerdirs = [3, 4, 5, 6, 7];\n                for (var walkerdirnbr = 0; walkerdirnbr < 5; walkerdirnbr++) {\n                    var MAX = 3;\n                    var POS = STARTPOS;\n                    var LENGTH = 0;\n                    var STEP = 0;\n                    while (LENGTH < MAX && (POS = connections[POS][allwalkerdirs[walkerdirnbr]])) {\n                        LENGTH++;\n                        STEP++;\n                        if (((STEP > 1) && !(UNITLAYERS.myunits[POS]))) {\n                            ARTIFACTS['firetargets'][POS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectcatapult'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.firetargets) {\n                    newlinks[linkpos] = 'selectfire2';\n                }\n                return newstep;\n            };\n            game.selectcatapult2instruction = function (step) {\n                return '';\n            };\n            game.selectfire2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectfire: markpos,\n                    selectcatapult: step.MARKS.selectcatapult\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectfire'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].fire = 'fire2';\n                return newstep;\n            };\n            game.selectfire2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                delete UNITDATA[(UNITLAYERS.units[MARKS['selecttower']] || {}).id];\n                for (var POS in ARTIFACTS.madecatapults) {\n                    var unitid = (UNITLAYERS.units[POS] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'group': 'catapults'\n                        });\n                    }\n                }\n                for (var POS in ARTIFACTS.madetowers) {\n                    var unitid = (UNITLAYERS.units[POS] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'group': 'towers'\n                        });\n                    }\n                }\n                for (var POS in ARTIFACTS.madewalls) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: POS,\n                        id: newunitid,\n                        group: 'walls',\n                        owner: 2,\n                        from: MARKS['selecttower']\n                    };\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"catapults\": {},\n                    \"mycatapults\": {},\n                    \"oppcatapults\": {},\n                    \"neutralcatapults\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"firetargets\": {},\n                    \"movetargets\": {},\n                    \"madecatapults\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.kill2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selecttower']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'walls'\n                    });\n                }\n                if (!!(UNITLAYERS.oppcatapults[MARKS['selectkill']])) {\n                    var unitid = (UNITLAYERS.units[MARKS['selectkill']] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'group': 'towers'\n                        });\n                    }\n                }\n                else {\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectkill']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"catapults\": {},\n                    \"mycatapults\": {},\n                    \"oppcatapults\": {},\n                    \"neutralcatapults\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"firetargets\": {},\n                    \"movetargets\": {},\n                    \"madecatapults\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'kill';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'kill',\n                    path: step.path.concat('kill')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.kill2instruction = function (step) {\n                return '';\n            };\n            game.sacrifice2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectkill']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'walls'\n                    });\n                }\n                delete UNITDATA[(UNITLAYERS.units[MARKS['selecttower']] || {}).id];\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"catapults\": {},\n                    \"mycatapults\": {},\n                    \"oppcatapults\": {},\n                    \"neutralcatapults\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"firetargets\": {},\n                    \"movetargets\": {},\n                    \"madecatapults\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'sacrifice';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'sacrifice',\n                    path: step.path.concat('sacrifice')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.sacrifice2instruction = function (step) {\n                return '';\n            };\n            game.fire2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                if (!!(UNITLAYERS.oppwalls[MARKS['selectfire']])) {\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectfire']] || {}).id];\n                }\n                else {\n                    if (!!(UNITLAYERS.oppunits[MARKS['selectfire']])) {\n                        var unitid = (UNITLAYERS.units[MARKS['selectfire']] || {}).id;\n                        if (unitid) {\n                            UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                                'group': (!!(UNITLAYERS.oppcatapults[MARKS['selectfire']]) ? 'towers' : 'walls')\n                            });\n                        }\n                    }\n                    else {\n                        var newunitid = 'spawn' + (clones++);\n                        UNITDATA[newunitid] = {\n                            pos: MARKS['selectfire'],\n                            id: newunitid,\n                            group: 'walls',\n                            owner: 2,\n                            from: MARKS['selectcatapult']\n                        };\n                    }\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectcatapult']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'towers'\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"catapults\": {},\n                    \"mycatapults\": {},\n                    \"oppcatapults\": {},\n                    \"neutralcatapults\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"firetargets\": {},\n                    \"movetargets\": {},\n                    \"madecatapults\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'fire';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'fire',\n                    path: step.path.concat('fire'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.opphomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.fire2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"firetargets\": {},\n                    \"movetargets\": {},\n                    \"madecatapults\": {},\n                    \"madetowers\": {},\n                    \"madewalls\": {},\n                    \"killtargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"towers\": {},\n                    \"mytowers\": {},\n                    \"opptowers\": {},\n                    \"neutraltowers\": {},\n                    \"catapults\": {},\n                    \"mycatapults\": {},\n                    \"oppcatapults\": {},\n                    \"neutralcatapults\": {},\n                    \"walls\": {},\n                    \"mywalls\": {},\n                    \"oppwalls\": {},\n                    \"neutralwalls\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.mytowers) {\n                    newlinks[linkpos] = 'selecttower2';\n                }\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.mycatapults) {\n                    newlinks[linkpos] = 'selectcatapult2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), orthokon: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1\n        };\n        game.graphics = {\n            \"icons\": {\n                \"soldiers\": \"pawns\"\n            }\n        };\n        game.board = {\n            \"height\": 4,\n            \"width\": 4\n        };\n        game.AI = [\"Bob\"];\n        game.id = \"orthokon\";\n        var boardDef = {\n            \"height\": 4,\n            \"width\": 4\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        var TERRAIN = terrainLayers(boardDef, 0);\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"soldiers\": {\n                        \"1\": [\n                            [\"rect\", \"a1\", \"d1\"]\n                        ],\n                        \"2\": [\n                            [\"rect\", \"a4\", \"d4\"]\n                        ]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.brain_Bob_1 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                return Object.keys(UNITLAYERS.myunits).length;\n            };\n            game.brain_Bob_1_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                return {\n                    headcount: Object.keys(UNITLAYERS.myunits).length\n                };\n            };\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = MARKS['selectunit'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var walkedsquares = [];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                        walkedsquares.push(POS);\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if (WALKLENGTH) {\n                        ARTIFACTS['movetargets'][walkedsquares[WALKLENGTH - 1]] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    victims: Object.assign({}, step.ARTIFACTS.victims)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var STARTPOS = MARKS['selectmovetarget'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && UNITLAYERS.oppunits[POS]) {\n                        ARTIFACTS['victims'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                var LOOPID;\n                for (var POS in ARTIFACTS.victims) {\n                    if (LOOPID = (UNITLAYERS.units[POS] || {}).id) {\n                        UNITDATA[LOOPID] = Object.assign({}, UNITDATA[LOOPID], {\n                            'owner': 1\n                        });\n                        // TODO - check that it uses ['loopid'] ?\n                    }\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"victims\": {},\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"victims\": {},\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.brain_Bob_2 = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                return Object.keys(UNITLAYERS.myunits).length;\n            };\n            game.brain_Bob_2_detailed = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var ARTIFACTS = step.ARTIFACTS;\n                return {\n                    headcount: Object.keys(UNITLAYERS.myunits).length\n                };\n            };\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var BLOCKS = UNITLAYERS.units;\n                var STARTPOS = MARKS['selectunit'];\n                var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                    var walkedsquares = [];\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && !BLOCKS[POS]) {\n                        walkedsquares.push(POS);\n                    }\n                    var WALKLENGTH = walkedsquares.length;\n                    if (WALKLENGTH) {\n                        ARTIFACTS['movetargets'][walkedsquares[WALKLENGTH - 1]] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    victims: Object.assign({}, step.ARTIFACTS.victims)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var STARTPOS = MARKS['selectmovetarget'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && UNITLAYERS.oppunits[POS]) {\n                        ARTIFACTS['victims'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                var LOOPID;\n                for (var POS in ARTIFACTS.victims) {\n                    if (LOOPID = (UNITLAYERS.units[POS] || {}).id) {\n                        UNITDATA[LOOPID] = Object.assign({}, UNITDATA[LOOPID], {\n                            'owner': 2\n                        });\n                        // TODO - check that it uses ['loopid'] ?\n                    }\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"victims\": {},\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"victims\": {},\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), semaphor: (function () {\n        var game = {};\n        game.commands = {\n            \"deploy\": 1,\n            \"promote\": 1\n        };\n        game.graphics = {\n            \"icons\": {\n                \"kings\": \"kings\",\n                \"pawns\": \"pawns\",\n                \"bishops\": \"bishops\"\n            }\n        };\n        game.board = {\n            \"width\": 4,\n            \"height\": 3\n        };\n        game.AI = [];\n        game.id = \"semaphor\";\n        var boardDef = {\n            \"width\": 4,\n            \"height\": 3\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        var TERRAIN = terrainLayers(boardDef, 0);\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({}),\n                clones: 0\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectdeploytarget1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectdeploytarget: markpos\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectdeploytarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].deploy = 'deploy1';\n                return newstep;\n            };\n            game.selectdeploytarget1instruction = function (step) {\n                return '';\n            };\n            game.selectunit1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].promote = 'promote1';\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.deploy1 = function (turn, step) {\n                var ARTIFACTS = {\n                    line: Object.assign({}, step.ARTIFACTS.line)\n                };\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectdeploytarget'],\n                    id: newunitid,\n                    group: 'pawns',\n                    owner: 0\n                };\n                MARKS = {};\n                UNITLAYERS = {\n                    \"bishops\": {},\n                    \"mybishops\": {},\n                    \"oppbishops\": {},\n                    \"neutralbishops\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"line\": {}\n                };\n                var walkstarts = UNITLAYERS.units;\n                for (var STARTPOS in walkstarts) {\n                    var allowedsteps = UNITLAYERS[(UNITLAYERS.units[STARTPOS] || {})['group']];\n                    var allwalkerdirs = [1, 2, 3, 4];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 4; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS]) {\n                            walkedsquares.push(POS);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            if ((WALKLENGTH > 1)) {\n                                ARTIFACTS['line'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'deploy';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'deploy',\n                    path: step.path.concat('deploy'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.line || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.deploy1instruction = function (step) {\n                return '';\n            };\n            game.promote1 = function (turn, step) {\n                var ARTIFACTS = {\n                    line: Object.assign({}, step.ARTIFACTS.line)\n                };\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': (!!(UNITLAYERS.pawns[MARKS['selectunit']]) ? 'bishops' : 'kings')\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"bishops\": {},\n                    \"mybishops\": {},\n                    \"oppbishops\": {},\n                    \"neutralbishops\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"line\": {}\n                };\n                var walkstarts = UNITLAYERS.units;\n                for (var STARTPOS in walkstarts) {\n                    var allowedsteps = UNITLAYERS[(UNITLAYERS.units[STARTPOS] || {})['group']];\n                    var allwalkerdirs = [1, 2, 3, 4];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 4; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS]) {\n                            walkedsquares.push(POS);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            if ((WALKLENGTH > 1)) {\n                                ARTIFACTS['line'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'promote';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'promote',\n                    path: step.path.concat('promote')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.line || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.promote1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"line\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"bishops\": {},\n                    \"mybishops\": {},\n                    \"oppbishops\": {},\n                    \"neutralbishops\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in (function () {\n                    var ret = {}, s0 = BOARD.board, s1 = UNITLAYERS.units;\n                    for (var key in s0) {\n                        if (!s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())) {\n                    newlinks[linkpos] = 'selectdeploytarget1';\n                }\n                var newlinks = turn.links.root;\n                for (var linkpos in (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.pawns, s1 = UNITLAYERS.bishops;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }())) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectdeploytarget2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectdeploytarget: markpos\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectdeploytarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].deploy = 'deploy2';\n                return newstep;\n            };\n            game.selectdeploytarget2instruction = function (step) {\n                return '';\n            };\n            game.selectunit2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].promote = 'promote2';\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.deploy2 = function (turn, step) {\n                var ARTIFACTS = {\n                    line: Object.assign({}, step.ARTIFACTS.line)\n                };\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                var newunitid = 'spawn' + (clones++);\n                UNITDATA[newunitid] = {\n                    pos: MARKS['selectdeploytarget'],\n                    id: newunitid,\n                    group: 'pawns',\n                    owner: 0\n                };\n                MARKS = {};\n                UNITLAYERS = {\n                    \"bishops\": {},\n                    \"mybishops\": {},\n                    \"oppbishops\": {},\n                    \"neutralbishops\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"line\": {}\n                };\n                var walkstarts = UNITLAYERS.units;\n                for (var STARTPOS in walkstarts) {\n                    var allowedsteps = UNITLAYERS[(UNITLAYERS.units[STARTPOS] || {})['group']];\n                    var allwalkerdirs = [1, 2, 3, 4];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 4; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS]) {\n                            walkedsquares.push(POS);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            if ((WALKLENGTH > 1)) {\n                                ARTIFACTS['line'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'deploy';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'deploy',\n                    path: step.path.concat('deploy'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.line || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.deploy2instruction = function (step) {\n                return '';\n            };\n            game.promote2 = function (turn, step) {\n                var ARTIFACTS = {\n                    line: Object.assign({}, step.ARTIFACTS.line)\n                };\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': (!!(UNITLAYERS.pawns[MARKS['selectunit']]) ? 'bishops' : 'kings')\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"bishops\": {},\n                    \"mybishops\": {},\n                    \"oppbishops\": {},\n                    \"neutralbishops\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"line\": {}\n                };\n                var walkstarts = UNITLAYERS.units;\n                for (var STARTPOS in walkstarts) {\n                    var allowedsteps = UNITLAYERS[(UNITLAYERS.units[STARTPOS] || {})['group']];\n                    var allwalkerdirs = [1, 2, 3, 4];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 4; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS]) {\n                            walkedsquares.push(POS);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        for (var walkstepper = 0; walkstepper < WALKLENGTH; walkstepper++) {\n                            POS = walkedsquares[walkstepper];\n                            if ((WALKLENGTH > 1)) {\n                                ARTIFACTS['line'][POS] = {};\n                            }\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'promote';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'promote',\n                    path: step.path.concat('promote')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.line || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.promote2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"line\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"bishops\": {},\n                    \"mybishops\": {},\n                    \"oppbishops\": {},\n                    \"neutralbishops\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in (function () {\n                    var ret = {}, s0 = BOARD.board, s1 = UNITLAYERS.units;\n                    for (var key in s0) {\n                        if (!s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())) {\n                    newlinks[linkpos] = 'selectdeploytarget2';\n                }\n                var newlinks = turn.links.root;\n                for (var linkpos in (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.pawns, s1 = UNITLAYERS.bishops;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }())) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), serauqs: (function () {\n        var game = {};\n        game.commands = {\n            \"makewild\": 1,\n            \"move\": 1\n        };\n        game.graphics = {\n            \"icons\": {\n                \"soldiers\": \"pawns\",\n                \"wild\": \"kings\"\n            },\n            \"tiles\": {\n                \"corners\": \"grass\",\n                \"middle\": \"castle\"\n            }\n        };\n        game.board = {\n            \"height\": 4,\n            \"width\": 4,\n            \"terrain\": {\n                \"base\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"d1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a4\", \"d4\"]\n                    ]\n                },\n                \"corners\": [\"a1\", \"a4\", \"d1\", \"d4\"],\n                \"middle\": [\n                    [\"rect\", \"b2\", \"c3\"]\n                ]\n            }\n        };\n        game.AI = [];\n        game.id = \"serauqs\";\n        var boardDef = {\n            \"height\": 4,\n            \"width\": 4,\n            \"terrain\": {\n                \"base\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"d1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a4\", \"d4\"]\n                    ]\n                },\n                \"corners\": [\"a1\", \"a4\", \"d1\", \"d4\"],\n                \"middle\": [\n                    [\"rect\", \"b2\", \"c3\"]\n                ]\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"soldiers\": {\n                        \"1\": [\n                            [\"rect\", \"a1\", \"d1\"]\n                        ],\n                        \"2\": [\n                            [\"rect\", \"a4\", \"d4\"]\n                        ]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && !UNITLAYERS.units[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                if ((3 > turn.turn)) {\n                    turn.links[newstepid].makewild = 'makewild1';\n                }\n                else {\n                    var newlinks = turn.links[newstepid];\n                    for (var linkpos in ARTIFACTS.movetargets) {\n                        newlinks[linkpos] = 'selectmovetarget1';\n                    }\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return '';\n            };\n            game.makewild1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'wild'\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"wild\": {},\n                    \"mywild\": {},\n                    \"oppwild\": {},\n                    \"neutralwild\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"winline\": {}\n                };\n                var newstepid = step.stepid + '-' + 'makewild';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'makewild',\n                    path: step.path.concat('makewild')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else if ((Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.corners, s1 = (function () {\n                        var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length > 3)) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madex';\n                }\n                else if ((Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.middle, s1 = (function () {\n                        var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length > 3)) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'tookcenter';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.makewild1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"wild\": {},\n                    \"mywild\": {},\n                    \"oppwild\": {},\n                    \"neutralwild\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"winline\": {}\n                };\n                var allowedsteps = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        var walkpositionstocount = TERRAIN.mybase;\n                        var CURRENTCOUNT = 0;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS]) {\n                            walkedsquares.push(POS);\n                            CURRENTCOUNT += (walkpositionstocount[POS] ? 1 : 0);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var TOTALCOUNT = CURRENTCOUNT;\n                        if (((WALKLENGTH === 3) && (TOTALCOUNT !== 3))) {\n                            ARTIFACTS['winline'][STARTPOS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else if ((Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.corners, s1 = (function () {\n                        var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length > 3)) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madex';\n                }\n                else if ((Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.middle, s1 = (function () {\n                        var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length > 3)) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'tookcenter';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"winline\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"wild\": {},\n                    \"mywild\": {},\n                    \"oppwild\": {},\n                    \"neutralwild\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 8; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && !UNITLAYERS.units[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                if ((3 > turn.turn)) {\n                    turn.links[newstepid].makewild = 'makewild2';\n                }\n                else {\n                    var newlinks = turn.links[newstepid];\n                    for (var linkpos in ARTIFACTS.movetargets) {\n                        newlinks[linkpos] = 'selectmovetarget2';\n                    }\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return '';\n            };\n            game.makewild2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'group': 'wild'\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"wild\": {},\n                    \"mywild\": {},\n                    \"oppwild\": {},\n                    \"neutralwild\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"winline\": {}\n                };\n                var newstepid = step.stepid + '-' + 'makewild';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'makewild',\n                    path: step.path.concat('makewild')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else if ((Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.corners, s1 = (function () {\n                        var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length > 3)) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madex';\n                }\n                else if ((Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.middle, s1 = (function () {\n                        var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length > 3)) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'tookcenter';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.makewild2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"wild\": {},\n                    \"mywild\": {},\n                    \"oppwild\": {},\n                    \"neutralwild\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"winline\": {}\n                };\n                var allowedsteps = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                var walkstarts = (function () {\n                    var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }());\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        var walkpositionstocount = TERRAIN.mybase;\n                        var CURRENTCOUNT = 0;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS]) {\n                            walkedsquares.push(POS);\n                            CURRENTCOUNT += (walkpositionstocount[POS] ? 1 : 0);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        var TOTALCOUNT = CURRENTCOUNT;\n                        if (((WALKLENGTH === 3) && (TOTALCOUNT !== 3))) {\n                            ARTIFACTS['winline'][STARTPOS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else if ((Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.corners, s1 = (function () {\n                        var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length > 3)) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madex';\n                }\n                else if ((Object.keys((function () {\n                    var ret = {}, s0 = TERRAIN.middle, s1 = (function () {\n                        var k, ret = {}, s0 = UNITLAYERS.myunits, s1 = UNITLAYERS.oppwild;\n                        for (k in s0) {\n                            ret[k] = 1;\n                        }\n                        for (k in s1) {\n                            ret[k] = 1;\n                        }\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())).length > 3)) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'tookcenter';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {},\n                    \"winline\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"wild\": {},\n                    \"mywild\": {},\n                    \"oppwild\": {},\n                    \"neutralwild\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), snijpunt: (function () {\n        var game = {};\n        game.commands = {\n            \"snipe\": 1\n        };\n        game.graphics = {\n            \"icons\": {\n                \"soldiers\": \"pawns\",\n                \"sniper\": \"kings\"\n            },\n            \"tiles\": {\n                \"zone\": \"grass\",\n                \"corner\": \"castle\"\n            }\n        };\n        game.board = {\n            \"height\": 6,\n            \"width\": 6,\n            \"terrain\": {\n                \"zone\": {\n                    \"1\": [\n                        [\"rect\", \"b6\", \"f6\", 5]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a1\", \"a5\", 3]\n                    ]\n                },\n                \"corner\": [\"a6\"]\n            }\n        };\n        game.AI = [];\n        game.id = \"snijpunt\";\n        var boardDef = {\n            \"height\": 6,\n            \"width\": 6,\n            \"terrain\": {\n                \"zone\": {\n                    \"1\": [\n                        [\"rect\", \"b6\", \"f6\", 5]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a1\", \"a5\", 3]\n                    ]\n                },\n                \"corner\": [\"a6\"]\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({}),\n                clones: 0\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selecttarget1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    intersection: Object.assign({}, step.ARTIFACTS.intersection)\n                });\n                var MARKS = {\n                    selecttarget: markpos\n                };\n                var STARTPOS = MARKS['selecttarget'];\n                var DIR = 5;\n                var POS = STARTPOS;\n                while ((POS = connections[POS][5])) {\n                    if (ARTIFACTS.enemyline[POS]) {\n                        ARTIFACTS['intersection'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selecttarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].snipe = 'snipe1';\n                return newstep;\n            };\n            game.selecttarget1instruction = function (step) {\n                return '';\n            };\n            game.snipe1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline),\n                    loseline: Object.assign({}, step.ARTIFACTS.loseline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                if (Object.keys(UNITLAYERS.mysniper || {}).length === 0) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: MARKS['selecttarget'],\n                        id: newunitid,\n                        group: 'sniper',\n                        owner: player\n                    };\n                }\n                else {\n                    var unitid = (UNITLAYERS.units[Object.keys(UNITLAYERS.mysniper)[0]] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'pos': MARKS['selecttarget']\n                        });\n                    }\n                }\n                if (Object.keys(UNITLAYERS.oppsniper || {}).length !== 0) {\n                    if (!!(UNITLAYERS.units[Object.keys(ARTIFACTS.intersection)[0]])) {\n                        var unitid = (UNITLAYERS.units[Object.keys(ARTIFACTS.intersection)[0]] || {}).id;\n                        if (unitid) {\n                            UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                                'owner': (((UNITLAYERS.units[Object.keys(ARTIFACTS.intersection)[0]] || {})['owner'] === 2) ? 1 : 2)\n                            });\n                        }\n                    }\n                    else {\n                        var newunitid = 'spawn' + (clones++);\n                        UNITDATA[newunitid] = {\n                            pos: Object.keys(ARTIFACTS.intersection)[0],\n                            id: newunitid,\n                            group: 'soldiers',\n                            owner: 1,\n                            from: MARKS['selecttarget']\n                        };\n                    }\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"sniper\": {},\n                    \"mysniper\": {},\n                    \"oppsniper\": {},\n                    \"neutralsniper\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"winline\": {},\n                    \"loseline\": {},\n                    \"intersection\": {},\n                    \"enemyline\": {},\n                    \"potentialempties\": {},\n                    \"mandatory\": {}\n                };\n                var walkstarts = UNITLAYERS.soldiers;\n                for (var STARTPOS in walkstarts) {\n                    var allowedsteps = (!!(UNITLAYERS.mysoldiers[STARTPOS]) ? UNITLAYERS.mysoldiers : UNITLAYERS.oppsoldiers);\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS]) {\n                            walkedsquares.push(POS);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        if ((WALKLENGTH > 2)) {\n                            ARTIFACTS[(!!(UNITLAYERS.mysoldiers[STARTPOS]) ? 'winline' : 'loseline')][STARTPOS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'snipe';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'snipe',\n                    path: step.path.concat('snipe'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else if (Object.keys(ARTIFACTS.loseline || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeoppline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.snipe1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"winline\": {},\n                    \"loseline\": {},\n                    \"intersection\": {},\n                    \"enemyline\": {},\n                    \"potentialempties\": {},\n                    \"mandatory\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"sniper\": {},\n                    \"mysniper\": {},\n                    \"oppsniper\": {},\n                    \"neutralsniper\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                if (Object.keys(UNITLAYERS.oppsniper || {}).length !== 0) {\n                    var STARTPOS = Object.keys(UNITLAYERS.oppsniper)[0];\n                    var DIR = 3;\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][3])) {\n                        if (!UNITLAYERS.units[POS]) {\n                            ARTIFACTS['potentialempties'][POS] = {};\n                        }\n                        ARTIFACTS['enemyline'][POS] = {};\n                    }\n                    var walkstarts = ARTIFACTS.potentialempties;\n                    for (var STARTPOS in walkstarts) {\n                        var DIR = 1;\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][1])) {\n                            walkedsquares.push(POS);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        if (WALKLENGTH) {\n                            if (!UNITLAYERS.sniper[walkedsquares[WALKLENGTH - 1]]) {\n                                ARTIFACTS['mandatory'][walkedsquares[WALKLENGTH - 1]] = {};\n                            }\n                        }\n                    }\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in (Object.keys(ARTIFACTS.mandatory || {}).length === 0 ?\n                    (function () {\n                        var ret = {}, s0 = TERRAIN.myzone, s1 = UNITLAYERS.sniper;\n                        for (var key in s0) {\n                            if (!s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }()) : ARTIFACTS.mandatory)) {\n                    newlinks[linkpos] = 'selecttarget1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                return (Object.keys(UNITLAYERS.mysniper || {}).length === 0 ? 'Select initial sniper deployment' : 'Select where to snipe from');\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selecttarget2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    intersection: Object.assign({}, step.ARTIFACTS.intersection)\n                });\n                var MARKS = {\n                    selecttarget: markpos\n                };\n                var STARTPOS = MARKS['selecttarget'];\n                var DIR = 3;\n                var POS = STARTPOS;\n                while ((POS = connections[POS][3])) {\n                    if (ARTIFACTS.enemyline[POS]) {\n                        ARTIFACTS['intersection'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selecttarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].snipe = 'snipe2';\n                return newstep;\n            };\n            game.selecttarget2instruction = function (step) {\n                return '';\n            };\n            game.snipe2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    winline: Object.assign({}, step.ARTIFACTS.winline),\n                    loseline: Object.assign({}, step.ARTIFACTS.loseline)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var clones = step.clones;\n                var UNITLAYERS = step.UNITLAYERS;\n                if (Object.keys(UNITLAYERS.mysniper || {}).length === 0) {\n                    var newunitid = 'spawn' + (clones++);\n                    UNITDATA[newunitid] = {\n                        pos: MARKS['selecttarget'],\n                        id: newunitid,\n                        group: 'sniper',\n                        owner: player\n                    };\n                }\n                else {\n                    var unitid = (UNITLAYERS.units[Object.keys(UNITLAYERS.mysniper)[0]] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'pos': MARKS['selecttarget']\n                        });\n                    }\n                }\n                if (Object.keys(UNITLAYERS.oppsniper || {}).length !== 0) {\n                    if (!!(UNITLAYERS.units[Object.keys(ARTIFACTS.intersection)[0]])) {\n                        var unitid = (UNITLAYERS.units[Object.keys(ARTIFACTS.intersection)[0]] || {}).id;\n                        if (unitid) {\n                            UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                                'owner': (((UNITLAYERS.units[Object.keys(ARTIFACTS.intersection)[0]] || {})['owner'] === 2) ? 1 : 2)\n                            });\n                        }\n                    }\n                    else {\n                        var newunitid = 'spawn' + (clones++);\n                        UNITDATA[newunitid] = {\n                            pos: Object.keys(ARTIFACTS.intersection)[0],\n                            id: newunitid,\n                            group: 'soldiers',\n                            owner: 2,\n                            from: MARKS['selecttarget']\n                        };\n                    }\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"sniper\": {},\n                    \"mysniper\": {},\n                    \"oppsniper\": {},\n                    \"neutralsniper\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"winline\": {},\n                    \"loseline\": {},\n                    \"intersection\": {},\n                    \"enemyline\": {},\n                    \"potentialempties\": {},\n                    \"mandatory\": {}\n                };\n                var walkstarts = UNITLAYERS.soldiers;\n                for (var STARTPOS in walkstarts) {\n                    var allowedsteps = (!!(UNITLAYERS.mysoldiers[STARTPOS]) ? UNITLAYERS.mysoldiers : UNITLAYERS.oppsoldiers);\n                    var allwalkerdirs = [1, 2, 3, 4, 5, 6, 7, 8];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 8; walkerdirnbr++) {\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]]) && allowedsteps[POS]) {\n                            walkedsquares.push(POS);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        if ((WALKLENGTH > 2)) {\n                            ARTIFACTS[(!!(UNITLAYERS.mysoldiers[STARTPOS]) ? 'winline' : 'loseline')][STARTPOS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'snipe';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'snipe',\n                    path: step.path.concat('snipe'),\n                    clones: clones\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.winline || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeline';\n                }\n                else if (Object.keys(ARTIFACTS.loseline || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'madeoppline';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.snipe2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"winline\": {},\n                    \"loseline\": {},\n                    \"intersection\": {},\n                    \"enemyline\": {},\n                    \"potentialempties\": {},\n                    \"mandatory\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"sniper\": {},\n                    \"mysniper\": {},\n                    \"oppsniper\": {},\n                    \"neutralsniper\": {},\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                if (Object.keys(UNITLAYERS.oppsniper || {}).length !== 0) {\n                    var STARTPOS = Object.keys(UNITLAYERS.oppsniper)[0];\n                    var DIR = 5;\n                    var POS = STARTPOS;\n                    while ((POS = connections[POS][5])) {\n                        if (!UNITLAYERS.units[POS]) {\n                            ARTIFACTS['potentialempties'][POS] = {};\n                        }\n                        ARTIFACTS['enemyline'][POS] = {};\n                    }\n                    var walkstarts = ARTIFACTS.potentialempties;\n                    for (var STARTPOS in walkstarts) {\n                        var DIR = 7;\n                        var walkedsquares = [];\n                        var POS = STARTPOS;\n                        while ((POS = connections[POS][7])) {\n                            walkedsquares.push(POS);\n                        }\n                        var WALKLENGTH = walkedsquares.length;\n                        if (WALKLENGTH) {\n                            if (!UNITLAYERS.sniper[walkedsquares[WALKLENGTH - 1]]) {\n                                ARTIFACTS['mandatory'][walkedsquares[WALKLENGTH - 1]] = {};\n                            }\n                        }\n                    }\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    clones: step.clones,\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in (Object.keys(ARTIFACTS.mandatory || {}).length === 0 ?\n                    (function () {\n                        var ret = {}, s0 = TERRAIN.myzone, s1 = UNITLAYERS.sniper;\n                        for (var key in s0) {\n                            if (!s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }()) : ARTIFACTS.mandatory)) {\n                    newlinks[linkpos] = 'selecttarget2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                var UNITLAYERS = step.UNITLAYERS;\n                return (Object.keys(UNITLAYERS.mysniper || {}).length === 0 ? 'Select initial sniper deployment' : 'Select where to snipe from');\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), threemusketeers: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1\n        };\n        game.graphics = {\n            \"icons\": {\n                \"pawns\": \"pawns\",\n                \"kings\": \"kings\"\n            }\n        };\n        game.board = {\n            \"height\": 5,\n            \"width\": 5\n        };\n        game.AI = [];\n        game.id = \"threemusketeers\";\n        var boardDef = {\n            \"height\": 5,\n            \"width\": 5\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        var TERRAIN = terrainLayers(boardDef, 0);\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"kings\": {\n                        \"1\": [\"a1\", \"c3\", \"e5\"]\n                    },\n                    \"pawns\": {\n                        \"2\": [\n                            [\"holerect\", \"a1\", \"e5\", [\"a1\", \"c3\", \"e5\"]]\n                        ]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && !!(UNITLAYERS.oppunits[POS])) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    musketeerline: Object.assign({}, step.ARTIFACTS.musketeerline),\n                    strandedmusketeers: Object.assign({}, step.ARTIFACTS.strandedmusketeers)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"strandedmusketeers\": {},\n                    \"musketeerline\": {},\n                    \"movetargets\": {}\n                };\n                var walkstarts = UNITLAYERS.kings;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 3, 5, 7];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 4; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        var walkpositionstocount = UNITLAYERS.kings;\n                        var CURRENTCOUNT = 0;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]])) {\n                            CURRENTCOUNT += (walkpositionstocount[POS] ? 1 : 0);\n                        }\n                        var TOTALCOUNT = CURRENTCOUNT;\n                        if ((2 === TOTALCOUNT)) {\n                            ARTIFACTS['musketeerline'][STARTPOS] = {};\n                        }\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.musketeerline || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'musketeersinline';\n                }\n                else if ((Object.keys(ARTIFACTS.strandedmusketeers).length === 3)) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'strandedmusketeers';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"strandedmusketeers\": {},\n                    \"musketeerline\": {},\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && !(UNITLAYERS.units[POS])) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    musketeerline: Object.assign({}, step.ARTIFACTS.musketeerline),\n                    strandedmusketeers: Object.assign({}, step.ARTIFACTS.strandedmusketeers)\n                });\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"strandedmusketeers\": {},\n                    \"musketeerline\": {},\n                    \"movetargets\": {}\n                };\n                var walkstarts = UNITLAYERS.kings;\n                for (var STARTPOS in walkstarts) {\n                    var allwalkerdirs = [1, 3, 5, 7];\n                    for (var walkerdirnbr = 0; walkerdirnbr < 4; walkerdirnbr++) {\n                        var POS = STARTPOS;\n                        var walkpositionstocount = UNITLAYERS.kings;\n                        var CURRENTCOUNT = 0;\n                        while ((POS = connections[POS][allwalkerdirs[walkerdirnbr]])) {\n                            CURRENTCOUNT += (walkpositionstocount[POS] ? 1 : 0);\n                        }\n                        var TOTALCOUNT = CURRENTCOUNT;\n                        if ((2 === TOTALCOUNT)) {\n                            ARTIFACTS['musketeerline'][STARTPOS] = {};\n                        }\n                    }\n                }\n                for (var STARTPOS in UNITLAYERS.kings) {\n                    var neighbourdirs = [1, 3, 5, 7];\n                    var foundneighbours = [];\n                    var startconnections = connections[STARTPOS];\n                    for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                        var POS = startconnections[neighbourdirs[dirnbr]];\n                        if (POS && UNITLAYERS.pawns[POS]) {\n                            foundneighbours.push(POS);\n                        }\n                    }\n                    var NEIGHBOURCOUNT = foundneighbours.length;\n                    if (!NEIGHBOURCOUNT) {\n                        ARTIFACTS['strandedmusketeers'][STARTPOS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.musketeerline || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'musketeersinline';\n                }\n                else if ((Object.keys(ARTIFACTS.strandedmusketeers).length === 3)) {\n                    var winner = 1;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'strandedmusketeers';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"strandedmusketeers\": {},\n                    \"musketeerline\": {},\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"pawns\": {},\n                    \"mypawns\": {},\n                    \"opppawns\": {},\n                    \"neutralpawns\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), transet: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1,\n            \"swap\": 1\n        };\n        game.graphics = {\n            \"icons\": {\n                \"pinets\": \"pawns\",\n                \"piokers\": \"bishops\",\n                \"piases\": \"kings\"\n            },\n            \"tiles\": {\n                \"base\": \"playercolour\"\n            }\n        };\n        game.board = {\n            \"height\": 5,\n            \"width\": 5,\n            \"terrain\": {\n                \"base\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"e1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a5\", \"e5\"]\n                    ]\n                }\n            }\n        };\n        game.AI = [];\n        game.id = \"transet\";\n        var boardDef = {\n            \"height\": 5,\n            \"width\": 5,\n            \"terrain\": {\n                \"base\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"e1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a5\", \"e5\"]\n                    ]\n                }\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"pinets\": {\n                        \"1\": [\"a1\", \"e1\"],\n                        \"2\": [\"a5\", \"e5\"]\n                    },\n                    \"piokers\": {\n                        \"1\": [\"b1\", \"d1\"],\n                        \"2\": [\"b5\", \"d5\"]\n                    },\n                    \"piases\": {\n                        \"1\": [\"c1\"],\n                        \"2\": [\"c5\"]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = (!!(UNITLAYERS.pinets[MARKS['selectunit']]) ? [1] : (!!(UNITLAYERS.piokers[MARKS['selectunit']]) ? [8, 2] : [8, 1, 2]));\n                var nbrofneighbourdirs = neighbourdirs.length;\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && !UNITLAYERS.myunits[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in (function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectunit']] = 1;\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (!s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())) {\n                    newlinks[linkpos] = 'selectswapunit1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                if ((!!(UNITLAYERS.units[MARKS['selectmovetarget']]) && !(TERRAIN.oppbase[MARKS['selectmovetarget']]))) {\n                    var newlinks = turn.links[newstepid];\n                    for (var linkpos in (function () {\n                        var ret = {}, s0 = TERRAIN.oppbase, s1 = UNITLAYERS.oppunits;\n                        for (var key in s0) {\n                            if (!s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())) {\n                        newlinks[linkpos] = 'selectdeportdestination1';\n                    }\n                }\n                else {\n                    turn.links[newstepid].move = 'move1';\n                }\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return '';\n            };\n            game.selectdeportdestination1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectdeportdestination: markpos,\n                    selectunit: step.MARKS.selectunit,\n                    selectmovetarget: step.MARKS.selectmovetarget\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectdeportdestination'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectdeportdestination1instruction = function (step) {\n                return '';\n            };\n            game.selectswapunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    swap1steps: Object.assign({}, step.ARTIFACTS.swap1steps)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectswapunit: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var DIR = neighbourdirs[dirnbr];\n                    var POS = startconnections[DIR];\n                    if (POS && !UNITLAYERS.units[POS]) {\n                        ARTIFACTS['swap1steps'][POS] = {\n                            dir: DIR\n                        };\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectswapunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.swap1steps) {\n                    newlinks[linkpos] = 'selectswap1target1';\n                }\n                return newstep;\n            };\n            game.selectswapunit1instruction = function (step) {\n                return '';\n            };\n            game.selectswap1target1 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    swap2step: Object.assign({}, step.ARTIFACTS.swap2step)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectswap1target: markpos,\n                    selectunit: step.MARKS.selectunit,\n                    selectswapunit: step.MARKS.selectswapunit\n                };\n                var STARTPOS = MARKS['selectswapunit'];\n                var POS = connections[STARTPOS][relativedirs[(ARTIFACTS.swap1steps[MARKS['selectswap1target']] || {})['dir'] - 2 + 5]];\n                if (POS && !(function () {\n                    var k, ret = {}, s0 = UNITLAYERS.units, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectswap1target']] = 1;\n                        return ret;\n                    }());\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }())[POS]) {\n                    ARTIFACTS['swap2step'][POS] = {};\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectswap1target'\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.swap2step || {}).length !== 0) {\n                    turn.links[newstepid].swap = 'swap1';\n                }\n                return newstep;\n            };\n            game.selectswap1target1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                if (!!(UNITLAYERS.units[MARKS['selectmovetarget']])) {\n                    if (!!(TERRAIN.oppbase[MARKS['selectmovetarget']])) {\n                        delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                    }\n                    else {\n                        var unitid = (UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id;\n                        if (unitid) {\n                            UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                                'pos': MARKS['selectdeportdestination']\n                            });\n                        }\n                    }\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"pinets\": {},\n                    \"mypinets\": {},\n                    \"opppinets\": {},\n                    \"neutralpinets\": {},\n                    \"piokers\": {},\n                    \"mypiokers\": {},\n                    \"opppiokers\": {},\n                    \"neutralpiokers\": {},\n                    \"piases\": {},\n                    \"mypiases\": {},\n                    \"opppiases\": {},\n                    \"neutralpiases\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"swap2step\": {},\n                    \"swap1steps\": {},\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.oppbase;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.swap1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectswap1target']\n                    });\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectswapunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': Object.keys(ARTIFACTS.swap2step)[0]\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"pinets\": {},\n                    \"mypinets\": {},\n                    \"opppinets\": {},\n                    \"neutralpinets\": {},\n                    \"piokers\": {},\n                    \"mypiokers\": {},\n                    \"opppiokers\": {},\n                    \"neutralpiokers\": {},\n                    \"piases\": {},\n                    \"mypiases\": {},\n                    \"opppiases\": {},\n                    \"neutralpiases\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"swap2step\": {},\n                    \"swap1steps\": {},\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'swap';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'swap',\n                    path: step.path.concat('swap')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.oppbase;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.swap1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"swap2step\": {},\n                    \"swap1steps\": {},\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"pinets\": {},\n                    \"mypinets\": {},\n                    \"opppinets\": {},\n                    \"neutralpinets\": {},\n                    \"piokers\": {},\n                    \"mypiokers\": {},\n                    \"opppiokers\": {},\n                    \"neutralpiokers\": {},\n                    \"piases\": {},\n                    \"mypiases\": {},\n                    \"opppiases\": {},\n                    \"neutralpiases\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = (!!(UNITLAYERS.pinets[MARKS['selectunit']]) ? [5] : (!!(UNITLAYERS.piokers[MARKS['selectunit']]) ? [4, 6] : [4, 5, 6]));\n                var nbrofneighbourdirs = neighbourdirs.length;\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < nbrofneighbourdirs; dirnbr++) {\n                    var POS = startconnections[neighbourdirs[dirnbr]];\n                    if (POS && !UNITLAYERS.myunits[POS]) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in (function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectunit']] = 1;\n                        return ret;\n                    }());\n                    for (var key in s0) {\n                        if (!s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }())) {\n                    newlinks[linkpos] = 'selectswapunit2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                if ((!!(UNITLAYERS.units[MARKS['selectmovetarget']]) && !(TERRAIN.oppbase[MARKS['selectmovetarget']]))) {\n                    var newlinks = turn.links[newstepid];\n                    for (var linkpos in (function () {\n                        var ret = {}, s0 = TERRAIN.oppbase, s1 = UNITLAYERS.oppunits;\n                        for (var key in s0) {\n                            if (!s1[key]) {\n                                ret[key] = s0[key];\n                            }\n                        }\n                        return ret;\n                    }())) {\n                        newlinks[linkpos] = 'selectdeportdestination2';\n                    }\n                }\n                else {\n                    turn.links[newstepid].move = 'move2';\n                }\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return '';\n            };\n            game.selectdeportdestination2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectdeportdestination: markpos,\n                    selectunit: step.MARKS.selectunit,\n                    selectmovetarget: step.MARKS.selectmovetarget\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectdeportdestination'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectdeportdestination2instruction = function (step) {\n                return '';\n            };\n            game.selectswapunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    swap1steps: Object.assign({}, step.ARTIFACTS.swap1steps)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectswapunit: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = [1, 3, 5, 7];\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 4; dirnbr++) {\n                    var DIR = neighbourdirs[dirnbr];\n                    var POS = startconnections[DIR];\n                    if (POS && !UNITLAYERS.units[POS]) {\n                        ARTIFACTS['swap1steps'][POS] = {\n                            dir: DIR\n                        };\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectswapunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.swap1steps) {\n                    newlinks[linkpos] = 'selectswap1target2';\n                }\n                return newstep;\n            };\n            game.selectswapunit2instruction = function (step) {\n                return '';\n            };\n            game.selectswap1target2 = function (turn, step, markpos) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {\n                    swap2step: Object.assign({}, step.ARTIFACTS.swap2step)\n                });\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectswap1target: markpos,\n                    selectunit: step.MARKS.selectunit,\n                    selectswapunit: step.MARKS.selectswapunit\n                };\n                var STARTPOS = MARKS['selectswapunit'];\n                var POS = connections[STARTPOS][relativedirs[(ARTIFACTS.swap1steps[MARKS['selectswap1target']] || {})['dir'] - 2 + 5]];\n                if (POS && !(function () {\n                    var k, ret = {}, s0 = UNITLAYERS.units, s1 = (function () {\n                        var ret = {};\n                        ret[MARKS['selectswap1target']] = 1;\n                        return ret;\n                    }());\n                    for (k in s0) {\n                        ret[k] = 1;\n                    }\n                    for (k in s1) {\n                        ret[k] = 1;\n                    }\n                    return ret;\n                }())[POS]) {\n                    ARTIFACTS['swap2step'][POS] = {};\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectswap1target'\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys(ARTIFACTS.swap2step || {}).length !== 0) {\n                    turn.links[newstepid].swap = 'swap2';\n                }\n                return newstep;\n            };\n            game.selectswap1target2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                if (!!(UNITLAYERS.units[MARKS['selectmovetarget']])) {\n                    if (!!(TERRAIN.oppbase[MARKS['selectmovetarget']])) {\n                        delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                    }\n                    else {\n                        var unitid = (UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id;\n                        if (unitid) {\n                            UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                                'pos': MARKS['selectdeportdestination']\n                            });\n                        }\n                    }\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"pinets\": {},\n                    \"mypinets\": {},\n                    \"opppinets\": {},\n                    \"neutralpinets\": {},\n                    \"piokers\": {},\n                    \"mypiokers\": {},\n                    \"opppiokers\": {},\n                    \"neutralpiokers\": {},\n                    \"piases\": {},\n                    \"mypiases\": {},\n                    \"opppiases\": {},\n                    \"neutralpiases\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"swap2step\": {},\n                    \"swap1steps\": {},\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.oppbase;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.swap2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectswap1target']\n                    });\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectswapunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': Object.keys(ARTIFACTS.swap2step)[0]\n                    });\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"pinets\": {},\n                    \"mypinets\": {},\n                    \"opppinets\": {},\n                    \"neutralpinets\": {},\n                    \"piokers\": {},\n                    \"mypiokers\": {},\n                    \"opppiokers\": {},\n                    \"neutralpiokers\": {},\n                    \"piases\": {},\n                    \"mypiases\": {},\n                    \"opppiases\": {},\n                    \"neutralpiases\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"swap2step\": {},\n                    \"swap1steps\": {},\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'swap';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'swap',\n                    path: step.path.concat('swap')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.myunits, s1 = TERRAIN.oppbase;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'infiltration';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.swap2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"swap2step\": {},\n                    \"swap1steps\": {},\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"pinets\": {},\n                    \"mypinets\": {},\n                    \"opppinets\": {},\n                    \"neutralpinets\": {},\n                    \"piokers\": {},\n                    \"mypiokers\": {},\n                    \"opppiokers\": {},\n                    \"neutralpiokers\": {},\n                    \"piases\": {},\n                    \"mypiases\": {},\n                    \"opppiases\": {},\n                    \"neutralpiases\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })(), uglyduck: (function () {\n        var game = {};\n        game.commands = {\n            \"move\": 1\n        };\n        game.graphics = {\n            \"icons\": {\n                \"soldiers\": \"pawns\",\n                \"kings\": \"kings\"\n            },\n            \"tiles\": {\n                \"homerow\": \"playercolour\"\n            }\n        };\n        game.board = {\n            \"height\": 5,\n            \"width\": 5,\n            \"terrain\": {\n                \"homerow\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"e1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a5\", \"e5\"]\n                    ]\n                }\n            }\n        };\n        game.AI = [];\n        game.id = \"uglyduck\";\n        var boardDef = {\n            \"height\": 5,\n            \"width\": 5,\n            \"terrain\": {\n                \"homerow\": {\n                    \"1\": [\n                        [\"rect\", \"a1\", \"e1\"]\n                    ],\n                    \"2\": [\n                        [\"rect\", \"a5\", \"e5\"]\n                    ]\n                }\n            }\n        };\n        var connections = boardConnections(boardDef);\n        var BOARD = boardLayers(boardDef);\n        var relativedirs = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8];\n        function reduce(coll, iterator, acc) {\n            for (var key in coll) {\n                acc = iterator(acc, coll[key], key);\n            }\n            return acc;\n        }\n        game.newGame = function () {\n            var turnseed = {\n                turn: 0\n            };\n            var stepseed = {\n                UNITDATA: deduceInitialUnitData({\n                    \"soldiers\": {\n                        \"1\": [\n                            [\"rect\", \"a1\", \"e1\"]\n                        ],\n                        \"2\": [\n                            [\"rect\", \"a5\", \"e5\"]\n                        ]\n                    }\n                })\n            };\n            return game.start1(turnseed, stepseed);\n        };\n        game.debug = function () {\n            return {\n                BOARD: BOARD,\n                connections: connections,\n                plr1: game.debug1(),\n                plr2: game.debug2()\n            };\n        };\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 1);\n            var ownernames = [\"neutral\", \"my\", \"opp\"];\n            var player = 1;\n            var otherplayer = 2;\n            game.selectunit1 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = (!!(UNITLAYERS.mykings[MARKS['selectunit']]) ? [4, 5, 6] : [8, 1, 2]);\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 3; dirnbr++) {\n                    var DIR = neighbourdirs[dirnbr];\n                    var POS = startconnections[DIR];\n                    if (POS && (((DIR === 1) || (DIR === 5)) ? !(UNITLAYERS.units[POS]) : !(UNITLAYERS.myunits[POS]))) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget1';\n                }\n                return newstep;\n            };\n            game.selectunit1instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget1 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move1';\n                return newstep;\n            };\n            game.selectmovetarget1instruction = function (step) {\n                return '';\n            };\n            game.move1 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                if (!!(TERRAIN.opphomerow[MARKS['selectmovetarget']])) {\n                    var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'group': 'kings'\n                        });\n                    }\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mykings, s1 = TERRAIN.myhomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 1;\n                    var result = winner === 1 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'swanhome';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move1instruction = function (step) {\n                return '';\n            };\n            game.start1 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit1';\n                }\n                return turn;\n            };\n            game.start1instruction = function (step) {\n                return '';\n            };\n            game.debug1 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        (function () {\n            var TERRAIN = terrainLayers(boardDef, 2);\n            var ownernames = [\"neutral\", \"opp\", \"my\"];\n            var player = 2;\n            var otherplayer = 1;\n            game.selectunit2 = function (turn, step, markpos) {\n                var ARTIFACTS = {\n                    movetargets: Object.assign({}, step.ARTIFACTS.movetargets)\n                };\n                var UNITLAYERS = step.UNITLAYERS;\n                var MARKS = {\n                    selectunit: markpos\n                };\n                var STARTPOS = MARKS['selectunit'];\n                var neighbourdirs = (!!(UNITLAYERS.mykings[MARKS['selectunit']]) ? [8, 1, 2] : [4, 5, 6]);\n                var startconnections = connections[STARTPOS];\n                for (var dirnbr = 0; dirnbr < 3; dirnbr++) {\n                    var DIR = neighbourdirs[dirnbr];\n                    var POS = startconnections[DIR];\n                    if (POS && (((DIR === 1) || (DIR === 5)) ? !(UNITLAYERS.units[POS]) : !(UNITLAYERS.myunits[POS]))) {\n                        ARTIFACTS['movetargets'][POS] = {};\n                    }\n                }\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectunit'\n                });\n                turn.links[newstepid] = {};\n                var newlinks = turn.links[newstepid];\n                for (var linkpos in ARTIFACTS.movetargets) {\n                    newlinks[linkpos] = 'selectmovetarget2';\n                }\n                return newstep;\n            };\n            game.selectunit2instruction = function (step) {\n                return '';\n            };\n            game.selectmovetarget2 = function (turn, step, markpos) {\n                var MARKS = {\n                    selectmovetarget: markpos,\n                    selectunit: step.MARKS.selectunit\n                };\n                var newstepid = step.stepid + '-' + markpos;\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    MARKS: MARKS,\n                    stepid: newstepid,\n                    path: step.path.concat(markpos),\n                    name: 'selectmovetarget'\n                });\n                turn.links[newstepid] = {};\n                turn.links[newstepid].move = 'move2';\n                return newstep;\n            };\n            game.selectmovetarget2instruction = function (step) {\n                return '';\n            };\n            game.move2 = function (turn, step) {\n                var ARTIFACTS = Object.assign({}, step.ARTIFACTS, {});\n                var MARKS = step.MARKS;\n                var UNITDATA = Object.assign({}, step.UNITDATA);\n                var UNITLAYERS = step.UNITLAYERS;\n                if (!!(TERRAIN.opphomerow[MARKS['selectmovetarget']])) {\n                    var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                    if (unitid) {\n                        UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                            'group': 'kings'\n                        });\n                    }\n                }\n                var unitid = (UNITLAYERS.units[MARKS['selectunit']] || {}).id;\n                if (unitid) {\n                    UNITDATA[unitid] = Object.assign({}, UNITDATA[unitid], {\n                        'pos': MARKS['selectmovetarget']\n                    });\n                    delete UNITDATA[(UNITLAYERS.units[MARKS['selectmovetarget']] || {}).id];\n                }\n                MARKS = {};\n                UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var newstepid = step.stepid + '-' + 'move';\n                var newstep = turn.steps[newstepid] = Object.assign({}, step, {\n                    ARTIFACTS: ARTIFACTS,\n                    MARKS: MARKS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    stepid: newstepid,\n                    name: 'move',\n                    path: step.path.concat('move')\n                });\n                turn.links[newstepid] = {};\n                if (Object.keys((function () {\n                    var ret = {}, s0 = UNITLAYERS.mykings, s1 = TERRAIN.myhomerow;\n                    for (var key in s0) {\n                        if (s1[key]) {\n                            ret[key] = s0[key];\n                        }\n                    }\n                    return ret;\n                }()) || {}).length !== 0) {\n                    var winner = 2;\n                    var result = winner === 2 ? 'win' : winner ? 'lose' : 'draw';\n                    turn.links[newstepid][result] = 'swanhome';\n                }\n                else\n                    turn.links[newstepid].endturn = \"start\" + otherplayer;\n                return newstep;\n            };\n            game.move2instruction = function (step) {\n                return '';\n            };\n            game.start2 = function (turn, step) {\n                var turn = {\n                    steps: {},\n                    player: player,\n                    turn: turn.turn + 1,\n                    links: {\n                        root: {}\n                    }\n                };\n                var MARKS = {};\n                var ARTIFACTS = {\n                    \"movetargets\": {}\n                };\n                var UNITDATA = step.UNITDATA;\n                var UNITLAYERS = {\n                    \"soldiers\": {},\n                    \"mysoldiers\": {},\n                    \"oppsoldiers\": {},\n                    \"neutralsoldiers\": {},\n                    \"kings\": {},\n                    \"mykings\": {},\n                    \"oppkings\": {},\n                    \"neutralkings\": {},\n                    \"units\": {},\n                    \"myunits\": {},\n                    \"oppunits\": {},\n                    \"neutralunits\": {}\n                };\n                for (var unitid in UNITDATA) {\n                    var currentunit = UNITDATA[unitid];\n                    var unitgroup = currentunit.group;\n                    var unitpos = currentunit.pos;\n                    var owner = ownernames[currentunit.owner];\n                    UNITLAYERS.units[unitpos] = UNITLAYERS[unitgroup][unitpos] = UNITLAYERS[owner + unitgroup][unitpos] = UNITLAYERS[owner + 'units'][unitpos] = currentunit;\n                }\n                var newstep = turn.steps.root = {\n                    ARTIFACTS: ARTIFACTS,\n                    UNITDATA: UNITDATA,\n                    UNITLAYERS: UNITLAYERS,\n                    MARKS: MARKS,\n                    stepid: 'root',\n                    name: 'start',\n                    path: []\n                };\n                var newlinks = turn.links.root;\n                for (var linkpos in UNITLAYERS.myunits) {\n                    newlinks[linkpos] = 'selectunit2';\n                }\n                return turn;\n            };\n            game.start2instruction = function (step) {\n                return '';\n            };\n            game.debug2 = function () {\n                return {\n                    TERRAIN: TERRAIN\n                };\n            };\n        })();\n        return game;\n    })()\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../library/dist/library.js\n// module id = 197\n// module chunks = 0\n\n//# sourceURL=webpack:///../library/dist/library.js?");

/***/ }),
/* 198 */
/***/ (function(module, exports) {

eval("module.exports = { \"_test\": { \"id\": \"_test\", \"name\": \"Test\", \"tags\": [], \"exclude\": true, \"AI\": [\"Randy\"], \"board\": { \"height\": 10, \"width\": 10, \"terrainLayers\": { \"steps\": { \"a1\": { \"pos\": \"a1\" }, \"a2\": { \"pos\": \"a2\" }, \"a3\": { \"pos\": \"a3\" }, \"a4\": { \"pos\": \"a4\" }, \"b1\": { \"pos\": \"b1\" }, \"b2\": { \"pos\": \"b2\" }, \"b3\": { \"pos\": \"b3\" }, \"b4\": { \"pos\": \"b4\" }, \"c1\": { \"pos\": \"c1\" }, \"c2\": { \"pos\": \"c2\" }, \"c3\": { \"pos\": \"c3\" }, \"c4\": { \"pos\": \"c4\" }, \"d1\": { \"pos\": \"d1\" }, \"d2\": { \"pos\": \"d2\" }, \"d3\": { \"pos\": \"d3\" }, \"d4\": { \"pos\": \"d4\" } } } }, \"graphics\": { \"icons\": { \"stepsfirsts\": \"queens\", \"blocksfirsts\": \"queens\", \"defaultfirsts\": \"queens\", \"noblocks\": \"queens\", \"pawns\": \"pawns\" }, \"tiles\": { \"steps\": \"grass\" } } }, \"amazon\": { \"id\": \"amazon\", \"name\": \"Amazons\", \"source\": \"http://www.chessvariants.org/other.dir/amazons.html\", \"tags\": [\"deploy\", \"starve\"], \"author\": \"Walter Zamkauskas\", \"year\": 1988, \"AI\": [\"Steve\", \"Randy\"], \"board\": { \"height\": 10, \"width\": 10, \"terrainLayers\": {} }, \"graphics\": { \"icons\": { \"queens\": \"queens\", \"fires\": \"pawns\" } } }, \"aries\": { \"id\": \"aries\", \"name\": \"Aries\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/aries.htm\", \"tags\": [\"push\", \"infiltrate\", \"eradicate\", \"multiplegoals\"], \"AI\": [\"Randy\"], \"board\": { \"height\": 8, \"width\": 8, \"terrainLayers\": { \"corner\": { \"a1\": { \"pos\": \"a1\", \"owner\": 1 }, \"h8\": { \"pos\": \"h8\", \"owner\": 2 } } } }, \"graphics\": { \"tiles\": { \"corner\": \"playercolour\" }, \"icons\": { \"soldiers\": \"rooks\" } } }, \"atrium\": { \"id\": \"atrium\", \"name\": \"Atrium\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/atrium.htm\", \"tags\": [\"formation\", \"nocapture\"], \"author\": \"Guy Jeandel\", \"year\": 2004, \"AI\": [\"Randy\"], \"board\": { \"height\": 5, \"width\": 5, \"terrainLayers\": {} }, \"graphics\": { \"icons\": { \"kings\": \"kings\", \"queens\": \"queens\" } } }, \"castle\": { \"id\": \"castle\", \"name\": \"Castle\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/castle.htm\", \"tags\": [\"infiltrate\", \"terrain\", \"capture\"], \"AI\": [\"Randy\"], \"board\": { \"width\": 19, \"height\": 19, \"terrainLayers\": { \"walls\": { \"c2\": { \"pos\": \"c2\" }, \"c3\": { \"pos\": \"c3\" }, \"c4\": { \"pos\": \"c4\" }, \"c5\": { \"pos\": \"c5\" }, \"c6\": { \"pos\": \"c6\" }, \"c7\": { \"pos\": \"c7\" }, \"c8\": { \"pos\": \"c8\" }, \"f1\": { \"pos\": \"f1\" }, \"f2\": { \"pos\": \"f2\" }, \"f3\": { \"pos\": \"f3\" }, \"f4\": { \"pos\": \"f4\" }, \"f5\": { \"pos\": \"f5\" }, \"f6\": { \"pos\": \"f6\" }, \"h2\": { \"pos\": \"h2\" }, \"h3\": { \"pos\": \"h3\" }, \"h4\": { \"pos\": \"h4\" }, \"h5\": { \"pos\": \"h5\" }, \"h6\": { \"pos\": \"h6\" }, \"l2\": { \"pos\": \"l2\" }, \"l3\": { \"pos\": \"l3\" }, \"l4\": { \"pos\": \"l4\" }, \"l5\": { \"pos\": \"l5\" }, \"l6\": { \"pos\": \"l6\" }, \"n1\": { \"pos\": \"n1\" }, \"n2\": { \"pos\": \"n2\" }, \"n3\": { \"pos\": \"n3\" }, \"n4\": { \"pos\": \"n4\" }, \"n5\": { \"pos\": \"n5\" }, \"n6\": { \"pos\": \"n6\" }, \"q2\": { \"pos\": \"q2\" }, \"q3\": { \"pos\": \"q3\" }, \"q4\": { \"pos\": \"q4\" }, \"q5\": { \"pos\": \"q5\" }, \"q6\": { \"pos\": \"q6\" }, \"q7\": { \"pos\": \"q7\" }, \"q8\": { \"pos\": \"q8\" }, \"d8\": { \"pos\": \"d8\" }, \"e8\": { \"pos\": \"e8\" }, \"f8\": { \"pos\": \"f8\" }, \"g8\": { \"pos\": \"g8\" }, \"h8\": { \"pos\": \"h8\" }, \"i8\": { \"pos\": \"i8\" }, \"k8\": { \"pos\": \"k8\" }, \"l8\": { \"pos\": \"l8\" }, \"m8\": { \"pos\": \"m8\" }, \"n8\": { \"pos\": \"n8\" }, \"o8\": { \"pos\": \"o8\" }, \"p8\": { \"pos\": \"p8\" }, \"i6\": { \"pos\": \"i6\" }, \"j6\": { \"pos\": \"j6\" }, \"k6\": { \"pos\": \"k6\" }, \"i2\": { \"pos\": \"i2\" }, \"k2\": { \"pos\": \"k2\" }, \"c12\": { \"pos\": \"c12\" }, \"c13\": { \"pos\": \"c13\" }, \"c14\": { \"pos\": \"c14\" }, \"c15\": { \"pos\": \"c15\" }, \"c16\": { \"pos\": \"c16\" }, \"c17\": { \"pos\": \"c17\" }, \"c18\": { \"pos\": \"c18\" }, \"f14\": { \"pos\": \"f14\" }, \"f15\": { \"pos\": \"f15\" }, \"f16\": { \"pos\": \"f16\" }, \"f17\": { \"pos\": \"f17\" }, \"f18\": { \"pos\": \"f18\" }, \"f19\": { \"pos\": \"f19\" }, \"h14\": { \"pos\": \"h14\" }, \"h15\": { \"pos\": \"h15\" }, \"h16\": { \"pos\": \"h16\" }, \"h17\": { \"pos\": \"h17\" }, \"h18\": { \"pos\": \"h18\" }, \"l14\": { \"pos\": \"l14\" }, \"l15\": { \"pos\": \"l15\" }, \"l16\": { \"pos\": \"l16\" }, \"l17\": { \"pos\": \"l17\" }, \"l18\": { \"pos\": \"l18\" }, \"n14\": { \"pos\": \"n14\" }, \"n15\": { \"pos\": \"n15\" }, \"n16\": { \"pos\": \"n16\" }, \"n17\": { \"pos\": \"n17\" }, \"n18\": { \"pos\": \"n18\" }, \"n19\": { \"pos\": \"n19\" }, \"q12\": { \"pos\": \"q12\" }, \"q13\": { \"pos\": \"q13\" }, \"q14\": { \"pos\": \"q14\" }, \"q15\": { \"pos\": \"q15\" }, \"q16\": { \"pos\": \"q16\" }, \"q17\": { \"pos\": \"q17\" }, \"q18\": { \"pos\": \"q18\" }, \"d12\": { \"pos\": \"d12\" }, \"e12\": { \"pos\": \"e12\" }, \"f12\": { \"pos\": \"f12\" }, \"g12\": { \"pos\": \"g12\" }, \"h12\": { \"pos\": \"h12\" }, \"i12\": { \"pos\": \"i12\" }, \"k12\": { \"pos\": \"k12\" }, \"l12\": { \"pos\": \"l12\" }, \"m12\": { \"pos\": \"m12\" }, \"n12\": { \"pos\": \"n12\" }, \"o12\": { \"pos\": \"o12\" }, \"p12\": { \"pos\": \"p12\" }, \"i14\": { \"pos\": \"i14\" }, \"j14\": { \"pos\": \"j14\" }, \"k14\": { \"pos\": \"k14\" }, \"i18\": { \"pos\": \"i18\" }, \"k18\": { \"pos\": \"k18\" } }, \"thrones\": { \"j4\": { \"pos\": \"j4\", \"owner\": 1 }, \"j16\": { \"pos\": \"j16\", \"owner\": 2 } } } }, \"graphics\": { \"tiles\": { \"walls\": \"castle\", \"thrones\": \"playercolour\" }, \"icons\": { \"soldiers\": \"rooks\" } } }, \"coffee\": { \"id\": \"coffee\", \"name\": \"Coffee\", \"source\": \"https://www.boardgamegeek.com/filepage/64972/coffee-rules-nestorgames\", \"tags\": [\"deploy\", \"formation\", \"limitmoves\"], \"author\": \"Néstor Romeral Andrés\", \"AI\": [\"Randy\"], \"board\": { \"height\": 5, \"width\": 5, \"terrainLayers\": {} }, \"graphics\": { \"icons\": { \"soldiers\": \"pawns\", \"markers\": \"pawns\" } } }, \"daggers\": { \"id\": \"daggers\", \"name\": \"Daggers\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/daggers.htm\", \"tags\": [\"differentunits\", \"asymmetric\", \"multiplegoals\", \"infiltrate\", \"killking\", \"capture\"], \"AI\": [\"Randy\"], \"board\": { \"height\": 8, \"width\": 8, \"terrainLayers\": { \"bases\": { \"a8\": { \"pos\": \"a8\", \"owner\": 1 }, \"b8\": { \"pos\": \"b8\", \"owner\": 1 }, \"c8\": { \"pos\": \"c8\", \"owner\": 1 }, \"d8\": { \"pos\": \"d8\", \"owner\": 1 }, \"e8\": { \"pos\": \"e8\", \"owner\": 1 }, \"f8\": { \"pos\": \"f8\", \"owner\": 1 }, \"g8\": { \"pos\": \"g8\", \"owner\": 1 }, \"h8\": { \"pos\": \"h8\", \"owner\": 1 }, \"a1\": { \"pos\": \"a1\", \"owner\": 2 }, \"b1\": { \"pos\": \"b1\", \"owner\": 2 }, \"c1\": { \"pos\": \"c1\", \"owner\": 2 }, \"d1\": { \"pos\": \"d1\", \"owner\": 2 }, \"e1\": { \"pos\": \"e1\", \"owner\": 2 }, \"f1\": { \"pos\": \"f1\", \"owner\": 2 }, \"g1\": { \"pos\": \"g1\", \"owner\": 2 }, \"h1\": { \"pos\": \"h1\", \"owner\": 2 } } } }, \"graphics\": { \"tiles\": { \"bases\": \"playercolour\" }, \"icons\": { \"daggers\": \"bishops\", \"crowns\": \"kings\" } } }, \"gogol\": { \"id\": \"gogol\", \"name\": \"Gogol\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/gogol.htm\", \"tags\": [\"deploy\", \"infiltrate\", \"kingkill\", \"multiplegoals\", \"differentunits\", \"jump\"], \"AI\": [\"Randy\"], \"board\": { \"height\": 8, \"width\": 8, \"terrainLayers\": { \"homerow\": { \"a1\": { \"pos\": \"a1\", \"owner\": 1 }, \"b1\": { \"pos\": \"b1\", \"owner\": 1 }, \"c1\": { \"pos\": \"c1\", \"owner\": 1 }, \"d1\": { \"pos\": \"d1\", \"owner\": 1 }, \"e1\": { \"pos\": \"e1\", \"owner\": 1 }, \"f1\": { \"pos\": \"f1\", \"owner\": 1 }, \"g1\": { \"pos\": \"g1\", \"owner\": 1 }, \"h1\": { \"pos\": \"h1\", \"owner\": 1 }, \"a8\": { \"pos\": \"a8\", \"owner\": 2 }, \"b8\": { \"pos\": \"b8\", \"owner\": 2 }, \"c8\": { \"pos\": \"c8\", \"owner\": 2 }, \"d8\": { \"pos\": \"d8\", \"owner\": 2 }, \"e8\": { \"pos\": \"e8\", \"owner\": 2 }, \"f8\": { \"pos\": \"f8\", \"owner\": 2 }, \"g8\": { \"pos\": \"g8\", \"owner\": 2 }, \"h8\": { \"pos\": \"h8\", \"owner\": 2 } } } }, \"graphics\": { \"tiles\": { \"homerow\": \"playercolour\" }, \"icons\": { \"kings\": \"kings\", \"soldiers\": \"pawns\" } } }, \"jostle\": { \"id\": \"jostle\", \"name\": \"Jostle\", \"source\": \"http://www.marksteeregames.com/Jostle_Go_rules.pdf\", \"tags\": [], \"author\": \"Mark Steere\", \"year\": 2010, \"AI\": [\"Randy\"], \"board\": { \"height\": 10, \"width\": 10, \"terrainLayers\": {} }, \"graphics\": { \"icons\": { \"checkers\": \"pawns\" } } }, \"kickrun\": { \"id\": \"kickrun\", \"name\": \"Kick & run\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/kickrun.htm\", \"tags\": [\"infiltrate\", \"differentunits\", \"capture\"], \"AI\": [\"Randy\"], \"board\": { \"height\": 5, \"width\": 5, \"terrainLayers\": { \"corners\": { \"a1\": { \"pos\": \"a1\", \"owner\": 1 }, \"e5\": { \"pos\": \"e5\", \"owner\": 2 } } } }, \"graphics\": { \"tiles\": { \"corners\": \"playercolour\" }, \"icons\": { \"runners\": \"bishops\", \"sidekickers\": \"pawns\" } } }, \"krieg\": { \"id\": \"krieg\", \"name\": \"Krieg\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/krieg.htm\", \"tags\": [\"infiltrate\", \"multiplegoals\"], \"AI\": [\"Fred\", \"Randy\"], \"board\": { \"width\": 4, \"height\": 4, \"terrainLayers\": { \"corners\": { \"a4\": { \"pos\": \"a4\", \"owner\": 1 }, \"d1\": { \"pos\": \"d1\", \"owner\": 2 } }, \"bases\": { \"b4\": { \"pos\": \"b4\", \"owner\": 1 }, \"a3\": { \"pos\": \"a3\", \"owner\": 1 }, \"b3\": { \"pos\": \"b3\", \"owner\": 1 }, \"c2\": { \"pos\": \"c2\", \"owner\": 2 }, \"d2\": { \"pos\": \"d2\", \"owner\": 2 }, \"c1\": { \"pos\": \"c1\", \"owner\": 2 } } } }, \"graphics\": { \"tiles\": { \"corners\": \"playercolour\", \"bases\": \"castle\" }, \"icons\": { \"notfrozens\": \"knights\", \"frozens\": \"rooks\" } } }, \"murusgallicus\": { \"id\": \"murusgallicus\", \"name\": \"Murus Gallicus\", \"source\": \"https://boardgamegeek.com/filepage/46316/murus-gallicus-detailed-rules\", \"tags\": [\"differentunits\", \"infiltrate\"], \"author\": \"Phillip L. Leduc\", \"AI\": [\"Steve\", \"Joe\", \"Clive\", \"Randy\"], \"board\": { \"height\": 7, \"width\": 8, \"terrainLayers\": { \"homerow\": { \"a1\": { \"pos\": \"a1\", \"owner\": 1 }, \"b1\": { \"pos\": \"b1\", \"owner\": 1 }, \"c1\": { \"pos\": \"c1\", \"owner\": 1 }, \"d1\": { \"pos\": \"d1\", \"owner\": 1 }, \"e1\": { \"pos\": \"e1\", \"owner\": 1 }, \"f1\": { \"pos\": \"f1\", \"owner\": 1 }, \"g1\": { \"pos\": \"g1\", \"owner\": 1 }, \"h1\": { \"pos\": \"h1\", \"owner\": 1 }, \"a7\": { \"pos\": \"a7\", \"owner\": 2 }, \"b7\": { \"pos\": \"b7\", \"owner\": 2 }, \"c7\": { \"pos\": \"c7\", \"owner\": 2 }, \"d7\": { \"pos\": \"d7\", \"owner\": 2 }, \"e7\": { \"pos\": \"e7\", \"owner\": 2 }, \"f7\": { \"pos\": \"f7\", \"owner\": 2 }, \"g7\": { \"pos\": \"g7\", \"owner\": 2 }, \"h7\": { \"pos\": \"h7\", \"owner\": 2 } } } }, \"graphics\": { \"tiles\": { \"homerow\": \"playercolour\" }, \"icons\": { \"towers\": \"rooks\", \"walls\": \"pawns\" } } }, \"murusgallicusadvanced\": { \"id\": \"murusgallicusadvanced\", \"name\": \"Murus Gallicus Advanced\", \"source\": \"https://boardgamegeek.com/thread/844020/advanced-murus-gallicus\", \"tags\": [\"differentunits\", \"infiltrate\", \"shoot\"], \"author\": \"Phillip L. Leduc\", \"AI\": [\"Randy\"], \"board\": { \"height\": 7, \"width\": 8, \"terrainLayers\": { \"homerow\": { \"a1\": { \"pos\": \"a1\", \"owner\": 1 }, \"b1\": { \"pos\": \"b1\", \"owner\": 1 }, \"c1\": { \"pos\": \"c1\", \"owner\": 1 }, \"d1\": { \"pos\": \"d1\", \"owner\": 1 }, \"e1\": { \"pos\": \"e1\", \"owner\": 1 }, \"f1\": { \"pos\": \"f1\", \"owner\": 1 }, \"g1\": { \"pos\": \"g1\", \"owner\": 1 }, \"h1\": { \"pos\": \"h1\", \"owner\": 1 }, \"a7\": { \"pos\": \"a7\", \"owner\": 2 }, \"b7\": { \"pos\": \"b7\", \"owner\": 2 }, \"c7\": { \"pos\": \"c7\", \"owner\": 2 }, \"d7\": { \"pos\": \"d7\", \"owner\": 2 }, \"e7\": { \"pos\": \"e7\", \"owner\": 2 }, \"f7\": { \"pos\": \"f7\", \"owner\": 2 }, \"g7\": { \"pos\": \"g7\", \"owner\": 2 }, \"h7\": { \"pos\": \"h7\", \"owner\": 2 } } } }, \"graphics\": { \"tiles\": { \"homerow\": \"playercolour\" }, \"icons\": { \"towers\": \"rooks\", \"walls\": \"pawns\", \"catapults\": \"queens\" } } }, \"orthokon\": { \"id\": \"orthokon\", \"name\": \"Orthokon\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/orthokon.htm\", \"tags\": [\"changeowner\", \"stalemate\"], \"author\": \"L. Lynn Smith\", \"year\": 2001, \"AI\": [\"Bob\", \"Randy\"], \"board\": { \"height\": 4, \"width\": 4, \"terrainLayers\": {} }, \"graphics\": { \"icons\": { \"soldiers\": \"pawns\" } } }, \"semaphor\": { \"id\": \"semaphor\", \"name\": \"Semaphor\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/semaphor.htm\", \"tags\": [\"commonunits\", \"formation\", \"deploy\", \"chooseaction\", \"changeunit\"], \"AI\": [\"Randy\"], \"board\": { \"width\": 4, \"height\": 3, \"terrainLayers\": {} }, \"graphics\": { \"icons\": { \"kings\": \"kings\", \"pawns\": \"pawns\", \"bishops\": \"bishops\" } } }, \"serauqs\": { \"id\": \"serauqs\", \"name\": \"Serauqs\", \"source\": \"https://boardgamegeek.com/image/274401/serauqs\", \"tags\": [\"formation\"], \"AI\": [\"Randy\"], \"board\": { \"height\": 4, \"width\": 4, \"terrainLayers\": { \"corners\": { \"a1\": { \"pos\": \"a1\" }, \"a4\": { \"pos\": \"a4\" }, \"d1\": { \"pos\": \"d1\" }, \"d4\": { \"pos\": \"d4\" } }, \"middle\": { \"b2\": { \"pos\": \"b2\" }, \"b3\": { \"pos\": \"b3\" }, \"c2\": { \"pos\": \"c2\" }, \"c3\": { \"pos\": \"c3\" } } } }, \"graphics\": { \"icons\": { \"soldiers\": \"pawns\", \"wild\": \"kings\" }, \"tiles\": { \"corners\": \"grass\", \"middle\": \"castle\" } } }, \"snijpunt\": { \"id\": \"snijpunt\", \"name\": \"Snijpunt\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/snijpunt.htm\", \"tags\": [\"formation\", \"changeowner\", \"deploy\"], \"AI\": [\"Randy\"], \"board\": { \"height\": 6, \"width\": 6, \"terrainLayers\": { \"zone\": { \"b6\": { \"pos\": \"b6\", \"owner\": 1 }, \"c6\": { \"pos\": \"c6\", \"owner\": 1 }, \"d6\": { \"pos\": \"d6\", \"owner\": 1 }, \"e6\": { \"pos\": \"e6\", \"owner\": 1 }, \"f6\": { \"pos\": \"f6\", \"owner\": 1 }, \"a1\": { \"pos\": \"a1\", \"owner\": 2 }, \"a2\": { \"pos\": \"a2\", \"owner\": 2 }, \"a3\": { \"pos\": \"a3\", \"owner\": 2 }, \"a4\": { \"pos\": \"a4\", \"owner\": 2 }, \"a5\": { \"pos\": \"a5\", \"owner\": 2 } }, \"corner\": { \"a6\": { \"pos\": \"a6\" } } } }, \"graphics\": { \"icons\": { \"soldiers\": \"pawns\", \"sniper\": \"kings\" }, \"tiles\": { \"zone\": \"grass\", \"corner\": \"castle\" } } }, \"threemusketeers\": { \"id\": \"threemusketeers\", \"name\": \"Three Musketeers\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/3musketeers.htm\", \"tags\": [\"asymmetric\", \"formation\"], \"AI\": [\"Randy\"], \"board\": { \"height\": 5, \"width\": 5, \"terrainLayers\": {} }, \"graphics\": { \"icons\": { \"pawns\": \"pawns\", \"kings\": \"kings\" } } }, \"transet\": { \"id\": \"transet\", \"name\": \"Transet\", \"source\": \"http://sagme.blogspot.se/2013/05/transet.html\", \"tags\": [\"infiltration\", \"differentunits\"], \"AI\": [\"Randy\"], \"board\": { \"height\": 5, \"width\": 5, \"terrainLayers\": { \"base\": { \"a1\": { \"pos\": \"a1\", \"owner\": 1 }, \"b1\": { \"pos\": \"b1\", \"owner\": 1 }, \"c1\": { \"pos\": \"c1\", \"owner\": 1 }, \"d1\": { \"pos\": \"d1\", \"owner\": 1 }, \"e1\": { \"pos\": \"e1\", \"owner\": 1 }, \"a5\": { \"pos\": \"a5\", \"owner\": 2 }, \"b5\": { \"pos\": \"b5\", \"owner\": 2 }, \"c5\": { \"pos\": \"c5\", \"owner\": 2 }, \"d5\": { \"pos\": \"d5\", \"owner\": 2 }, \"e5\": { \"pos\": \"e5\", \"owner\": 2 } } } }, \"graphics\": { \"icons\": { \"pinets\": \"pawns\", \"piokers\": \"bishops\", \"piases\": \"kings\" }, \"tiles\": { \"base\": \"playercolour\" } } }, \"uglyduck\": { \"name\": \"Ugly duck\", \"id\": \"uglyduck\", \"source\": \"http://www.di.fc.ul.pt/~jpn/gv/uglyduck.htm\", \"tags\": [\"capture\", \"differentunits\"], \"AI\": [\"Randy\"], \"board\": { \"height\": 5, \"width\": 5, \"terrainLayers\": { \"homerow\": { \"a1\": { \"pos\": \"a1\", \"owner\": 1 }, \"b1\": { \"pos\": \"b1\", \"owner\": 1 }, \"c1\": { \"pos\": \"c1\", \"owner\": 1 }, \"d1\": { \"pos\": \"d1\", \"owner\": 1 }, \"e1\": { \"pos\": \"e1\", \"owner\": 1 }, \"a5\": { \"pos\": \"a5\", \"owner\": 2 }, \"b5\": { \"pos\": \"b5\", \"owner\": 2 }, \"c5\": { \"pos\": \"c5\", \"owner\": 2 }, \"d5\": { \"pos\": \"d5\", \"owner\": 2 }, \"e5\": { \"pos\": \"e5\", \"owner\": 2 } } } }, \"graphics\": { \"icons\": { \"soldiers\": \"pawns\", \"kings\": \"kings\" }, \"tiles\": { \"homerow\": \"playercolour\" } } } };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../library/dist/meta.js\n// module id = 198\n// module chunks = 0\n\n//# sourceURL=webpack:///../library/dist/meta.js?");

/***/ }),
/* 199 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 199\n// module chunks = 0\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ })
/******/ ]);